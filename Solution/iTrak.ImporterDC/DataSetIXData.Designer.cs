//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace iTrak.Importer.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetIXData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetIXData : global::System.Data.DataSet {
        
        private BlotterDataTable tableBlotter;
        
        private DetailedReportDataTable tableDetailedReport;
        
        private IncidentAttachmentDataTable tableIncidentAttachment;
        
        private SubjectProfileDataTable tableSubjectProfile;
        
        private _ConversionTmpDataTable table_ConversionTmp;
        
        private BanWatchStatusDataTable tableBanWatchStatus;
        
        private SubjectBanDataTable tableSubjectBan;
        
        private iXData_SubjectProfileDataTable tableiXData_SubjectProfile;
        
        private ParticipantAssignmentDataTable tableParticipantAssignment;
        
        private DropdownSelectionDataTable tableDropdownSelection;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetIXData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetIXData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Blotter"] != null)) {
                    base.Tables.Add(new BlotterDataTable(ds.Tables["Blotter"]));
                }
                if ((ds.Tables["DetailedReport"] != null)) {
                    base.Tables.Add(new DetailedReportDataTable(ds.Tables["DetailedReport"]));
                }
                if ((ds.Tables["IncidentAttachment"] != null)) {
                    base.Tables.Add(new IncidentAttachmentDataTable(ds.Tables["IncidentAttachment"]));
                }
                if ((ds.Tables["SubjectProfile"] != null)) {
                    base.Tables.Add(new SubjectProfileDataTable(ds.Tables["SubjectProfile"]));
                }
                if ((ds.Tables["_ConversionTmp"] != null)) {
                    base.Tables.Add(new _ConversionTmpDataTable(ds.Tables["_ConversionTmp"]));
                }
                if ((ds.Tables["BanWatchStatus"] != null)) {
                    base.Tables.Add(new BanWatchStatusDataTable(ds.Tables["BanWatchStatus"]));
                }
                if ((ds.Tables["SubjectBan"] != null)) {
                    base.Tables.Add(new SubjectBanDataTable(ds.Tables["SubjectBan"]));
                }
                if ((ds.Tables["iXData_SubjectProfile"] != null)) {
                    base.Tables.Add(new iXData_SubjectProfileDataTable(ds.Tables["iXData_SubjectProfile"]));
                }
                if ((ds.Tables["ParticipantAssignment"] != null)) {
                    base.Tables.Add(new ParticipantAssignmentDataTable(ds.Tables["ParticipantAssignment"]));
                }
                if ((ds.Tables["DropdownSelection"] != null)) {
                    base.Tables.Add(new DropdownSelectionDataTable(ds.Tables["DropdownSelection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BlotterDataTable Blotter {
            get {
                return this.tableBlotter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailedReportDataTable DetailedReport {
            get {
                return this.tableDetailedReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IncidentAttachmentDataTable IncidentAttachment {
            get {
                return this.tableIncidentAttachment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubjectProfileDataTable SubjectProfile {
            get {
                return this.tableSubjectProfile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _ConversionTmpDataTable _ConversionTmp {
            get {
                return this.table_ConversionTmp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BanWatchStatusDataTable BanWatchStatus {
            get {
                return this.tableBanWatchStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubjectBanDataTable SubjectBan {
            get {
                return this.tableSubjectBan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public iXData_SubjectProfileDataTable iXData_SubjectProfile {
            get {
                return this.tableiXData_SubjectProfile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParticipantAssignmentDataTable ParticipantAssignment {
            get {
                return this.tableParticipantAssignment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DropdownSelectionDataTable DropdownSelection {
            get {
                return this.tableDropdownSelection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetIXData cln = ((DataSetIXData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Blotter"] != null)) {
                    base.Tables.Add(new BlotterDataTable(ds.Tables["Blotter"]));
                }
                if ((ds.Tables["DetailedReport"] != null)) {
                    base.Tables.Add(new DetailedReportDataTable(ds.Tables["DetailedReport"]));
                }
                if ((ds.Tables["IncidentAttachment"] != null)) {
                    base.Tables.Add(new IncidentAttachmentDataTable(ds.Tables["IncidentAttachment"]));
                }
                if ((ds.Tables["SubjectProfile"] != null)) {
                    base.Tables.Add(new SubjectProfileDataTable(ds.Tables["SubjectProfile"]));
                }
                if ((ds.Tables["_ConversionTmp"] != null)) {
                    base.Tables.Add(new _ConversionTmpDataTable(ds.Tables["_ConversionTmp"]));
                }
                if ((ds.Tables["BanWatchStatus"] != null)) {
                    base.Tables.Add(new BanWatchStatusDataTable(ds.Tables["BanWatchStatus"]));
                }
                if ((ds.Tables["SubjectBan"] != null)) {
                    base.Tables.Add(new SubjectBanDataTable(ds.Tables["SubjectBan"]));
                }
                if ((ds.Tables["iXData_SubjectProfile"] != null)) {
                    base.Tables.Add(new iXData_SubjectProfileDataTable(ds.Tables["iXData_SubjectProfile"]));
                }
                if ((ds.Tables["ParticipantAssignment"] != null)) {
                    base.Tables.Add(new ParticipantAssignmentDataTable(ds.Tables["ParticipantAssignment"]));
                }
                if ((ds.Tables["DropdownSelection"] != null)) {
                    base.Tables.Add(new DropdownSelectionDataTable(ds.Tables["DropdownSelection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBlotter = ((BlotterDataTable)(base.Tables["Blotter"]));
            if ((initTable == true)) {
                if ((this.tableBlotter != null)) {
                    this.tableBlotter.InitVars();
                }
            }
            this.tableDetailedReport = ((DetailedReportDataTable)(base.Tables["DetailedReport"]));
            if ((initTable == true)) {
                if ((this.tableDetailedReport != null)) {
                    this.tableDetailedReport.InitVars();
                }
            }
            this.tableIncidentAttachment = ((IncidentAttachmentDataTable)(base.Tables["IncidentAttachment"]));
            if ((initTable == true)) {
                if ((this.tableIncidentAttachment != null)) {
                    this.tableIncidentAttachment.InitVars();
                }
            }
            this.tableSubjectProfile = ((SubjectProfileDataTable)(base.Tables["SubjectProfile"]));
            if ((initTable == true)) {
                if ((this.tableSubjectProfile != null)) {
                    this.tableSubjectProfile.InitVars();
                }
            }
            this.table_ConversionTmp = ((_ConversionTmpDataTable)(base.Tables["_ConversionTmp"]));
            if ((initTable == true)) {
                if ((this.table_ConversionTmp != null)) {
                    this.table_ConversionTmp.InitVars();
                }
            }
            this.tableBanWatchStatus = ((BanWatchStatusDataTable)(base.Tables["BanWatchStatus"]));
            if ((initTable == true)) {
                if ((this.tableBanWatchStatus != null)) {
                    this.tableBanWatchStatus.InitVars();
                }
            }
            this.tableSubjectBan = ((SubjectBanDataTable)(base.Tables["SubjectBan"]));
            if ((initTable == true)) {
                if ((this.tableSubjectBan != null)) {
                    this.tableSubjectBan.InitVars();
                }
            }
            this.tableiXData_SubjectProfile = ((iXData_SubjectProfileDataTable)(base.Tables["iXData_SubjectProfile"]));
            if ((initTable == true)) {
                if ((this.tableiXData_SubjectProfile != null)) {
                    this.tableiXData_SubjectProfile.InitVars();
                }
            }
            this.tableParticipantAssignment = ((ParticipantAssignmentDataTable)(base.Tables["ParticipantAssignment"]));
            if ((initTable == true)) {
                if ((this.tableParticipantAssignment != null)) {
                    this.tableParticipantAssignment.InitVars();
                }
            }
            this.tableDropdownSelection = ((DropdownSelectionDataTable)(base.Tables["DropdownSelection"]));
            if ((initTable == true)) {
                if ((this.tableDropdownSelection != null)) {
                    this.tableDropdownSelection.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetIXData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetIXData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBlotter = new BlotterDataTable();
            base.Tables.Add(this.tableBlotter);
            this.tableDetailedReport = new DetailedReportDataTable();
            base.Tables.Add(this.tableDetailedReport);
            this.tableIncidentAttachment = new IncidentAttachmentDataTable();
            base.Tables.Add(this.tableIncidentAttachment);
            this.tableSubjectProfile = new SubjectProfileDataTable();
            base.Tables.Add(this.tableSubjectProfile);
            this.table_ConversionTmp = new _ConversionTmpDataTable();
            base.Tables.Add(this.table_ConversionTmp);
            this.tableBanWatchStatus = new BanWatchStatusDataTable();
            base.Tables.Add(this.tableBanWatchStatus);
            this.tableSubjectBan = new SubjectBanDataTable();
            base.Tables.Add(this.tableSubjectBan);
            this.tableiXData_SubjectProfile = new iXData_SubjectProfileDataTable();
            base.Tables.Add(this.tableiXData_SubjectProfile);
            this.tableParticipantAssignment = new ParticipantAssignmentDataTable();
            base.Tables.Add(this.tableParticipantAssignment);
            this.tableDropdownSelection = new DropdownSelectionDataTable();
            base.Tables.Add(this.tableDropdownSelection);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBlotter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetailedReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIncidentAttachment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubjectProfile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_ConversionTmp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBanWatchStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubjectBan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeiXData_SubjectProfile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParticipantAssignment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDropdownSelection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetIXData ds = new DataSetIXData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BlotterRowChangeEventHandler(object sender, BlotterRowChangeEvent e);
        
        public delegate void DetailedReportRowChangeEventHandler(object sender, DetailedReportRowChangeEvent e);
        
        public delegate void IncidentAttachmentRowChangeEventHandler(object sender, IncidentAttachmentRowChangeEvent e);
        
        public delegate void SubjectProfileRowChangeEventHandler(object sender, SubjectProfileRowChangeEvent e);
        
        public delegate void _ConversionTmpRowChangeEventHandler(object sender, _ConversionTmpRowChangeEvent e);
        
        public delegate void BanWatchStatusRowChangeEventHandler(object sender, BanWatchStatusRowChangeEvent e);
        
        public delegate void SubjectBanRowChangeEventHandler(object sender, SubjectBanRowChangeEvent e);
        
        public delegate void iXData_SubjectProfileRowChangeEventHandler(object sender, iXData_SubjectProfileRowChangeEvent e);
        
        public delegate void ParticipantAssignmentRowChangeEventHandler(object sender, ParticipantAssignmentRowChangeEvent e);
        
        public delegate void DropdownSelectionRowChangeEventHandler(object sender, DropdownSelectionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BlotterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBlotterGUID;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnOccured;
            
            private global::System.Data.DataColumn columnBlotterAction;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnProperty;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnArchive;
            
            private global::System.Data.DataColumn columnPrimaryOperator;
            
            private global::System.Data.DataColumn columnSecondaryOperator;
            
            private global::System.Data.DataColumn columnHighPriority;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnSublocation;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnExclusive;
            
            private global::System.Data.DataColumn columnSynopsis;
            
            private global::System.Data.DataColumn columnLastModifiedDate;
            
            private global::System.Data.DataColumn columnReference;
            
            private global::System.Data.DataColumn columnTimeStamp;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            private global::System.Data.DataColumn columnArchiveDate;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnClosedTime;
            
            private global::System.Data.DataColumn columnIsGlobal;
            
            private global::System.Data.DataColumn columnSourceModuleID;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnSourceGUID;
            
            private global::System.Data.DataColumn columnLockedBySource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlotterDataTable() {
                this.TableName = "Blotter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BlotterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BlotterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlotterGUIDColumn {
                get {
                    return this.columnBlotterGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccuredColumn {
                get {
                    return this.columnOccured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlotterActionColumn {
                get {
                    return this.columnBlotterAction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyColumn {
                get {
                    return this.columnProperty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchiveColumn {
                get {
                    return this.columnArchive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryOperatorColumn {
                get {
                    return this.columnPrimaryOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SecondaryOperatorColumn {
                get {
                    return this.columnSecondaryOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HighPriorityColumn {
                get {
                    return this.columnHighPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SublocationColumn {
                get {
                    return this.columnSublocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExclusiveColumn {
                get {
                    return this.columnExclusive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SynopsisColumn {
                get {
                    return this.columnSynopsis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastModifiedDateColumn {
                get {
                    return this.columnLastModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceColumn {
                get {
                    return this.columnReference;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchiveDateColumn {
                get {
                    return this.columnArchiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClosedTimeColumn {
                get {
                    return this.columnClosedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGlobalColumn {
                get {
                    return this.columnIsGlobal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceModuleIDColumn {
                get {
                    return this.columnSourceModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceGUIDColumn {
                get {
                    return this.columnSourceGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockedBySourceColumn {
                get {
                    return this.columnLockedBySource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlotterRow this[int index] {
                get {
                    return ((BlotterRow)(this.Rows[index]));
                }
            }
            
            public event BlotterRowChangeEventHandler BlotterRowChanging;
            
            public event BlotterRowChangeEventHandler BlotterRowChanged;
            
            public event BlotterRowChangeEventHandler BlotterRowDeleting;
            
            public event BlotterRowChangeEventHandler BlotterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBlotterRow(BlotterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlotterRow AddBlotterRow(
                        System.Guid BlotterGUID, 
                        string Number, 
                        System.DateTime Occured, 
                        string BlotterAction, 
                        string Subject, 
                        System.Guid Property, 
                        System.DateTime Created, 
                        string Password, 
                        bool Archive, 
                        string PrimaryOperator, 
                        string SecondaryOperator, 
                        bool HighPriority, 
                        string Status, 
                        string Sublocation, 
                        string Location, 
                        string Exclusive, 
                        string Synopsis, 
                        System.DateTime LastModifiedDate, 
                        string Reference, 
                        byte[] TimeStamp, 
                        string ModifiedBy, 
                        System.DateTime ArchiveDate, 
                        System.DateTime EndTime, 
                        System.DateTime ClosedTime, 
                        bool IsGlobal, 
                        int SourceModuleID, 
                        string SourceID, 
                        System.Guid SourceGUID, 
                        bool LockedBySource) {
                BlotterRow rowBlotterRow = ((BlotterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BlotterGUID,
                        Number,
                        Occured,
                        BlotterAction,
                        Subject,
                        Property,
                        Created,
                        Password,
                        Archive,
                        PrimaryOperator,
                        SecondaryOperator,
                        HighPriority,
                        Status,
                        Sublocation,
                        Location,
                        Exclusive,
                        Synopsis,
                        LastModifiedDate,
                        Reference,
                        TimeStamp,
                        ModifiedBy,
                        ArchiveDate,
                        EndTime,
                        ClosedTime,
                        IsGlobal,
                        SourceModuleID,
                        SourceID,
                        SourceGUID,
                        LockedBySource};
                rowBlotterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBlotterRow);
                return rowBlotterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlotterRow FindByBlotterGUID(System.Guid BlotterGUID) {
                return ((BlotterRow)(this.Rows.Find(new object[] {
                            BlotterGUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BlotterDataTable cln = ((BlotterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BlotterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBlotterGUID = base.Columns["BlotterGUID"];
                this.columnNumber = base.Columns["Number"];
                this.columnOccured = base.Columns["Occured"];
                this.columnBlotterAction = base.Columns["BlotterAction"];
                this.columnSubject = base.Columns["Subject"];
                this.columnProperty = base.Columns["Property"];
                this.columnCreated = base.Columns["Created"];
                this.columnPassword = base.Columns["Password"];
                this.columnArchive = base.Columns["Archive"];
                this.columnPrimaryOperator = base.Columns["PrimaryOperator"];
                this.columnSecondaryOperator = base.Columns["SecondaryOperator"];
                this.columnHighPriority = base.Columns["HighPriority"];
                this.columnStatus = base.Columns["Status"];
                this.columnSublocation = base.Columns["Sublocation"];
                this.columnLocation = base.Columns["Location"];
                this.columnExclusive = base.Columns["Exclusive"];
                this.columnSynopsis = base.Columns["Synopsis"];
                this.columnLastModifiedDate = base.Columns["LastModifiedDate"];
                this.columnReference = base.Columns["Reference"];
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
                this.columnArchiveDate = base.Columns["ArchiveDate"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnClosedTime = base.Columns["ClosedTime"];
                this.columnIsGlobal = base.Columns["IsGlobal"];
                this.columnSourceModuleID = base.Columns["SourceModuleID"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnSourceGUID = base.Columns["SourceGUID"];
                this.columnLockedBySource = base.Columns["LockedBySource"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBlotterGUID = new global::System.Data.DataColumn("BlotterGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlotterGUID);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnOccured = new global::System.Data.DataColumn("Occured", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccured);
                this.columnBlotterAction = new global::System.Data.DataColumn("BlotterAction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlotterAction);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnProperty = new global::System.Data.DataColumn("Property", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProperty);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnArchive = new global::System.Data.DataColumn("Archive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchive);
                this.columnPrimaryOperator = new global::System.Data.DataColumn("PrimaryOperator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryOperator);
                this.columnSecondaryOperator = new global::System.Data.DataColumn("SecondaryOperator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecondaryOperator);
                this.columnHighPriority = new global::System.Data.DataColumn("HighPriority", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighPriority);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnSublocation = new global::System.Data.DataColumn("Sublocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSublocation);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnExclusive = new global::System.Data.DataColumn("Exclusive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExclusive);
                this.columnSynopsis = new global::System.Data.DataColumn("Synopsis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSynopsis);
                this.columnLastModifiedDate = new global::System.Data.DataColumn("LastModifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModifiedDate);
                this.columnReference = new global::System.Data.DataColumn("Reference", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReference);
                this.columnTimeStamp = new global::System.Data.DataColumn("TimeStamp", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.columnArchiveDate = new global::System.Data.DataColumn("ArchiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveDate);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnClosedTime = new global::System.Data.DataColumn("ClosedTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClosedTime);
                this.columnIsGlobal = new global::System.Data.DataColumn("IsGlobal", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGlobal);
                this.columnSourceModuleID = new global::System.Data.DataColumn("SourceModuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceModuleID);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnSourceGUID = new global::System.Data.DataColumn("SourceGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceGUID);
                this.columnLockedBySource = new global::System.Data.DataColumn("LockedBySource", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockedBySource);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBlotterGUID}, true));
                this.columnBlotterGUID.AllowDBNull = false;
                this.columnBlotterGUID.Unique = true;
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.MaxLength = 50;
                this.columnOccured.AllowDBNull = false;
                this.columnBlotterAction.MaxLength = 50;
                this.columnSubject.MaxLength = 50;
                this.columnCreated.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnPrimaryOperator.MaxLength = 16;
                this.columnSecondaryOperator.MaxLength = 16;
                this.columnHighPriority.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnSublocation.MaxLength = 50;
                this.columnLocation.MaxLength = 100;
                this.columnExclusive.MaxLength = 1073741823;
                this.columnSynopsis.MaxLength = 1073741823;
                this.columnReference.MaxLength = 50;
                this.columnTimeStamp.ReadOnly = true;
                this.columnModifiedBy.MaxLength = 16;
                this.columnIsGlobal.AllowDBNull = false;
                this.columnSourceID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlotterRow NewBlotterRow() {
                return ((BlotterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BlotterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BlotterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BlotterRowChanged != null)) {
                    this.BlotterRowChanged(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BlotterRowChanging != null)) {
                    this.BlotterRowChanging(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BlotterRowDeleted != null)) {
                    this.BlotterRowDeleted(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BlotterRowDeleting != null)) {
                    this.BlotterRowDeleting(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBlotterRow(BlotterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BlotterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetailedReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDetailedReportGUID;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnBlotterGUID;
            
            private global::System.Data.DataColumn columnOccured;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnAmbulanceOffered;
            
            private global::System.Data.DataColumn columnAmbulanceDeclined;
            
            private global::System.Data.DataColumn columnFirstAidOffered;
            
            private global::System.Data.DataColumn columnFirstAidDeclined;
            
            private global::System.Data.DataColumn columnTaxiFareOffered;
            
            private global::System.Data.DataColumn columnTaxiFareDeclined;
            
            private global::System.Data.DataColumn columnClosedBy;
            
            private global::System.Data.DataColumn columnClosed;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnArchive;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSpecific;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnExclusive;
            
            private global::System.Data.DataColumn columnSecondaryOperator;
            
            private global::System.Data.DataColumn columnDetails;
            
            private global::System.Data.DataColumn columnClosingRemarks;
            
            private global::System.Data.DataColumn columnLastModifiedDate;
            
            private global::System.Data.DataColumn columnTimeStamp;
            
            private global::System.Data.DataColumn columnExecutiveBrief;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            private global::System.Data.DataColumn columnArchiveDate;
            
            private global::System.Data.DataColumn columnIsGlobal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailedReportDataTable() {
                this.TableName = "DetailedReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailedReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetailedReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailedReportGUIDColumn {
                get {
                    return this.columnDetailedReportGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlotterGUIDColumn {
                get {
                    return this.columnBlotterGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccuredColumn {
                get {
                    return this.columnOccured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmbulanceOfferedColumn {
                get {
                    return this.columnAmbulanceOffered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmbulanceDeclinedColumn {
                get {
                    return this.columnAmbulanceDeclined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstAidOfferedColumn {
                get {
                    return this.columnFirstAidOffered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstAidDeclinedColumn {
                get {
                    return this.columnFirstAidDeclined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxiFareOfferedColumn {
                get {
                    return this.columnTaxiFareOffered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxiFareDeclinedColumn {
                get {
                    return this.columnTaxiFareDeclined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClosedByColumn {
                get {
                    return this.columnClosedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClosedColumn {
                get {
                    return this.columnClosed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchiveColumn {
                get {
                    return this.columnArchive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecificColumn {
                get {
                    return this.columnSpecific;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExclusiveColumn {
                get {
                    return this.columnExclusive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SecondaryOperatorColumn {
                get {
                    return this.columnSecondaryOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailsColumn {
                get {
                    return this.columnDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClosingRemarksColumn {
                get {
                    return this.columnClosingRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastModifiedDateColumn {
                get {
                    return this.columnLastModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutiveBriefColumn {
                get {
                    return this.columnExecutiveBrief;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchiveDateColumn {
                get {
                    return this.columnArchiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGlobalColumn {
                get {
                    return this.columnIsGlobal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailedReportRow this[int index] {
                get {
                    return ((DetailedReportRow)(this.Rows[index]));
                }
            }
            
            public event DetailedReportRowChangeEventHandler DetailedReportRowChanging;
            
            public event DetailedReportRowChangeEventHandler DetailedReportRowChanged;
            
            public event DetailedReportRowChangeEventHandler DetailedReportRowDeleting;
            
            public event DetailedReportRowChangeEventHandler DetailedReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetailedReportRow(DetailedReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailedReportRow AddDetailedReportRow(
                        System.Guid DetailedReportGUID, 
                        string Number, 
                        System.Guid BlotterGUID, 
                        System.DateTime Occured, 
                        string Status, 
                        bool AmbulanceOffered, 
                        bool AmbulanceDeclined, 
                        bool FirstAidOffered, 
                        bool FirstAidDeclined, 
                        bool TaxiFareOffered, 
                        bool TaxiFareDeclined, 
                        string ClosedBy, 
                        System.DateTime Closed, 
                        string Password, 
                        bool Archive, 
                        System.DateTime Created, 
                        string CreatedBy, 
                        string Type, 
                        string Specific, 
                        string Category, 
                        string Exclusive, 
                        string SecondaryOperator, 
                        string Details, 
                        string ClosingRemarks, 
                        System.DateTime LastModifiedDate, 
                        byte[] TimeStamp, 
                        string ExecutiveBrief, 
                        string ModifiedBy, 
                        System.DateTime ArchiveDate, 
                        bool IsGlobal) {
                DetailedReportRow rowDetailedReportRow = ((DetailedReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DetailedReportGUID,
                        Number,
                        BlotterGUID,
                        Occured,
                        Status,
                        AmbulanceOffered,
                        AmbulanceDeclined,
                        FirstAidOffered,
                        FirstAidDeclined,
                        TaxiFareOffered,
                        TaxiFareDeclined,
                        ClosedBy,
                        Closed,
                        Password,
                        Archive,
                        Created,
                        CreatedBy,
                        Type,
                        Specific,
                        Category,
                        Exclusive,
                        SecondaryOperator,
                        Details,
                        ClosingRemarks,
                        LastModifiedDate,
                        TimeStamp,
                        ExecutiveBrief,
                        ModifiedBy,
                        ArchiveDate,
                        IsGlobal};
                rowDetailedReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDetailedReportRow);
                return rowDetailedReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailedReportRow FindByDetailedReportGUID(System.Guid DetailedReportGUID) {
                return ((DetailedReportRow)(this.Rows.Find(new object[] {
                            DetailedReportGUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DetailedReportDataTable cln = ((DetailedReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DetailedReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDetailedReportGUID = base.Columns["DetailedReportGUID"];
                this.columnNumber = base.Columns["Number"];
                this.columnBlotterGUID = base.Columns["BlotterGUID"];
                this.columnOccured = base.Columns["Occured"];
                this.columnStatus = base.Columns["Status"];
                this.columnAmbulanceOffered = base.Columns["AmbulanceOffered"];
                this.columnAmbulanceDeclined = base.Columns["AmbulanceDeclined"];
                this.columnFirstAidOffered = base.Columns["FirstAidOffered"];
                this.columnFirstAidDeclined = base.Columns["FirstAidDeclined"];
                this.columnTaxiFareOffered = base.Columns["TaxiFareOffered"];
                this.columnTaxiFareDeclined = base.Columns["TaxiFareDeclined"];
                this.columnClosedBy = base.Columns["ClosedBy"];
                this.columnClosed = base.Columns["Closed"];
                this.columnPassword = base.Columns["Password"];
                this.columnArchive = base.Columns["Archive"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnType = base.Columns["Type"];
                this.columnSpecific = base.Columns["Specific"];
                this.columnCategory = base.Columns["Category"];
                this.columnExclusive = base.Columns["Exclusive"];
                this.columnSecondaryOperator = base.Columns["SecondaryOperator"];
                this.columnDetails = base.Columns["Details"];
                this.columnClosingRemarks = base.Columns["ClosingRemarks"];
                this.columnLastModifiedDate = base.Columns["LastModifiedDate"];
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnExecutiveBrief = base.Columns["ExecutiveBrief"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
                this.columnArchiveDate = base.Columns["ArchiveDate"];
                this.columnIsGlobal = base.Columns["IsGlobal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDetailedReportGUID = new global::System.Data.DataColumn("DetailedReportGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailedReportGUID);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnBlotterGUID = new global::System.Data.DataColumn("BlotterGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlotterGUID);
                this.columnOccured = new global::System.Data.DataColumn("Occured", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccured);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnAmbulanceOffered = new global::System.Data.DataColumn("AmbulanceOffered", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmbulanceOffered);
                this.columnAmbulanceDeclined = new global::System.Data.DataColumn("AmbulanceDeclined", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmbulanceDeclined);
                this.columnFirstAidOffered = new global::System.Data.DataColumn("FirstAidOffered", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstAidOffered);
                this.columnFirstAidDeclined = new global::System.Data.DataColumn("FirstAidDeclined", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstAidDeclined);
                this.columnTaxiFareOffered = new global::System.Data.DataColumn("TaxiFareOffered", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxiFareOffered);
                this.columnTaxiFareDeclined = new global::System.Data.DataColumn("TaxiFareDeclined", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxiFareDeclined);
                this.columnClosedBy = new global::System.Data.DataColumn("ClosedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClosedBy);
                this.columnClosed = new global::System.Data.DataColumn("Closed", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClosed);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnArchive = new global::System.Data.DataColumn("Archive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchive);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSpecific = new global::System.Data.DataColumn("Specific", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecific);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnExclusive = new global::System.Data.DataColumn("Exclusive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExclusive);
                this.columnSecondaryOperator = new global::System.Data.DataColumn("SecondaryOperator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecondaryOperator);
                this.columnDetails = new global::System.Data.DataColumn("Details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetails);
                this.columnClosingRemarks = new global::System.Data.DataColumn("ClosingRemarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClosingRemarks);
                this.columnLastModifiedDate = new global::System.Data.DataColumn("LastModifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModifiedDate);
                this.columnTimeStamp = new global::System.Data.DataColumn("TimeStamp", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnExecutiveBrief = new global::System.Data.DataColumn("ExecutiveBrief", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutiveBrief);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.columnArchiveDate = new global::System.Data.DataColumn("ArchiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveDate);
                this.columnIsGlobal = new global::System.Data.DataColumn("IsGlobal", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGlobal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDetailedReportGUID}, true));
                this.columnDetailedReportGUID.AllowDBNull = false;
                this.columnDetailedReportGUID.Unique = true;
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.MaxLength = 50;
                this.columnBlotterGUID.AllowDBNull = false;
                this.columnOccured.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnAmbulanceOffered.AllowDBNull = false;
                this.columnAmbulanceDeclined.AllowDBNull = false;
                this.columnFirstAidOffered.AllowDBNull = false;
                this.columnFirstAidDeclined.AllowDBNull = false;
                this.columnTaxiFareOffered.AllowDBNull = false;
                this.columnTaxiFareDeclined.AllowDBNull = false;
                this.columnClosedBy.MaxLength = 16;
                this.columnPassword.MaxLength = 50;
                this.columnCreated.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
                this.columnCreatedBy.MaxLength = 16;
                this.columnType.MaxLength = 100;
                this.columnSpecific.MaxLength = 100;
                this.columnCategory.MaxLength = 100;
                this.columnExclusive.MaxLength = 1073741823;
                this.columnSecondaryOperator.MaxLength = 50;
                this.columnDetails.MaxLength = 1073741823;
                this.columnClosingRemarks.MaxLength = 1073741823;
                this.columnTimeStamp.ReadOnly = true;
                this.columnExecutiveBrief.MaxLength = 1073741823;
                this.columnModifiedBy.MaxLength = 16;
                this.columnIsGlobal.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailedReportRow NewDetailedReportRow() {
                return ((DetailedReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DetailedReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DetailedReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailedReportRowChanged != null)) {
                    this.DetailedReportRowChanged(this, new DetailedReportRowChangeEvent(((DetailedReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailedReportRowChanging != null)) {
                    this.DetailedReportRowChanging(this, new DetailedReportRowChangeEvent(((DetailedReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailedReportRowDeleted != null)) {
                    this.DetailedReportRowDeleted(this, new DetailedReportRowChangeEvent(((DetailedReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailedReportRowDeleting != null)) {
                    this.DetailedReportRowDeleting(this, new DetailedReportRowChangeEvent(((DetailedReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetailedReportRow(DetailedReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetailedReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IncidentAttachmentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIncidentAttachment;
            
            private global::System.Data.DataColumn columnDetailedReportGUID;
            
            private global::System.Data.DataColumn columnAttached;
            
            private global::System.Data.DataColumn columnAttachedmentData;
            
            private global::System.Data.DataColumn columnOriginalFilename;
            
            private global::System.Data.DataColumn columnAttachedBy;
            
            private global::System.Data.DataColumn columnThumbnail;
            
            private global::System.Data.DataColumn columnAttachedType;
            
            private global::System.Data.DataColumn columnAttachmentSize;
            
            private global::System.Data.DataColumn columnLinked;
            
            private global::System.Data.DataColumn columnDigitalSignature;
            
            private global::System.Data.DataColumn columnDataProviderType;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnLastModifiedDate;
            
            private global::System.Data.DataColumn columnServerCreateDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncidentAttachmentDataTable() {
                this.TableName = "IncidentAttachment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncidentAttachmentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IncidentAttachmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncidentAttachmentColumn {
                get {
                    return this.columnIncidentAttachment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailedReportGUIDColumn {
                get {
                    return this.columnDetailedReportGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachedColumn {
                get {
                    return this.columnAttached;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachedmentDataColumn {
                get {
                    return this.columnAttachedmentData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalFilenameColumn {
                get {
                    return this.columnOriginalFilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachedByColumn {
                get {
                    return this.columnAttachedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThumbnailColumn {
                get {
                    return this.columnThumbnail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachedTypeColumn {
                get {
                    return this.columnAttachedType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachmentSizeColumn {
                get {
                    return this.columnAttachmentSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkedColumn {
                get {
                    return this.columnLinked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigitalSignatureColumn {
                get {
                    return this.columnDigitalSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataProviderTypeColumn {
                get {
                    return this.columnDataProviderType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastModifiedDateColumn {
                get {
                    return this.columnLastModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServerCreateDateColumn {
                get {
                    return this.columnServerCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncidentAttachmentRow this[int index] {
                get {
                    return ((IncidentAttachmentRow)(this.Rows[index]));
                }
            }
            
            public event IncidentAttachmentRowChangeEventHandler IncidentAttachmentRowChanging;
            
            public event IncidentAttachmentRowChangeEventHandler IncidentAttachmentRowChanged;
            
            public event IncidentAttachmentRowChangeEventHandler IncidentAttachmentRowDeleting;
            
            public event IncidentAttachmentRowChangeEventHandler IncidentAttachmentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIncidentAttachmentRow(IncidentAttachmentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncidentAttachmentRow AddIncidentAttachmentRow(System.Guid IncidentAttachment, System.Guid DetailedReportGUID, System.DateTime Attached, byte[] AttachedmentData, string OriginalFilename, string AttachedBy, byte[] Thumbnail, string AttachedType, long AttachmentSize, bool Linked, byte[] DigitalSignature, int DataProviderType, bool Deleted, System.DateTime LastModifiedDate, System.DateTime ServerCreateDate) {
                IncidentAttachmentRow rowIncidentAttachmentRow = ((IncidentAttachmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IncidentAttachment,
                        DetailedReportGUID,
                        Attached,
                        AttachedmentData,
                        OriginalFilename,
                        AttachedBy,
                        Thumbnail,
                        AttachedType,
                        AttachmentSize,
                        Linked,
                        DigitalSignature,
                        DataProviderType,
                        Deleted,
                        LastModifiedDate,
                        ServerCreateDate};
                rowIncidentAttachmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIncidentAttachmentRow);
                return rowIncidentAttachmentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncidentAttachmentRow FindByIncidentAttachment(System.Guid IncidentAttachment) {
                return ((IncidentAttachmentRow)(this.Rows.Find(new object[] {
                            IncidentAttachment})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IncidentAttachmentDataTable cln = ((IncidentAttachmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IncidentAttachmentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIncidentAttachment = base.Columns["IncidentAttachment"];
                this.columnDetailedReportGUID = base.Columns["DetailedReportGUID"];
                this.columnAttached = base.Columns["Attached"];
                this.columnAttachedmentData = base.Columns["AttachedmentData"];
                this.columnOriginalFilename = base.Columns["OriginalFilename"];
                this.columnAttachedBy = base.Columns["AttachedBy"];
                this.columnThumbnail = base.Columns["Thumbnail"];
                this.columnAttachedType = base.Columns["AttachedType"];
                this.columnAttachmentSize = base.Columns["AttachmentSize"];
                this.columnLinked = base.Columns["Linked"];
                this.columnDigitalSignature = base.Columns["DigitalSignature"];
                this.columnDataProviderType = base.Columns["DataProviderType"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnLastModifiedDate = base.Columns["LastModifiedDate"];
                this.columnServerCreateDate = base.Columns["ServerCreateDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIncidentAttachment = new global::System.Data.DataColumn("IncidentAttachment", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentAttachment);
                this.columnDetailedReportGUID = new global::System.Data.DataColumn("DetailedReportGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailedReportGUID);
                this.columnAttached = new global::System.Data.DataColumn("Attached", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttached);
                this.columnAttachedmentData = new global::System.Data.DataColumn("AttachedmentData", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttachedmentData);
                this.columnOriginalFilename = new global::System.Data.DataColumn("OriginalFilename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalFilename);
                this.columnAttachedBy = new global::System.Data.DataColumn("AttachedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttachedBy);
                this.columnThumbnail = new global::System.Data.DataColumn("Thumbnail", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThumbnail);
                this.columnAttachedType = new global::System.Data.DataColumn("AttachedType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttachedType);
                this.columnAttachmentSize = new global::System.Data.DataColumn("AttachmentSize", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttachmentSize);
                this.columnLinked = new global::System.Data.DataColumn("Linked", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinked);
                this.columnDigitalSignature = new global::System.Data.DataColumn("DigitalSignature", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigitalSignature);
                this.columnDataProviderType = new global::System.Data.DataColumn("DataProviderType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataProviderType);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnLastModifiedDate = new global::System.Data.DataColumn("LastModifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModifiedDate);
                this.columnServerCreateDate = new global::System.Data.DataColumn("ServerCreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerCreateDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIncidentAttachment}, true));
                this.columnIncidentAttachment.AllowDBNull = false;
                this.columnIncidentAttachment.Unique = true;
                this.columnDetailedReportGUID.AllowDBNull = false;
                this.columnAttached.AllowDBNull = false;
                this.columnAttachedmentData.AllowDBNull = false;
                this.columnOriginalFilename.AllowDBNull = false;
                this.columnOriginalFilename.MaxLength = 256;
                this.columnAttachedBy.AllowDBNull = false;
                this.columnAttachedBy.MaxLength = 16;
                this.columnAttachedType.MaxLength = 10;
                this.columnLinked.AllowDBNull = false;
                this.columnDataProviderType.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncidentAttachmentRow NewIncidentAttachmentRow() {
                return ((IncidentAttachmentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IncidentAttachmentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IncidentAttachmentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IncidentAttachmentRowChanged != null)) {
                    this.IncidentAttachmentRowChanged(this, new IncidentAttachmentRowChangeEvent(((IncidentAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IncidentAttachmentRowChanging != null)) {
                    this.IncidentAttachmentRowChanging(this, new IncidentAttachmentRowChangeEvent(((IncidentAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IncidentAttachmentRowDeleted != null)) {
                    this.IncidentAttachmentRowDeleted(this, new IncidentAttachmentRowChangeEvent(((IncidentAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IncidentAttachmentRowDeleting != null)) {
                    this.IncidentAttachmentRowDeleting(this, new IncidentAttachmentRowChangeEvent(((IncidentAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIncidentAttachmentRow(IncidentAttachmentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IncidentAttachmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubjectProfileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubjectGUID;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnMiddleName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnDateOfBirth;
            
            private global::System.Data.DataColumn columnAgeRangeLower;
            
            private global::System.Data.DataColumn columnAgeRangeUpper;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnHairColour;
            
            private global::System.Data.DataColumn columnEyeColour;
            
            private global::System.Data.DataColumn columnRace;
            
            private global::System.Data.DataColumn columnDateCreated;
            
            private global::System.Data.DataColumn columnDateModified;
            
            private global::System.Data.DataColumn columnCreatoruserID;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnPropertyGUID;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnLastIncidentDate;
            
            private global::System.Data.DataColumn columnFRSAcSysUserID;
            
            private global::System.Data.DataColumn columnExclusive;
            
            private global::System.Data.DataColumn columnBestAssetGUID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnActivities;
            
            private global::System.Data.DataColumn columnSpecifics;
            
            private global::System.Data.DataColumn columnGroups;
            
            private global::System.Data.DataColumn columnAliases;
            
            private global::System.Data.DataColumn columnTraits;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnPostalCode;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnHomePhone;
            
            private global::System.Data.DataColumn columnWorkPhone;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnSINNumber;
            
            private global::System.Data.DataColumn columnOccupation;
            
            private global::System.Data.DataColumn columnDriversLicenseNum;
            
            private global::System.Data.DataColumn columnTimeStamp;
            
            private global::System.Data.DataColumn columnDigitalSignature;
            
            private global::System.Data.DataColumn columnDataProviderType;
            
            private global::System.Data.DataColumn columnSubjectId;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            private global::System.Data.DataColumn columnCustom1;
            
            private global::System.Data.DataColumn columnCustom2;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnPassportNumber;
            
            private global::System.Data.DataColumn columnBusinessFaxNumber;
            
            private global::System.Data.DataColumn columnWebAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectProfileDataTable() {
                this.TableName = "SubjectProfile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectProfileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubjectProfileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectGUIDColumn {
                get {
                    return this.columnSubjectGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOfBirthColumn {
                get {
                    return this.columnDateOfBirth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeRangeLowerColumn {
                get {
                    return this.columnAgeRangeLower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeRangeUpperColumn {
                get {
                    return this.columnAgeRangeUpper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HairColourColumn {
                get {
                    return this.columnHairColour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EyeColourColumn {
                get {
                    return this.columnEyeColour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RaceColumn {
                get {
                    return this.columnRace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateModifiedColumn {
                get {
                    return this.columnDateModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatoruserIDColumn {
                get {
                    return this.columnCreatoruserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyGUIDColumn {
                get {
                    return this.columnPropertyGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastIncidentDateColumn {
                get {
                    return this.columnLastIncidentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FRSAcSysUserIDColumn {
                get {
                    return this.columnFRSAcSysUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExclusiveColumn {
                get {
                    return this.columnExclusive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BestAssetGUIDColumn {
                get {
                    return this.columnBestAssetGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivitiesColumn {
                get {
                    return this.columnActivities;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecificsColumn {
                get {
                    return this.columnSpecifics;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupsColumn {
                get {
                    return this.columnGroups;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AliasesColumn {
                get {
                    return this.columnAliases;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraitsColumn {
                get {
                    return this.columnTraits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomePhoneColumn {
                get {
                    return this.columnHomePhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkPhoneColumn {
                get {
                    return this.columnWorkPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SINNumberColumn {
                get {
                    return this.columnSINNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupationColumn {
                get {
                    return this.columnOccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriversLicenseNumColumn {
                get {
                    return this.columnDriversLicenseNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigitalSignatureColumn {
                get {
                    return this.columnDigitalSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataProviderTypeColumn {
                get {
                    return this.columnDataProviderType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectIdColumn {
                get {
                    return this.columnSubjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Custom1Column {
                get {
                    return this.columnCustom1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Custom2Column {
                get {
                    return this.columnCustom2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PassportNumberColumn {
                get {
                    return this.columnPassportNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessFaxNumberColumn {
                get {
                    return this.columnBusinessFaxNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebAddressColumn {
                get {
                    return this.columnWebAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectProfileRow this[int index] {
                get {
                    return ((SubjectProfileRow)(this.Rows[index]));
                }
            }
            
            public event SubjectProfileRowChangeEventHandler SubjectProfileRowChanging;
            
            public event SubjectProfileRowChangeEventHandler SubjectProfileRowChanged;
            
            public event SubjectProfileRowChangeEventHandler SubjectProfileRowDeleting;
            
            public event SubjectProfileRowChangeEventHandler SubjectProfileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubjectProfileRow(SubjectProfileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectProfileRow AddSubjectProfileRow(
                        System.Guid SubjectGUID, 
                        string FirstName, 
                        string MiddleName, 
                        string LastName, 
                        string Gender, 
                        System.DateTime DateOfBirth, 
                        int AgeRangeLower, 
                        int AgeRangeUpper, 
                        int Height, 
                        int Weight, 
                        string HairColour, 
                        string EyeColour, 
                        string Race, 
                        System.DateTime DateCreated, 
                        System.DateTime DateModified, 
                        string CreatoruserID, 
                        string Password, 
                        System.Guid PropertyGUID, 
                        string Comment, 
                        System.DateTime LastIncidentDate, 
                        int FRSAcSysUserID, 
                        string Exclusive, 
                        System.Guid BestAssetGUID, 
                        string Category, 
                        string Activities, 
                        string Specifics, 
                        string Groups, 
                        string Aliases, 
                        string Traits, 
                        string Address, 
                        string City, 
                        string State, 
                        string PostalCode, 
                        string Country, 
                        string HomePhone, 
                        string WorkPhone, 
                        string Email, 
                        string ClientID, 
                        string SINNumber, 
                        string Occupation, 
                        string DriversLicenseNum, 
                        byte[] TimeStamp, 
                        byte[] DigitalSignature, 
                        int DataProviderType, 
                        string ModifiedBy, 
                        string Custom1, 
                        string Custom2, 
                        string CompanyName, 
                        string PassportNumber, 
                        string BusinessFaxNumber, 
                        string WebAddress) {
                SubjectProfileRow rowSubjectProfileRow = ((SubjectProfileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectGUID,
                        FirstName,
                        MiddleName,
                        LastName,
                        Gender,
                        DateOfBirth,
                        AgeRangeLower,
                        AgeRangeUpper,
                        Height,
                        Weight,
                        HairColour,
                        EyeColour,
                        Race,
                        DateCreated,
                        DateModified,
                        CreatoruserID,
                        Password,
                        PropertyGUID,
                        Comment,
                        LastIncidentDate,
                        FRSAcSysUserID,
                        Exclusive,
                        BestAssetGUID,
                        Category,
                        Activities,
                        Specifics,
                        Groups,
                        Aliases,
                        Traits,
                        Address,
                        City,
                        State,
                        PostalCode,
                        Country,
                        HomePhone,
                        WorkPhone,
                        Email,
                        ClientID,
                        SINNumber,
                        Occupation,
                        DriversLicenseNum,
                        TimeStamp,
                        DigitalSignature,
                        DataProviderType,
                        null,
                        ModifiedBy,
                        Custom1,
                        Custom2,
                        CompanyName,
                        PassportNumber,
                        BusinessFaxNumber,
                        WebAddress};
                rowSubjectProfileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubjectProfileRow);
                return rowSubjectProfileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectProfileRow FindBySubjectGUID(System.Guid SubjectGUID) {
                return ((SubjectProfileRow)(this.Rows.Find(new object[] {
                            SubjectGUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubjectProfileDataTable cln = ((SubjectProfileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubjectProfileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectGUID = base.Columns["SubjectGUID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnMiddleName = base.Columns["MiddleName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnGender = base.Columns["Gender"];
                this.columnDateOfBirth = base.Columns["DateOfBirth"];
                this.columnAgeRangeLower = base.Columns["AgeRangeLower"];
                this.columnAgeRangeUpper = base.Columns["AgeRangeUpper"];
                this.columnHeight = base.Columns["Height"];
                this.columnWeight = base.Columns["Weight"];
                this.columnHairColour = base.Columns["HairColour"];
                this.columnEyeColour = base.Columns["EyeColour"];
                this.columnRace = base.Columns["Race"];
                this.columnDateCreated = base.Columns["DateCreated"];
                this.columnDateModified = base.Columns["DateModified"];
                this.columnCreatoruserID = base.Columns["CreatoruserID"];
                this.columnPassword = base.Columns["Password"];
                this.columnPropertyGUID = base.Columns["PropertyGUID"];
                this.columnComment = base.Columns["Comment"];
                this.columnLastIncidentDate = base.Columns["LastIncidentDate"];
                this.columnFRSAcSysUserID = base.Columns["FRSAcSysUserID"];
                this.columnExclusive = base.Columns["Exclusive"];
                this.columnBestAssetGUID = base.Columns["BestAssetGUID"];
                this.columnCategory = base.Columns["Category"];
                this.columnActivities = base.Columns["Activities"];
                this.columnSpecifics = base.Columns["Specifics"];
                this.columnGroups = base.Columns["Groups"];
                this.columnAliases = base.Columns["Aliases"];
                this.columnTraits = base.Columns["Traits"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCountry = base.Columns["Country"];
                this.columnHomePhone = base.Columns["HomePhone"];
                this.columnWorkPhone = base.Columns["WorkPhone"];
                this.columnEmail = base.Columns["Email"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnSINNumber = base.Columns["SINNumber"];
                this.columnOccupation = base.Columns["Occupation"];
                this.columnDriversLicenseNum = base.Columns["DriversLicenseNum"];
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnDigitalSignature = base.Columns["DigitalSignature"];
                this.columnDataProviderType = base.Columns["DataProviderType"];
                this.columnSubjectId = base.Columns["SubjectId"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
                this.columnCustom1 = base.Columns["Custom1"];
                this.columnCustom2 = base.Columns["Custom2"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnPassportNumber = base.Columns["PassportNumber"];
                this.columnBusinessFaxNumber = base.Columns["BusinessFaxNumber"];
                this.columnWebAddress = base.Columns["WebAddress"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectGUID = new global::System.Data.DataColumn("SubjectGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectGUID);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnMiddleName = new global::System.Data.DataColumn("MiddleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiddleName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnDateOfBirth = new global::System.Data.DataColumn("DateOfBirth", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfBirth);
                this.columnAgeRangeLower = new global::System.Data.DataColumn("AgeRangeLower", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgeRangeLower);
                this.columnAgeRangeUpper = new global::System.Data.DataColumn("AgeRangeUpper", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgeRangeUpper);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnHairColour = new global::System.Data.DataColumn("HairColour", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHairColour);
                this.columnEyeColour = new global::System.Data.DataColumn("EyeColour", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEyeColour);
                this.columnRace = new global::System.Data.DataColumn("Race", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRace);
                this.columnDateCreated = new global::System.Data.DataColumn("DateCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreated);
                this.columnDateModified = new global::System.Data.DataColumn("DateModified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateModified);
                this.columnCreatoruserID = new global::System.Data.DataColumn("CreatoruserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatoruserID);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnPropertyGUID = new global::System.Data.DataColumn("PropertyGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyGUID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnLastIncidentDate = new global::System.Data.DataColumn("LastIncidentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastIncidentDate);
                this.columnFRSAcSysUserID = new global::System.Data.DataColumn("FRSAcSysUserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFRSAcSysUserID);
                this.columnExclusive = new global::System.Data.DataColumn("Exclusive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExclusive);
                this.columnBestAssetGUID = new global::System.Data.DataColumn("BestAssetGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestAssetGUID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnActivities = new global::System.Data.DataColumn("Activities", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivities);
                this.columnSpecifics = new global::System.Data.DataColumn("Specifics", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecifics);
                this.columnGroups = new global::System.Data.DataColumn("Groups", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroups);
                this.columnAliases = new global::System.Data.DataColumn("Aliases", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAliases);
                this.columnTraits = new global::System.Data.DataColumn("Traits", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraits);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnHomePhone = new global::System.Data.DataColumn("HomePhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHomePhone);
                this.columnWorkPhone = new global::System.Data.DataColumn("WorkPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkPhone);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnSINNumber = new global::System.Data.DataColumn("SINNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSINNumber);
                this.columnOccupation = new global::System.Data.DataColumn("Occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupation);
                this.columnDriversLicenseNum = new global::System.Data.DataColumn("DriversLicenseNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriversLicenseNum);
                this.columnTimeStamp = new global::System.Data.DataColumn("TimeStamp", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnDigitalSignature = new global::System.Data.DataColumn("DigitalSignature", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigitalSignature);
                this.columnDataProviderType = new global::System.Data.DataColumn("DataProviderType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataProviderType);
                this.columnSubjectId = new global::System.Data.DataColumn("SubjectId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectId);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.columnCustom1 = new global::System.Data.DataColumn("Custom1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustom1);
                this.columnCustom2 = new global::System.Data.DataColumn("Custom2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustom2);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnPassportNumber = new global::System.Data.DataColumn("PassportNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassportNumber);
                this.columnBusinessFaxNumber = new global::System.Data.DataColumn("BusinessFaxNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessFaxNumber);
                this.columnWebAddress = new global::System.Data.DataColumn("WebAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebAddress);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSubjectGUID}, true));
                this.columnSubjectGUID.AllowDBNull = false;
                this.columnSubjectGUID.Unique = true;
                this.columnFirstName.AllowDBNull = false;
                this.columnFirstName.MaxLength = 100;
                this.columnMiddleName.MaxLength = 100;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 100;
                this.columnGender.AllowDBNull = false;
                this.columnGender.MaxLength = 16;
                this.columnHairColour.MaxLength = 128;
                this.columnEyeColour.MaxLength = 128;
                this.columnRace.AllowDBNull = false;
                this.columnRace.MaxLength = 128;
                this.columnDateCreated.AllowDBNull = false;
                this.columnDateModified.AllowDBNull = false;
                this.columnCreatoruserID.AllowDBNull = false;
                this.columnCreatoruserID.MaxLength = 16;
                this.columnPassword.MaxLength = 50;
                this.columnComment.MaxLength = 1073741823;
                this.columnFRSAcSysUserID.AllowDBNull = false;
                this.columnExclusive.MaxLength = 1073741823;
                this.columnCategory.MaxLength = 50;
                this.columnActivities.MaxLength = 1073741823;
                this.columnSpecifics.MaxLength = 1073741823;
                this.columnGroups.MaxLength = 1073741823;
                this.columnAliases.MaxLength = 1073741823;
                this.columnTraits.MaxLength = 1073741823;
                this.columnAddress.MaxLength = 256;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 20;
                this.columnPostalCode.MaxLength = 20;
                this.columnCountry.MaxLength = 50;
                this.columnHomePhone.MaxLength = 30;
                this.columnWorkPhone.MaxLength = 30;
                this.columnEmail.MaxLength = 128;
                this.columnClientID.MaxLength = 50;
                this.columnSINNumber.MaxLength = 50;
                this.columnOccupation.MaxLength = 50;
                this.columnDriversLicenseNum.MaxLength = 50;
                this.columnTimeStamp.ReadOnly = true;
                this.columnDataProviderType.AllowDBNull = false;
                this.columnSubjectId.AutoIncrement = true;
                this.columnSubjectId.AllowDBNull = false;
                this.columnSubjectId.ReadOnly = true;
                this.columnModifiedBy.MaxLength = 16;
                this.columnCustom1.MaxLength = 50;
                this.columnCustom2.MaxLength = 50;
                this.columnCompanyName.MaxLength = 50;
                this.columnPassportNumber.MaxLength = 100;
                this.columnBusinessFaxNumber.MaxLength = 50;
                this.columnWebAddress.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectProfileRow NewSubjectProfileRow() {
                return ((SubjectProfileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubjectProfileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubjectProfileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubjectProfileRowChanged != null)) {
                    this.SubjectProfileRowChanged(this, new SubjectProfileRowChangeEvent(((SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubjectProfileRowChanging != null)) {
                    this.SubjectProfileRowChanging(this, new SubjectProfileRowChangeEvent(((SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubjectProfileRowDeleted != null)) {
                    this.SubjectProfileRowDeleted(this, new SubjectProfileRowChangeEvent(((SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubjectProfileRowDeleting != null)) {
                    this.SubjectProfileRowDeleting(this, new SubjectProfileRowChangeEvent(((SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubjectProfileRow(SubjectProfileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubjectProfileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _ConversionTmpDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConvertGuid;
            
            private global::System.Data.DataColumn columnTableName;
            
            private global::System.Data.DataColumn columnConvertId1;
            
            private global::System.Data.DataColumn columnConvertId2;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnAUTOID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _ConversionTmpDataTable() {
                this.TableName = "_ConversionTmp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _ConversionTmpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _ConversionTmpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConvertGuidColumn {
                get {
                    return this.columnConvertGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConvertId1Column {
                get {
                    return this.columnConvertId1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConvertId2Column {
                get {
                    return this.columnConvertId2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AUTOIDColumn {
                get {
                    return this.columnAUTOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _ConversionTmpRow this[int index] {
                get {
                    return ((_ConversionTmpRow)(this.Rows[index]));
                }
            }
            
            public event _ConversionTmpRowChangeEventHandler _ConversionTmpRowChanging;
            
            public event _ConversionTmpRowChangeEventHandler _ConversionTmpRowChanged;
            
            public event _ConversionTmpRowChangeEventHandler _ConversionTmpRowDeleting;
            
            public event _ConversionTmpRowChangeEventHandler _ConversionTmpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_ConversionTmpRow(_ConversionTmpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _ConversionTmpRow Add_ConversionTmpRow(System.Guid ConvertGuid, string TableName, string ConvertId1, string ConvertId2, System.DateTime CreateDate) {
                _ConversionTmpRow row_ConversionTmpRow = ((_ConversionTmpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConvertGuid,
                        TableName,
                        ConvertId1,
                        ConvertId2,
                        CreateDate,
                        null};
                row_ConversionTmpRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_ConversionTmpRow);
                return row_ConversionTmpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _ConversionTmpRow FindByAUTOID(int AUTOID) {
                return ((_ConversionTmpRow)(this.Rows.Find(new object[] {
                            AUTOID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _ConversionTmpDataTable cln = ((_ConversionTmpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _ConversionTmpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConvertGuid = base.Columns["ConvertGuid"];
                this.columnTableName = base.Columns["TableName"];
                this.columnConvertId1 = base.Columns["ConvertId1"];
                this.columnConvertId2 = base.Columns["ConvertId2"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnAUTOID = base.Columns["AUTOID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConvertGuid = new global::System.Data.DataColumn("ConvertGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConvertGuid);
                this.columnTableName = new global::System.Data.DataColumn("TableName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnConvertId1 = new global::System.Data.DataColumn("ConvertId1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConvertId1);
                this.columnConvertId2 = new global::System.Data.DataColumn("ConvertId2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConvertId2);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnAUTOID = new global::System.Data.DataColumn("AUTOID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTOID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAUTOID}, true));
                this.columnConvertGuid.AllowDBNull = false;
                this.columnTableName.MaxLength = 50;
                this.columnConvertId1.MaxLength = 50;
                this.columnConvertId2.MaxLength = 50;
                this.columnAUTOID.AutoIncrement = true;
                this.columnAUTOID.AllowDBNull = false;
                this.columnAUTOID.ReadOnly = true;
                this.columnAUTOID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _ConversionTmpRow New_ConversionTmpRow() {
                return ((_ConversionTmpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _ConversionTmpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_ConversionTmpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._ConversionTmpRowChanged != null)) {
                    this._ConversionTmpRowChanged(this, new _ConversionTmpRowChangeEvent(((_ConversionTmpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._ConversionTmpRowChanging != null)) {
                    this._ConversionTmpRowChanging(this, new _ConversionTmpRowChangeEvent(((_ConversionTmpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._ConversionTmpRowDeleted != null)) {
                    this._ConversionTmpRowDeleted(this, new _ConversionTmpRowChangeEvent(((_ConversionTmpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._ConversionTmpRowDeleting != null)) {
                    this._ConversionTmpRowDeleting(this, new _ConversionTmpRowChangeEvent(((_ConversionTmpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_ConversionTmpRow(_ConversionTmpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_ConversionTmpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BanWatchStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubjectGUID;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnCommencement;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnIsPermanent;
            
            private global::System.Data.DataColumn columnTypeOfBan;
            
            private global::System.Data.DataColumn columnReasonForBan;
            
            private global::System.Data.DataColumn columnDetailedReportGUID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanWatchStatusDataTable() {
                this.TableName = "BanWatchStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BanWatchStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BanWatchStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectGUIDColumn {
                get {
                    return this.columnSubjectGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommencementColumn {
                get {
                    return this.columnCommencement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermanentColumn {
                get {
                    return this.columnIsPermanent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfBanColumn {
                get {
                    return this.columnTypeOfBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonForBanColumn {
                get {
                    return this.columnReasonForBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailedReportGUIDColumn {
                get {
                    return this.columnDetailedReportGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanWatchStatusRow this[int index] {
                get {
                    return ((BanWatchStatusRow)(this.Rows[index]));
                }
            }
            
            public event BanWatchStatusRowChangeEventHandler BanWatchStatusRowChanging;
            
            public event BanWatchStatusRowChangeEventHandler BanWatchStatusRowChanged;
            
            public event BanWatchStatusRowChangeEventHandler BanWatchStatusRowDeleting;
            
            public event BanWatchStatusRowChangeEventHandler BanWatchStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBanWatchStatusRow(BanWatchStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanWatchStatusRow AddBanWatchStatusRow(System.Guid SubjectGUID, int Status, System.DateTime Commencement, System.DateTime EndDate, bool IsPermanent, string TypeOfBan, string ReasonForBan, System.Guid DetailedReportGUID) {
                BanWatchStatusRow rowBanWatchStatusRow = ((BanWatchStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectGUID,
                        Status,
                        Commencement,
                        EndDate,
                        IsPermanent,
                        TypeOfBan,
                        ReasonForBan,
                        DetailedReportGUID};
                rowBanWatchStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBanWatchStatusRow);
                return rowBanWatchStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanWatchStatusRow FindBySubjectGUID(System.Guid SubjectGUID) {
                return ((BanWatchStatusRow)(this.Rows.Find(new object[] {
                            SubjectGUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BanWatchStatusDataTable cln = ((BanWatchStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BanWatchStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectGUID = base.Columns["SubjectGUID"];
                this.columnStatus = base.Columns["Status"];
                this.columnCommencement = base.Columns["Commencement"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnIsPermanent = base.Columns["IsPermanent"];
                this.columnTypeOfBan = base.Columns["TypeOfBan"];
                this.columnReasonForBan = base.Columns["ReasonForBan"];
                this.columnDetailedReportGUID = base.Columns["DetailedReportGUID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectGUID = new global::System.Data.DataColumn("SubjectGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectGUID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnCommencement = new global::System.Data.DataColumn("Commencement", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommencement);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnIsPermanent = new global::System.Data.DataColumn("IsPermanent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermanent);
                this.columnTypeOfBan = new global::System.Data.DataColumn("TypeOfBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfBan);
                this.columnReasonForBan = new global::System.Data.DataColumn("ReasonForBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonForBan);
                this.columnDetailedReportGUID = new global::System.Data.DataColumn("DetailedReportGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailedReportGUID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSubjectGUID}, true));
                this.columnSubjectGUID.AllowDBNull = false;
                this.columnSubjectGUID.Unique = true;
                this.columnStatus.AllowDBNull = false;
                this.columnIsPermanent.AllowDBNull = false;
                this.columnTypeOfBan.MaxLength = 100;
                this.columnReasonForBan.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanWatchStatusRow NewBanWatchStatusRow() {
                return ((BanWatchStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BanWatchStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BanWatchStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BanWatchStatusRowChanged != null)) {
                    this.BanWatchStatusRowChanged(this, new BanWatchStatusRowChangeEvent(((BanWatchStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BanWatchStatusRowChanging != null)) {
                    this.BanWatchStatusRowChanging(this, new BanWatchStatusRowChangeEvent(((BanWatchStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BanWatchStatusRowDeleted != null)) {
                    this.BanWatchStatusRowDeleted(this, new BanWatchStatusRowChangeEvent(((BanWatchStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BanWatchStatusRowDeleting != null)) {
                    this.BanWatchStatusRowDeleting(this, new BanWatchStatusRowChangeEvent(((BanWatchStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBanWatchStatusRow(BanWatchStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BanWatchStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubjectBanDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubjectGUID;
            
            private global::System.Data.DataColumn columnDetailedReportGUID;
            
            private global::System.Data.DataColumn columnSequenceNumber;
            
            private global::System.Data.DataColumn columnCommencement;
            
            private global::System.Data.DataColumn columnIsPermanent;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnSubjectCharged;
            
            private global::System.Data.DataColumn columnLetterSent;
            
            private global::System.Data.DataColumn columnCompulsiveGambler;
            
            private global::System.Data.DataColumn columnRecordType;
            
            private global::System.Data.DataColumn columnTypeOfBan;
            
            private global::System.Data.DataColumn columnIdentificationUsed;
            
            private global::System.Data.DataColumn columnReasonForBan;
            
            private global::System.Data.DataColumn columnSelfExclusiveReport;
            
            private global::System.Data.DataColumn columnRemovedBanIncidentGuid;
            
            private global::System.Data.DataColumn columnOriginalBanIncidentGuid;
            
            private global::System.Data.DataColumn columnRemoved;
            
            private global::System.Data.DataColumn columnRemovalDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectBanDataTable() {
                this.TableName = "SubjectBan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectBanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubjectBanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectGUIDColumn {
                get {
                    return this.columnSubjectGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailedReportGUIDColumn {
                get {
                    return this.columnDetailedReportGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceNumberColumn {
                get {
                    return this.columnSequenceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommencementColumn {
                get {
                    return this.columnCommencement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermanentColumn {
                get {
                    return this.columnIsPermanent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectChargedColumn {
                get {
                    return this.columnSubjectCharged;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LetterSentColumn {
                get {
                    return this.columnLetterSent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompulsiveGamblerColumn {
                get {
                    return this.columnCompulsiveGambler;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordTypeColumn {
                get {
                    return this.columnRecordType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfBanColumn {
                get {
                    return this.columnTypeOfBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdentificationUsedColumn {
                get {
                    return this.columnIdentificationUsed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonForBanColumn {
                get {
                    return this.columnReasonForBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelfExclusiveReportColumn {
                get {
                    return this.columnSelfExclusiveReport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemovedBanIncidentGuidColumn {
                get {
                    return this.columnRemovedBanIncidentGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalBanIncidentGuidColumn {
                get {
                    return this.columnOriginalBanIncidentGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemovedColumn {
                get {
                    return this.columnRemoved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemovalDateColumn {
                get {
                    return this.columnRemovalDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectBanRow this[int index] {
                get {
                    return ((SubjectBanRow)(this.Rows[index]));
                }
            }
            
            public event SubjectBanRowChangeEventHandler SubjectBanRowChanging;
            
            public event SubjectBanRowChangeEventHandler SubjectBanRowChanged;
            
            public event SubjectBanRowChangeEventHandler SubjectBanRowDeleting;
            
            public event SubjectBanRowChangeEventHandler SubjectBanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubjectBanRow(SubjectBanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectBanRow AddSubjectBanRow(
                        System.Guid SubjectGUID, 
                        System.Guid DetailedReportGUID, 
                        System.DateTime Commencement, 
                        bool IsPermanent, 
                        System.DateTime EndDate, 
                        bool SubjectCharged, 
                        bool LetterSent, 
                        bool CompulsiveGambler, 
                        int RecordType, 
                        string TypeOfBan, 
                        string IdentificationUsed, 
                        string ReasonForBan, 
                        byte[] SelfExclusiveReport, 
                        System.Guid RemovedBanIncidentGuid, 
                        System.Guid OriginalBanIncidentGuid, 
                        bool Removed, 
                        System.DateTime RemovalDate) {
                SubjectBanRow rowSubjectBanRow = ((SubjectBanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectGUID,
                        DetailedReportGUID,
                        null,
                        Commencement,
                        IsPermanent,
                        EndDate,
                        SubjectCharged,
                        LetterSent,
                        CompulsiveGambler,
                        RecordType,
                        TypeOfBan,
                        IdentificationUsed,
                        ReasonForBan,
                        SelfExclusiveReport,
                        RemovedBanIncidentGuid,
                        OriginalBanIncidentGuid,
                        Removed,
                        RemovalDate};
                rowSubjectBanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubjectBanRow);
                return rowSubjectBanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectBanRow FindBySubjectGUIDDetailedReportGUID(System.Guid SubjectGUID, System.Guid DetailedReportGUID) {
                return ((SubjectBanRow)(this.Rows.Find(new object[] {
                            SubjectGUID,
                            DetailedReportGUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubjectBanDataTable cln = ((SubjectBanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubjectBanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectGUID = base.Columns["SubjectGUID"];
                this.columnDetailedReportGUID = base.Columns["DetailedReportGUID"];
                this.columnSequenceNumber = base.Columns["SequenceNumber"];
                this.columnCommencement = base.Columns["Commencement"];
                this.columnIsPermanent = base.Columns["IsPermanent"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnSubjectCharged = base.Columns["SubjectCharged"];
                this.columnLetterSent = base.Columns["LetterSent"];
                this.columnCompulsiveGambler = base.Columns["CompulsiveGambler"];
                this.columnRecordType = base.Columns["RecordType"];
                this.columnTypeOfBan = base.Columns["TypeOfBan"];
                this.columnIdentificationUsed = base.Columns["IdentificationUsed"];
                this.columnReasonForBan = base.Columns["ReasonForBan"];
                this.columnSelfExclusiveReport = base.Columns["SelfExclusiveReport"];
                this.columnRemovedBanIncidentGuid = base.Columns["RemovedBanIncidentGuid"];
                this.columnOriginalBanIncidentGuid = base.Columns["OriginalBanIncidentGuid"];
                this.columnRemoved = base.Columns["Removed"];
                this.columnRemovalDate = base.Columns["RemovalDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectGUID = new global::System.Data.DataColumn("SubjectGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectGUID);
                this.columnDetailedReportGUID = new global::System.Data.DataColumn("DetailedReportGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailedReportGUID);
                this.columnSequenceNumber = new global::System.Data.DataColumn("SequenceNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceNumber);
                this.columnCommencement = new global::System.Data.DataColumn("Commencement", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommencement);
                this.columnIsPermanent = new global::System.Data.DataColumn("IsPermanent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermanent);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnSubjectCharged = new global::System.Data.DataColumn("SubjectCharged", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectCharged);
                this.columnLetterSent = new global::System.Data.DataColumn("LetterSent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLetterSent);
                this.columnCompulsiveGambler = new global::System.Data.DataColumn("CompulsiveGambler", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompulsiveGambler);
                this.columnRecordType = new global::System.Data.DataColumn("RecordType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordType);
                this.columnTypeOfBan = new global::System.Data.DataColumn("TypeOfBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfBan);
                this.columnIdentificationUsed = new global::System.Data.DataColumn("IdentificationUsed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdentificationUsed);
                this.columnReasonForBan = new global::System.Data.DataColumn("ReasonForBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonForBan);
                this.columnSelfExclusiveReport = new global::System.Data.DataColumn("SelfExclusiveReport", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelfExclusiveReport);
                this.columnRemovedBanIncidentGuid = new global::System.Data.DataColumn("RemovedBanIncidentGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemovedBanIncidentGuid);
                this.columnOriginalBanIncidentGuid = new global::System.Data.DataColumn("OriginalBanIncidentGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalBanIncidentGuid);
                this.columnRemoved = new global::System.Data.DataColumn("Removed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoved);
                this.columnRemovalDate = new global::System.Data.DataColumn("RemovalDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemovalDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSubjectGUID,
                                this.columnDetailedReportGUID}, true));
                this.columnSubjectGUID.AllowDBNull = false;
                this.columnDetailedReportGUID.AllowDBNull = false;
                this.columnSequenceNumber.AutoIncrement = true;
                this.columnSequenceNumber.AllowDBNull = false;
                this.columnSequenceNumber.ReadOnly = true;
                this.columnCommencement.AllowDBNull = false;
                this.columnIsPermanent.AllowDBNull = false;
                this.columnSubjectCharged.AllowDBNull = false;
                this.columnLetterSent.AllowDBNull = false;
                this.columnCompulsiveGambler.AllowDBNull = false;
                this.columnRecordType.AllowDBNull = false;
                this.columnTypeOfBan.MaxLength = 100;
                this.columnIdentificationUsed.MaxLength = 100;
                this.columnReasonForBan.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectBanRow NewSubjectBanRow() {
                return ((SubjectBanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubjectBanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubjectBanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubjectBanRowChanged != null)) {
                    this.SubjectBanRowChanged(this, new SubjectBanRowChangeEvent(((SubjectBanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubjectBanRowChanging != null)) {
                    this.SubjectBanRowChanging(this, new SubjectBanRowChangeEvent(((SubjectBanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubjectBanRowDeleted != null)) {
                    this.SubjectBanRowDeleted(this, new SubjectBanRowChangeEvent(((SubjectBanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubjectBanRowDeleting != null)) {
                    this.SubjectBanRowDeleting(this, new SubjectBanRowChangeEvent(((SubjectBanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubjectBanRow(SubjectBanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubjectBanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class iXData_SubjectProfileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubjectGUID;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnMiddleName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnDateOfBirth;
            
            private global::System.Data.DataColumn columnAgeRangeLower;
            
            private global::System.Data.DataColumn columnAgeRangeUpper;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnHairColour;
            
            private global::System.Data.DataColumn columnEyeColour;
            
            private global::System.Data.DataColumn columnRace;
            
            private global::System.Data.DataColumn columnDateCreated;
            
            private global::System.Data.DataColumn columnDateModified;
            
            private global::System.Data.DataColumn columnCreatoruserID;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnPropertyGUID;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnLastIncidentDate;
            
            private global::System.Data.DataColumn columnFRSAcSysUserID;
            
            private global::System.Data.DataColumn columnExclusive;
            
            private global::System.Data.DataColumn columnBestAssetGUID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnActivities;
            
            private global::System.Data.DataColumn columnSpecifics;
            
            private global::System.Data.DataColumn columnGroups;
            
            private global::System.Data.DataColumn columnAliases;
            
            private global::System.Data.DataColumn columnTraits;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnPostalCode;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnHomePhone;
            
            private global::System.Data.DataColumn columnWorkPhone;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnSINNumber;
            
            private global::System.Data.DataColumn columnOccupation;
            
            private global::System.Data.DataColumn columnDriversLicenseNum;
            
            private global::System.Data.DataColumn columnTimeStamp;
            
            private global::System.Data.DataColumn columnDigitalSignature;
            
            private global::System.Data.DataColumn columnDataProviderType;
            
            private global::System.Data.DataColumn columnSubjectId;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            private global::System.Data.DataColumn columnCustom1;
            
            private global::System.Data.DataColumn columnCustom2;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnPassportNumber;
            
            private global::System.Data.DataColumn columnBusinessFaxNumber;
            
            private global::System.Data.DataColumn columnWebAddress;
            
            private global::System.Data.DataColumn columnMediaFileName;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnIncidentNumber;
            
            private global::System.Data.DataColumn columnIsBanned;
            
            private global::System.Data.DataColumn columnBanStartDate;
            
            private global::System.Data.DataColumn columnBanEndDate;
            
            private global::System.Data.DataColumn columnBanIdentificationUsed;
            
            private global::System.Data.DataColumn columnTypeOfBan;
            
            private global::System.Data.DataColumn columnReasonOfBan;
            
            private global::System.Data.DataColumn columnIsPermanentBanned;
            
            private global::System.Data.DataColumn columnSubjectCharged;
            
            private global::System.Data.DataColumn columnLetterSent;
            
            private global::System.Data.DataColumn columnCompulsiveGambler;
            
            private global::System.Data.DataColumn columnRecordType;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnDetailedReportGUID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iXData_SubjectProfileDataTable() {
                this.TableName = "iXData_SubjectProfile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal iXData_SubjectProfileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected iXData_SubjectProfileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectGUIDColumn {
                get {
                    return this.columnSubjectGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOfBirthColumn {
                get {
                    return this.columnDateOfBirth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeRangeLowerColumn {
                get {
                    return this.columnAgeRangeLower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeRangeUpperColumn {
                get {
                    return this.columnAgeRangeUpper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HairColourColumn {
                get {
                    return this.columnHairColour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EyeColourColumn {
                get {
                    return this.columnEyeColour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RaceColumn {
                get {
                    return this.columnRace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateModifiedColumn {
                get {
                    return this.columnDateModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatoruserIDColumn {
                get {
                    return this.columnCreatoruserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyGUIDColumn {
                get {
                    return this.columnPropertyGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastIncidentDateColumn {
                get {
                    return this.columnLastIncidentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FRSAcSysUserIDColumn {
                get {
                    return this.columnFRSAcSysUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExclusiveColumn {
                get {
                    return this.columnExclusive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BestAssetGUIDColumn {
                get {
                    return this.columnBestAssetGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivitiesColumn {
                get {
                    return this.columnActivities;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecificsColumn {
                get {
                    return this.columnSpecifics;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupsColumn {
                get {
                    return this.columnGroups;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AliasesColumn {
                get {
                    return this.columnAliases;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraitsColumn {
                get {
                    return this.columnTraits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomePhoneColumn {
                get {
                    return this.columnHomePhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkPhoneColumn {
                get {
                    return this.columnWorkPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SINNumberColumn {
                get {
                    return this.columnSINNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupationColumn {
                get {
                    return this.columnOccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriversLicenseNumColumn {
                get {
                    return this.columnDriversLicenseNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigitalSignatureColumn {
                get {
                    return this.columnDigitalSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataProviderTypeColumn {
                get {
                    return this.columnDataProviderType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectIdColumn {
                get {
                    return this.columnSubjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Custom1Column {
                get {
                    return this.columnCustom1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Custom2Column {
                get {
                    return this.columnCustom2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PassportNumberColumn {
                get {
                    return this.columnPassportNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessFaxNumberColumn {
                get {
                    return this.columnBusinessFaxNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebAddressColumn {
                get {
                    return this.columnWebAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MediaFileNameColumn {
                get {
                    return this.columnMediaFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncidentNumberColumn {
                get {
                    return this.columnIncidentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBannedColumn {
                get {
                    return this.columnIsBanned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BanStartDateColumn {
                get {
                    return this.columnBanStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BanEndDateColumn {
                get {
                    return this.columnBanEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BanIdentificationUsedColumn {
                get {
                    return this.columnBanIdentificationUsed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfBanColumn {
                get {
                    return this.columnTypeOfBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonOfBanColumn {
                get {
                    return this.columnReasonOfBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermanentBannedColumn {
                get {
                    return this.columnIsPermanentBanned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectChargedColumn {
                get {
                    return this.columnSubjectCharged;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LetterSentColumn {
                get {
                    return this.columnLetterSent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompulsiveGamblerColumn {
                get {
                    return this.columnCompulsiveGambler;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordTypeColumn {
                get {
                    return this.columnRecordType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailedReportGUIDColumn {
                get {
                    return this.columnDetailedReportGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iXData_SubjectProfileRow this[int index] {
                get {
                    return ((iXData_SubjectProfileRow)(this.Rows[index]));
                }
            }
            
            public event iXData_SubjectProfileRowChangeEventHandler iXData_SubjectProfileRowChanging;
            
            public event iXData_SubjectProfileRowChangeEventHandler iXData_SubjectProfileRowChanged;
            
            public event iXData_SubjectProfileRowChangeEventHandler iXData_SubjectProfileRowDeleting;
            
            public event iXData_SubjectProfileRowChangeEventHandler iXData_SubjectProfileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddiXData_SubjectProfileRow(iXData_SubjectProfileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iXData_SubjectProfileRow AddiXData_SubjectProfileRow(
                        System.Guid SubjectGUID, 
                        string FirstName, 
                        string MiddleName, 
                        string LastName, 
                        string Gender, 
                        System.DateTime DateOfBirth, 
                        int AgeRangeLower, 
                        int AgeRangeUpper, 
                        int Height, 
                        int Weight, 
                        string HairColour, 
                        string EyeColour, 
                        string Race, 
                        System.DateTime DateCreated, 
                        System.DateTime DateModified, 
                        string CreatoruserID, 
                        string Password, 
                        System.Guid PropertyGUID, 
                        string Comment, 
                        System.DateTime LastIncidentDate, 
                        int FRSAcSysUserID, 
                        string Exclusive, 
                        System.Guid BestAssetGUID, 
                        string Category, 
                        string Activities, 
                        string Specifics, 
                        string Groups, 
                        string Aliases, 
                        string Traits, 
                        string Address, 
                        string City, 
                        string State, 
                        string PostalCode, 
                        string Country, 
                        string HomePhone, 
                        string WorkPhone, 
                        string Email, 
                        string ClientID, 
                        string SINNumber, 
                        string Occupation, 
                        string DriversLicenseNum, 
                        byte[] TimeStamp, 
                        byte[] DigitalSignature, 
                        int DataProviderType, 
                        int SubjectId, 
                        string ModifiedBy, 
                        string Custom1, 
                        string Custom2, 
                        string CompanyName, 
                        string PassportNumber, 
                        string BusinessFaxNumber, 
                        string WebAddress, 
                        string MediaFileName, 
                        string SourceID, 
                        string IncidentNumber, 
                        bool IsBanned, 
                        System.DateTime BanStartDate, 
                        System.DateTime BanEndDate, 
                        string BanIdentificationUsed, 
                        string TypeOfBan, 
                        string ReasonOfBan, 
                        bool IsPermanentBanned, 
                        bool SubjectCharged, 
                        bool LetterSent, 
                        bool CompulsiveGambler, 
                        int RecordType, 
                        int Status, 
                        System.Guid DetailedReportGUID) {
                iXData_SubjectProfileRow rowiXData_SubjectProfileRow = ((iXData_SubjectProfileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectGUID,
                        FirstName,
                        MiddleName,
                        LastName,
                        Gender,
                        DateOfBirth,
                        AgeRangeLower,
                        AgeRangeUpper,
                        Height,
                        Weight,
                        HairColour,
                        EyeColour,
                        Race,
                        DateCreated,
                        DateModified,
                        CreatoruserID,
                        Password,
                        PropertyGUID,
                        Comment,
                        LastIncidentDate,
                        FRSAcSysUserID,
                        Exclusive,
                        BestAssetGUID,
                        Category,
                        Activities,
                        Specifics,
                        Groups,
                        Aliases,
                        Traits,
                        Address,
                        City,
                        State,
                        PostalCode,
                        Country,
                        HomePhone,
                        WorkPhone,
                        Email,
                        ClientID,
                        SINNumber,
                        Occupation,
                        DriversLicenseNum,
                        TimeStamp,
                        DigitalSignature,
                        DataProviderType,
                        SubjectId,
                        ModifiedBy,
                        Custom1,
                        Custom2,
                        CompanyName,
                        PassportNumber,
                        BusinessFaxNumber,
                        WebAddress,
                        MediaFileName,
                        SourceID,
                        IncidentNumber,
                        IsBanned,
                        BanStartDate,
                        BanEndDate,
                        BanIdentificationUsed,
                        TypeOfBan,
                        ReasonOfBan,
                        IsPermanentBanned,
                        SubjectCharged,
                        LetterSent,
                        CompulsiveGambler,
                        RecordType,
                        Status,
                        DetailedReportGUID};
                rowiXData_SubjectProfileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowiXData_SubjectProfileRow);
                return rowiXData_SubjectProfileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                iXData_SubjectProfileDataTable cln = ((iXData_SubjectProfileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new iXData_SubjectProfileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectGUID = base.Columns["SubjectGUID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnMiddleName = base.Columns["MiddleName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnGender = base.Columns["Gender"];
                this.columnDateOfBirth = base.Columns["DateOfBirth"];
                this.columnAgeRangeLower = base.Columns["AgeRangeLower"];
                this.columnAgeRangeUpper = base.Columns["AgeRangeUpper"];
                this.columnHeight = base.Columns["Height"];
                this.columnWeight = base.Columns["Weight"];
                this.columnHairColour = base.Columns["HairColour"];
                this.columnEyeColour = base.Columns["EyeColour"];
                this.columnRace = base.Columns["Race"];
                this.columnDateCreated = base.Columns["DateCreated"];
                this.columnDateModified = base.Columns["DateModified"];
                this.columnCreatoruserID = base.Columns["CreatoruserID"];
                this.columnPassword = base.Columns["Password"];
                this.columnPropertyGUID = base.Columns["PropertyGUID"];
                this.columnComment = base.Columns["Comment"];
                this.columnLastIncidentDate = base.Columns["LastIncidentDate"];
                this.columnFRSAcSysUserID = base.Columns["FRSAcSysUserID"];
                this.columnExclusive = base.Columns["Exclusive"];
                this.columnBestAssetGUID = base.Columns["BestAssetGUID"];
                this.columnCategory = base.Columns["Category"];
                this.columnActivities = base.Columns["Activities"];
                this.columnSpecifics = base.Columns["Specifics"];
                this.columnGroups = base.Columns["Groups"];
                this.columnAliases = base.Columns["Aliases"];
                this.columnTraits = base.Columns["Traits"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCountry = base.Columns["Country"];
                this.columnHomePhone = base.Columns["HomePhone"];
                this.columnWorkPhone = base.Columns["WorkPhone"];
                this.columnEmail = base.Columns["Email"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnSINNumber = base.Columns["SINNumber"];
                this.columnOccupation = base.Columns["Occupation"];
                this.columnDriversLicenseNum = base.Columns["DriversLicenseNum"];
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnDigitalSignature = base.Columns["DigitalSignature"];
                this.columnDataProviderType = base.Columns["DataProviderType"];
                this.columnSubjectId = base.Columns["SubjectId"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
                this.columnCustom1 = base.Columns["Custom1"];
                this.columnCustom2 = base.Columns["Custom2"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnPassportNumber = base.Columns["PassportNumber"];
                this.columnBusinessFaxNumber = base.Columns["BusinessFaxNumber"];
                this.columnWebAddress = base.Columns["WebAddress"];
                this.columnMediaFileName = base.Columns["MediaFileName"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnIncidentNumber = base.Columns["IncidentNumber"];
                this.columnIsBanned = base.Columns["IsBanned"];
                this.columnBanStartDate = base.Columns["BanStartDate"];
                this.columnBanEndDate = base.Columns["BanEndDate"];
                this.columnBanIdentificationUsed = base.Columns["BanIdentificationUsed"];
                this.columnTypeOfBan = base.Columns["TypeOfBan"];
                this.columnReasonOfBan = base.Columns["ReasonOfBan"];
                this.columnIsPermanentBanned = base.Columns["IsPermanentBanned"];
                this.columnSubjectCharged = base.Columns["SubjectCharged"];
                this.columnLetterSent = base.Columns["LetterSent"];
                this.columnCompulsiveGambler = base.Columns["CompulsiveGambler"];
                this.columnRecordType = base.Columns["RecordType"];
                this.columnStatus = base.Columns["Status"];
                this.columnDetailedReportGUID = base.Columns["DetailedReportGUID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectGUID = new global::System.Data.DataColumn("SubjectGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectGUID);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnMiddleName = new global::System.Data.DataColumn("MiddleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiddleName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnDateOfBirth = new global::System.Data.DataColumn("DateOfBirth", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfBirth);
                this.columnAgeRangeLower = new global::System.Data.DataColumn("AgeRangeLower", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgeRangeLower);
                this.columnAgeRangeUpper = new global::System.Data.DataColumn("AgeRangeUpper", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgeRangeUpper);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnHairColour = new global::System.Data.DataColumn("HairColour", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHairColour);
                this.columnEyeColour = new global::System.Data.DataColumn("EyeColour", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEyeColour);
                this.columnRace = new global::System.Data.DataColumn("Race", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRace);
                this.columnDateCreated = new global::System.Data.DataColumn("DateCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreated);
                this.columnDateModified = new global::System.Data.DataColumn("DateModified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateModified);
                this.columnCreatoruserID = new global::System.Data.DataColumn("CreatoruserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatoruserID);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnPropertyGUID = new global::System.Data.DataColumn("PropertyGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyGUID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnLastIncidentDate = new global::System.Data.DataColumn("LastIncidentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastIncidentDate);
                this.columnFRSAcSysUserID = new global::System.Data.DataColumn("FRSAcSysUserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFRSAcSysUserID);
                this.columnExclusive = new global::System.Data.DataColumn("Exclusive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExclusive);
                this.columnBestAssetGUID = new global::System.Data.DataColumn("BestAssetGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestAssetGUID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnActivities = new global::System.Data.DataColumn("Activities", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivities);
                this.columnSpecifics = new global::System.Data.DataColumn("Specifics", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecifics);
                this.columnGroups = new global::System.Data.DataColumn("Groups", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroups);
                this.columnAliases = new global::System.Data.DataColumn("Aliases", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAliases);
                this.columnTraits = new global::System.Data.DataColumn("Traits", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraits);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnHomePhone = new global::System.Data.DataColumn("HomePhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHomePhone);
                this.columnWorkPhone = new global::System.Data.DataColumn("WorkPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkPhone);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnSINNumber = new global::System.Data.DataColumn("SINNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSINNumber);
                this.columnOccupation = new global::System.Data.DataColumn("Occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupation);
                this.columnDriversLicenseNum = new global::System.Data.DataColumn("DriversLicenseNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriversLicenseNum);
                this.columnTimeStamp = new global::System.Data.DataColumn("TimeStamp", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnDigitalSignature = new global::System.Data.DataColumn("DigitalSignature", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigitalSignature);
                this.columnDataProviderType = new global::System.Data.DataColumn("DataProviderType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataProviderType);
                this.columnSubjectId = new global::System.Data.DataColumn("SubjectId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectId);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.columnCustom1 = new global::System.Data.DataColumn("Custom1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustom1);
                this.columnCustom2 = new global::System.Data.DataColumn("Custom2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustom2);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnPassportNumber = new global::System.Data.DataColumn("PassportNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassportNumber);
                this.columnBusinessFaxNumber = new global::System.Data.DataColumn("BusinessFaxNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessFaxNumber);
                this.columnWebAddress = new global::System.Data.DataColumn("WebAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebAddress);
                this.columnMediaFileName = new global::System.Data.DataColumn("MediaFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMediaFileName);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnIncidentNumber = new global::System.Data.DataColumn("IncidentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentNumber);
                this.columnIsBanned = new global::System.Data.DataColumn("IsBanned", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBanned);
                this.columnBanStartDate = new global::System.Data.DataColumn("BanStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBanStartDate);
                this.columnBanEndDate = new global::System.Data.DataColumn("BanEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBanEndDate);
                this.columnBanIdentificationUsed = new global::System.Data.DataColumn("BanIdentificationUsed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBanIdentificationUsed);
                this.columnTypeOfBan = new global::System.Data.DataColumn("TypeOfBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfBan);
                this.columnReasonOfBan = new global::System.Data.DataColumn("ReasonOfBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonOfBan);
                this.columnIsPermanentBanned = new global::System.Data.DataColumn("IsPermanentBanned", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermanentBanned);
                this.columnSubjectCharged = new global::System.Data.DataColumn("SubjectCharged", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectCharged);
                this.columnLetterSent = new global::System.Data.DataColumn("LetterSent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLetterSent);
                this.columnCompulsiveGambler = new global::System.Data.DataColumn("CompulsiveGambler", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompulsiveGambler);
                this.columnRecordType = new global::System.Data.DataColumn("RecordType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordType);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnDetailedReportGUID = new global::System.Data.DataColumn("DetailedReportGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailedReportGUID);
                this.columnSubjectGUID.AllowDBNull = false;
                this.columnFirstName.MaxLength = 100;
                this.columnMiddleName.MaxLength = 100;
                this.columnLastName.MaxLength = 100;
                this.columnGender.MaxLength = 16;
                this.columnHairColour.MaxLength = 128;
                this.columnEyeColour.MaxLength = 128;
                this.columnRace.MaxLength = 128;
                this.columnCreatoruserID.MaxLength = 16;
                this.columnPassword.MaxLength = 50;
                this.columnComment.MaxLength = 1073741823;
                this.columnExclusive.MaxLength = 1073741823;
                this.columnCategory.MaxLength = 50;
                this.columnActivities.MaxLength = 1073741823;
                this.columnSpecifics.MaxLength = 1073741823;
                this.columnGroups.MaxLength = 1073741823;
                this.columnAliases.MaxLength = 1073741823;
                this.columnTraits.MaxLength = 1073741823;
                this.columnAddress.MaxLength = 256;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 20;
                this.columnPostalCode.MaxLength = 20;
                this.columnCountry.MaxLength = 50;
                this.columnHomePhone.MaxLength = 30;
                this.columnWorkPhone.MaxLength = 30;
                this.columnEmail.MaxLength = 128;
                this.columnClientID.MaxLength = 50;
                this.columnSINNumber.MaxLength = 50;
                this.columnOccupation.MaxLength = 50;
                this.columnDriversLicenseNum.MaxLength = 50;
                this.columnTimeStamp.ReadOnly = true;
                this.columnModifiedBy.MaxLength = 16;
                this.columnCustom1.MaxLength = 50;
                this.columnCustom2.MaxLength = 50;
                this.columnCompanyName.MaxLength = 50;
                this.columnPassportNumber.MaxLength = 100;
                this.columnBusinessFaxNumber.MaxLength = 50;
                this.columnWebAddress.MaxLength = 50;
                this.columnMediaFileName.MaxLength = 150;
                this.columnSourceID.MaxLength = 150;
                this.columnIncidentNumber.MaxLength = 150;
                this.columnBanIdentificationUsed.MaxLength = 150;
                this.columnTypeOfBan.MaxLength = 250;
                this.columnReasonOfBan.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iXData_SubjectProfileRow NewiXData_SubjectProfileRow() {
                return ((iXData_SubjectProfileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new iXData_SubjectProfileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(iXData_SubjectProfileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.iXData_SubjectProfileRowChanged != null)) {
                    this.iXData_SubjectProfileRowChanged(this, new iXData_SubjectProfileRowChangeEvent(((iXData_SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.iXData_SubjectProfileRowChanging != null)) {
                    this.iXData_SubjectProfileRowChanging(this, new iXData_SubjectProfileRowChangeEvent(((iXData_SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.iXData_SubjectProfileRowDeleted != null)) {
                    this.iXData_SubjectProfileRowDeleted(this, new iXData_SubjectProfileRowChangeEvent(((iXData_SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.iXData_SubjectProfileRowDeleting != null)) {
                    this.iXData_SubjectProfileRowDeleting(this, new iXData_SubjectProfileRowChangeEvent(((iXData_SubjectProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveiXData_SubjectProfileRow(iXData_SubjectProfileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "iXData_SubjectProfileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParticipantAssignmentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDetailedReportGUID;
            
            private global::System.Data.DataColumn columnParticipantGUID;
            
            private global::System.Data.DataColumn columnAssigned;
            
            private global::System.Data.DataColumn columnAssignedBy;
            
            private global::System.Data.DataColumn columnParticipantType;
            
            private global::System.Data.DataColumn columnParticipantRole;
            
            private global::System.Data.DataColumn columnParticipantNotes;
            
            private global::System.Data.DataColumn columnSecondaryRole;
            
            private global::System.Data.DataColumn columnPoliceContacted;
            
            private global::System.Data.DataColumn columnTakenFromScene;
            
            private global::System.Data.DataColumn columnPoliceContactedResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParticipantAssignmentDataTable() {
                this.TableName = "ParticipantAssignment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParticipantAssignmentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParticipantAssignmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailedReportGUIDColumn {
                get {
                    return this.columnDetailedReportGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParticipantGUIDColumn {
                get {
                    return this.columnParticipantGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedColumn {
                get {
                    return this.columnAssigned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedByColumn {
                get {
                    return this.columnAssignedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParticipantTypeColumn {
                get {
                    return this.columnParticipantType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParticipantRoleColumn {
                get {
                    return this.columnParticipantRole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParticipantNotesColumn {
                get {
                    return this.columnParticipantNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SecondaryRoleColumn {
                get {
                    return this.columnSecondaryRole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoliceContactedColumn {
                get {
                    return this.columnPoliceContacted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TakenFromSceneColumn {
                get {
                    return this.columnTakenFromScene;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoliceContactedResultColumn {
                get {
                    return this.columnPoliceContactedResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParticipantAssignmentRow this[int index] {
                get {
                    return ((ParticipantAssignmentRow)(this.Rows[index]));
                }
            }
            
            public event ParticipantAssignmentRowChangeEventHandler ParticipantAssignmentRowChanging;
            
            public event ParticipantAssignmentRowChangeEventHandler ParticipantAssignmentRowChanged;
            
            public event ParticipantAssignmentRowChangeEventHandler ParticipantAssignmentRowDeleting;
            
            public event ParticipantAssignmentRowChangeEventHandler ParticipantAssignmentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParticipantAssignmentRow(ParticipantAssignmentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParticipantAssignmentRow AddParticipantAssignmentRow(System.Guid DetailedReportGUID, System.Guid ParticipantGUID, System.DateTime Assigned, string AssignedBy, string ParticipantType, System.Guid ParticipantRole, string ParticipantNotes, string SecondaryRole, bool PoliceContacted, bool TakenFromScene, string PoliceContactedResult) {
                ParticipantAssignmentRow rowParticipantAssignmentRow = ((ParticipantAssignmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DetailedReportGUID,
                        ParticipantGUID,
                        Assigned,
                        AssignedBy,
                        ParticipantType,
                        ParticipantRole,
                        ParticipantNotes,
                        SecondaryRole,
                        PoliceContacted,
                        TakenFromScene,
                        PoliceContactedResult};
                rowParticipantAssignmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParticipantAssignmentRow);
                return rowParticipantAssignmentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParticipantAssignmentRow FindByDetailedReportGUIDParticipantGUID(System.Guid DetailedReportGUID, System.Guid ParticipantGUID) {
                return ((ParticipantAssignmentRow)(this.Rows.Find(new object[] {
                            DetailedReportGUID,
                            ParticipantGUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParticipantAssignmentDataTable cln = ((ParticipantAssignmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParticipantAssignmentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDetailedReportGUID = base.Columns["DetailedReportGUID"];
                this.columnParticipantGUID = base.Columns["ParticipantGUID"];
                this.columnAssigned = base.Columns["Assigned"];
                this.columnAssignedBy = base.Columns["AssignedBy"];
                this.columnParticipantType = base.Columns["ParticipantType"];
                this.columnParticipantRole = base.Columns["ParticipantRole"];
                this.columnParticipantNotes = base.Columns["ParticipantNotes"];
                this.columnSecondaryRole = base.Columns["SecondaryRole"];
                this.columnPoliceContacted = base.Columns["PoliceContacted"];
                this.columnTakenFromScene = base.Columns["TakenFromScene"];
                this.columnPoliceContactedResult = base.Columns["PoliceContactedResult"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDetailedReportGUID = new global::System.Data.DataColumn("DetailedReportGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailedReportGUID);
                this.columnParticipantGUID = new global::System.Data.DataColumn("ParticipantGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParticipantGUID);
                this.columnAssigned = new global::System.Data.DataColumn("Assigned", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssigned);
                this.columnAssignedBy = new global::System.Data.DataColumn("AssignedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedBy);
                this.columnParticipantType = new global::System.Data.DataColumn("ParticipantType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParticipantType);
                this.columnParticipantRole = new global::System.Data.DataColumn("ParticipantRole", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParticipantRole);
                this.columnParticipantNotes = new global::System.Data.DataColumn("ParticipantNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParticipantNotes);
                this.columnSecondaryRole = new global::System.Data.DataColumn("SecondaryRole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecondaryRole);
                this.columnPoliceContacted = new global::System.Data.DataColumn("PoliceContacted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoliceContacted);
                this.columnTakenFromScene = new global::System.Data.DataColumn("TakenFromScene", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTakenFromScene);
                this.columnPoliceContactedResult = new global::System.Data.DataColumn("PoliceContactedResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoliceContactedResult);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDetailedReportGUID,
                                this.columnParticipantGUID}, true));
                this.columnDetailedReportGUID.AllowDBNull = false;
                this.columnParticipantGUID.AllowDBNull = false;
                this.columnAssigned.AllowDBNull = false;
                this.columnAssignedBy.AllowDBNull = false;
                this.columnAssignedBy.MaxLength = 16;
                this.columnParticipantType.AllowDBNull = false;
                this.columnParticipantType.MaxLength = 16;
                this.columnParticipantRole.AllowDBNull = false;
                this.columnParticipantNotes.MaxLength = 1073741823;
                this.columnSecondaryRole.MaxLength = 50;
                this.columnPoliceContactedResult.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParticipantAssignmentRow NewParticipantAssignmentRow() {
                return ((ParticipantAssignmentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParticipantAssignmentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParticipantAssignmentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParticipantAssignmentRowChanged != null)) {
                    this.ParticipantAssignmentRowChanged(this, new ParticipantAssignmentRowChangeEvent(((ParticipantAssignmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParticipantAssignmentRowChanging != null)) {
                    this.ParticipantAssignmentRowChanging(this, new ParticipantAssignmentRowChangeEvent(((ParticipantAssignmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParticipantAssignmentRowDeleted != null)) {
                    this.ParticipantAssignmentRowDeleted(this, new ParticipantAssignmentRowChangeEvent(((ParticipantAssignmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParticipantAssignmentRowDeleting != null)) {
                    this.ParticipantAssignmentRowDeleting(this, new ParticipantAssignmentRowChangeEvent(((ParticipantAssignmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParticipantAssignmentRow(ParticipantAssignmentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParticipantAssignmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DropdownSelectionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSelectionGUID;
            
            private global::System.Data.DataColumn columnSelectionType;
            
            private global::System.Data.DataColumn columnSelectionText;
            
            private global::System.Data.DataColumn columnDateModified;
            
            private global::System.Data.DataColumn columnHidden;
            
            private global::System.Data.DataColumn columnParentGUID;
            
            private global::System.Data.DataColumn columnPropertyGUID;
            
            private global::System.Data.DataColumn columnSelectionCode;
            
            private global::System.Data.DataColumn columnlock;
            
            private global::System.Data.DataColumn columnSelectionDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DropdownSelectionDataTable() {
                this.TableName = "DropdownSelection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DropdownSelectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DropdownSelectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionGUIDColumn {
                get {
                    return this.columnSelectionGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionTypeColumn {
                get {
                    return this.columnSelectionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionTextColumn {
                get {
                    return this.columnSelectionText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateModifiedColumn {
                get {
                    return this.columnDateModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HiddenColumn {
                get {
                    return this.columnHidden;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentGUIDColumn {
                get {
                    return this.columnParentGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyGUIDColumn {
                get {
                    return this.columnPropertyGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionCodeColumn {
                get {
                    return this.columnSelectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lockColumn {
                get {
                    return this.columnlock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionDescriptionColumn {
                get {
                    return this.columnSelectionDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DropdownSelectionRow this[int index] {
                get {
                    return ((DropdownSelectionRow)(this.Rows[index]));
                }
            }
            
            public event DropdownSelectionRowChangeEventHandler DropdownSelectionRowChanging;
            
            public event DropdownSelectionRowChangeEventHandler DropdownSelectionRowChanged;
            
            public event DropdownSelectionRowChangeEventHandler DropdownSelectionRowDeleting;
            
            public event DropdownSelectionRowChangeEventHandler DropdownSelectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDropdownSelectionRow(DropdownSelectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DropdownSelectionRow AddDropdownSelectionRow(System.Guid SelectionGUID, string SelectionType, string SelectionText, System.DateTime DateModified, bool Hidden, System.Guid ParentGUID, System.Guid PropertyGUID, string SelectionCode, bool _lock, string SelectionDescription) {
                DropdownSelectionRow rowDropdownSelectionRow = ((DropdownSelectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SelectionGUID,
                        SelectionType,
                        SelectionText,
                        DateModified,
                        Hidden,
                        ParentGUID,
                        PropertyGUID,
                        SelectionCode,
                        _lock,
                        SelectionDescription};
                rowDropdownSelectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDropdownSelectionRow);
                return rowDropdownSelectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DropdownSelectionRow FindBySelectionGUID(System.Guid SelectionGUID) {
                return ((DropdownSelectionRow)(this.Rows.Find(new object[] {
                            SelectionGUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DropdownSelectionDataTable cln = ((DropdownSelectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DropdownSelectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSelectionGUID = base.Columns["SelectionGUID"];
                this.columnSelectionType = base.Columns["SelectionType"];
                this.columnSelectionText = base.Columns["SelectionText"];
                this.columnDateModified = base.Columns["DateModified"];
                this.columnHidden = base.Columns["Hidden"];
                this.columnParentGUID = base.Columns["ParentGUID"];
                this.columnPropertyGUID = base.Columns["PropertyGUID"];
                this.columnSelectionCode = base.Columns["SelectionCode"];
                this.columnlock = base.Columns["lock"];
                this.columnSelectionDescription = base.Columns["SelectionDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSelectionGUID = new global::System.Data.DataColumn("SelectionGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionGUID);
                this.columnSelectionType = new global::System.Data.DataColumn("SelectionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionType);
                this.columnSelectionText = new global::System.Data.DataColumn("SelectionText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionText);
                this.columnDateModified = new global::System.Data.DataColumn("DateModified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateModified);
                this.columnHidden = new global::System.Data.DataColumn("Hidden", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHidden);
                this.columnParentGUID = new global::System.Data.DataColumn("ParentGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentGUID);
                this.columnPropertyGUID = new global::System.Data.DataColumn("PropertyGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyGUID);
                this.columnSelectionCode = new global::System.Data.DataColumn("SelectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionCode);
                this.columnlock = new global::System.Data.DataColumn("lock", typeof(bool), null, global::System.Data.MappingType.Element);
                this.columnlock.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "lockColumn");
                this.columnlock.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlock");
                this.columnlock.ExtendedProperties.Add("Generator_UserColumnName", "lock");
                base.Columns.Add(this.columnlock);
                this.columnSelectionDescription = new global::System.Data.DataColumn("SelectionDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSelectionGUID}, true));
                this.columnSelectionGUID.AllowDBNull = false;
                this.columnSelectionGUID.Unique = true;
                this.columnSelectionType.AllowDBNull = false;
                this.columnSelectionType.MaxLength = 50;
                this.columnSelectionText.AllowDBNull = false;
                this.columnSelectionText.MaxLength = 50;
                this.columnHidden.AllowDBNull = false;
                this.columnSelectionCode.MaxLength = 50;
                this.columnlock.AllowDBNull = false;
                this.columnSelectionDescription.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DropdownSelectionRow NewDropdownSelectionRow() {
                return ((DropdownSelectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DropdownSelectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DropdownSelectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DropdownSelectionRowChanged != null)) {
                    this.DropdownSelectionRowChanged(this, new DropdownSelectionRowChangeEvent(((DropdownSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DropdownSelectionRowChanging != null)) {
                    this.DropdownSelectionRowChanging(this, new DropdownSelectionRowChangeEvent(((DropdownSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DropdownSelectionRowDeleted != null)) {
                    this.DropdownSelectionRowDeleted(this, new DropdownSelectionRowChangeEvent(((DropdownSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DropdownSelectionRowDeleting != null)) {
                    this.DropdownSelectionRowDeleting(this, new DropdownSelectionRowChangeEvent(((DropdownSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDropdownSelectionRow(DropdownSelectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetIXData ds = new DataSetIXData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DropdownSelectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BlotterRow : global::System.Data.DataRow {
            
            private BlotterDataTable tableBlotter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BlotterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBlotter = ((BlotterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid BlotterGUID {
                get {
                    return ((global::System.Guid)(this[this.tableBlotter.BlotterGUIDColumn]));
                }
                set {
                    this[this.tableBlotter.BlotterGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableBlotter.NumberColumn]));
                }
                set {
                    this[this.tableBlotter.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Occured {
                get {
                    return ((global::System.DateTime)(this[this.tableBlotter.OccuredColumn]));
                }
                set {
                    this[this.tableBlotter.OccuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BlotterAction {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.BlotterActionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BlotterAction\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.BlotterActionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid Property {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableBlotter.PropertyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Property\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.PropertyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableBlotter.CreatedColumn]));
                }
                set {
                    this[this.tableBlotter.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Archive {
                get {
                    try {
                        return ((bool)(this[this.tableBlotter.ArchiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Archive\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.ArchiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryOperator {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.PrimaryOperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryOperator\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.PrimaryOperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecondaryOperator {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.SecondaryOperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SecondaryOperator\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.SecondaryOperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HighPriority {
                get {
                    return ((bool)(this[this.tableBlotter.HighPriorityColumn]));
                }
                set {
                    this[this.tableBlotter.HighPriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sublocation {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.SublocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sublocation\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.SublocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exclusive {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.ExclusiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exclusive\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.ExclusiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Synopsis {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.SynopsisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Synopsis\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.SynopsisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastModifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBlotter.LastModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastModifiedDate\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.LastModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reference {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.ReferenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reference\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.ReferenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] TimeStamp {
                get {
                    try {
                        return ((byte[])(this[this.tableBlotter.TimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStamp\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.TimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ArchiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBlotter.ArchiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArchiveDate\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.ArchiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBlotter.EndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ClosedTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBlotter.ClosedTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClosedTime\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.ClosedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGlobal {
                get {
                    return ((bool)(this[this.tableBlotter.IsGlobalColumn]));
                }
                set {
                    this[this.tableBlotter.IsGlobalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SourceModuleID {
                get {
                    try {
                        return ((int)(this[this.tableBlotter.SourceModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceModuleID\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.SourceModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceID {
                get {
                    try {
                        return ((string)(this[this.tableBlotter.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceID\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SourceGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableBlotter.SourceGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceGUID\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.SourceGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LockedBySource {
                get {
                    try {
                        return ((bool)(this[this.tableBlotter.LockedBySourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockedBySource\' in table \'Blotter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlotter.LockedBySourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlotterActionNull() {
                return this.IsNull(this.tableBlotter.BlotterActionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlotterActionNull() {
                this[this.tableBlotter.BlotterActionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableBlotter.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableBlotter.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyNull() {
                return this.IsNull(this.tableBlotter.PropertyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyNull() {
                this[this.tableBlotter.PropertyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableBlotter.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableBlotter.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchiveNull() {
                return this.IsNull(this.tableBlotter.ArchiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchiveNull() {
                this[this.tableBlotter.ArchiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryOperatorNull() {
                return this.IsNull(this.tableBlotter.PrimaryOperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryOperatorNull() {
                this[this.tableBlotter.PrimaryOperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecondaryOperatorNull() {
                return this.IsNull(this.tableBlotter.SecondaryOperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecondaryOperatorNull() {
                this[this.tableBlotter.SecondaryOperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableBlotter.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableBlotter.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSublocationNull() {
                return this.IsNull(this.tableBlotter.SublocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSublocationNull() {
                this[this.tableBlotter.SublocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableBlotter.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableBlotter.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExclusiveNull() {
                return this.IsNull(this.tableBlotter.ExclusiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExclusiveNull() {
                this[this.tableBlotter.ExclusiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSynopsisNull() {
                return this.IsNull(this.tableBlotter.SynopsisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSynopsisNull() {
                this[this.tableBlotter.SynopsisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastModifiedDateNull() {
                return this.IsNull(this.tableBlotter.LastModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastModifiedDateNull() {
                this[this.tableBlotter.LastModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceNull() {
                return this.IsNull(this.tableBlotter.ReferenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceNull() {
                this[this.tableBlotter.ReferenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampNull() {
                return this.IsNull(this.tableBlotter.TimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampNull() {
                this[this.tableBlotter.TimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableBlotter.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableBlotter.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchiveDateNull() {
                return this.IsNull(this.tableBlotter.ArchiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchiveDateNull() {
                this[this.tableBlotter.ArchiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableBlotter.EndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndTimeNull() {
                this[this.tableBlotter.EndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClosedTimeNull() {
                return this.IsNull(this.tableBlotter.ClosedTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClosedTimeNull() {
                this[this.tableBlotter.ClosedTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceModuleIDNull() {
                return this.IsNull(this.tableBlotter.SourceModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceModuleIDNull() {
                this[this.tableBlotter.SourceModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableBlotter.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceIDNull() {
                this[this.tableBlotter.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceGUIDNull() {
                return this.IsNull(this.tableBlotter.SourceGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceGUIDNull() {
                this[this.tableBlotter.SourceGUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockedBySourceNull() {
                return this.IsNull(this.tableBlotter.LockedBySourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockedBySourceNull() {
                this[this.tableBlotter.LockedBySourceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetailedReportRow : global::System.Data.DataRow {
            
            private DetailedReportDataTable tableDetailedReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailedReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetailedReport = ((DetailedReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid DetailedReportGUID {
                get {
                    return ((global::System.Guid)(this[this.tableDetailedReport.DetailedReportGUIDColumn]));
                }
                set {
                    this[this.tableDetailedReport.DetailedReportGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableDetailedReport.NumberColumn]));
                }
                set {
                    this[this.tableDetailedReport.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid BlotterGUID {
                get {
                    return ((global::System.Guid)(this[this.tableDetailedReport.BlotterGUIDColumn]));
                }
                set {
                    this[this.tableDetailedReport.BlotterGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Occured {
                get {
                    return ((global::System.DateTime)(this[this.tableDetailedReport.OccuredColumn]));
                }
                set {
                    this[this.tableDetailedReport.OccuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AmbulanceOffered {
                get {
                    return ((bool)(this[this.tableDetailedReport.AmbulanceOfferedColumn]));
                }
                set {
                    this[this.tableDetailedReport.AmbulanceOfferedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AmbulanceDeclined {
                get {
                    return ((bool)(this[this.tableDetailedReport.AmbulanceDeclinedColumn]));
                }
                set {
                    this[this.tableDetailedReport.AmbulanceDeclinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FirstAidOffered {
                get {
                    return ((bool)(this[this.tableDetailedReport.FirstAidOfferedColumn]));
                }
                set {
                    this[this.tableDetailedReport.FirstAidOfferedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FirstAidDeclined {
                get {
                    return ((bool)(this[this.tableDetailedReport.FirstAidDeclinedColumn]));
                }
                set {
                    this[this.tableDetailedReport.FirstAidDeclinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TaxiFareOffered {
                get {
                    return ((bool)(this[this.tableDetailedReport.TaxiFareOfferedColumn]));
                }
                set {
                    this[this.tableDetailedReport.TaxiFareOfferedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TaxiFareDeclined {
                get {
                    return ((bool)(this[this.tableDetailedReport.TaxiFareDeclinedColumn]));
                }
                set {
                    this[this.tableDetailedReport.TaxiFareDeclinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClosedBy {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.ClosedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClosedBy\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ClosedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Closed {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailedReport.ClosedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Closed\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ClosedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Archive {
                get {
                    try {
                        return ((bool)(this[this.tableDetailedReport.ArchiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Archive\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ArchiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableDetailedReport.CreatedColumn]));
                }
                set {
                    this[this.tableDetailedReport.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tableDetailedReport.CreatedByColumn]));
                }
                set {
                    this[this.tableDetailedReport.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Specific {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.SpecificColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Specific\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.SpecificColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exclusive {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.ExclusiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exclusive\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ExclusiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecondaryOperator {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.SecondaryOperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SecondaryOperator\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.SecondaryOperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Details {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.DetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Details\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.DetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClosingRemarks {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.ClosingRemarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClosingRemarks\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ClosingRemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastModifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailedReport.LastModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastModifiedDate\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.LastModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] TimeStamp {
                get {
                    try {
                        return ((byte[])(this[this.tableDetailedReport.TimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStamp\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.TimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecutiveBrief {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.ExecutiveBriefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutiveBrief\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ExecutiveBriefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableDetailedReport.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ArchiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailedReport.ArchiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArchiveDate\' in table \'DetailedReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailedReport.ArchiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGlobal {
                get {
                    return ((bool)(this[this.tableDetailedReport.IsGlobalColumn]));
                }
                set {
                    this[this.tableDetailedReport.IsGlobalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableDetailedReport.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableDetailedReport.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClosedByNull() {
                return this.IsNull(this.tableDetailedReport.ClosedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClosedByNull() {
                this[this.tableDetailedReport.ClosedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClosedNull() {
                return this.IsNull(this.tableDetailedReport.ClosedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClosedNull() {
                this[this.tableDetailedReport.ClosedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableDetailedReport.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableDetailedReport.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchiveNull() {
                return this.IsNull(this.tableDetailedReport.ArchiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchiveNull() {
                this[this.tableDetailedReport.ArchiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableDetailedReport.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableDetailedReport.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecificNull() {
                return this.IsNull(this.tableDetailedReport.SpecificColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecificNull() {
                this[this.tableDetailedReport.SpecificColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableDetailedReport.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableDetailedReport.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExclusiveNull() {
                return this.IsNull(this.tableDetailedReport.ExclusiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExclusiveNull() {
                this[this.tableDetailedReport.ExclusiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecondaryOperatorNull() {
                return this.IsNull(this.tableDetailedReport.SecondaryOperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecondaryOperatorNull() {
                this[this.tableDetailedReport.SecondaryOperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailsNull() {
                return this.IsNull(this.tableDetailedReport.DetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailsNull() {
                this[this.tableDetailedReport.DetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClosingRemarksNull() {
                return this.IsNull(this.tableDetailedReport.ClosingRemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClosingRemarksNull() {
                this[this.tableDetailedReport.ClosingRemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastModifiedDateNull() {
                return this.IsNull(this.tableDetailedReport.LastModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastModifiedDateNull() {
                this[this.tableDetailedReport.LastModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampNull() {
                return this.IsNull(this.tableDetailedReport.TimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampNull() {
                this[this.tableDetailedReport.TimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutiveBriefNull() {
                return this.IsNull(this.tableDetailedReport.ExecutiveBriefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutiveBriefNull() {
                this[this.tableDetailedReport.ExecutiveBriefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableDetailedReport.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableDetailedReport.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchiveDateNull() {
                return this.IsNull(this.tableDetailedReport.ArchiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchiveDateNull() {
                this[this.tableDetailedReport.ArchiveDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IncidentAttachmentRow : global::System.Data.DataRow {
            
            private IncidentAttachmentDataTable tableIncidentAttachment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncidentAttachmentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIncidentAttachment = ((IncidentAttachmentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IncidentAttachment {
                get {
                    return ((global::System.Guid)(this[this.tableIncidentAttachment.IncidentAttachmentColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.IncidentAttachmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid DetailedReportGUID {
                get {
                    return ((global::System.Guid)(this[this.tableIncidentAttachment.DetailedReportGUIDColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.DetailedReportGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Attached {
                get {
                    return ((global::System.DateTime)(this[this.tableIncidentAttachment.AttachedColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.AttachedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] AttachedmentData {
                get {
                    return ((byte[])(this[this.tableIncidentAttachment.AttachedmentDataColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.AttachedmentDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalFilename {
                get {
                    return ((string)(this[this.tableIncidentAttachment.OriginalFilenameColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.OriginalFilenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AttachedBy {
                get {
                    return ((string)(this[this.tableIncidentAttachment.AttachedByColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.AttachedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Thumbnail {
                get {
                    try {
                        return ((byte[])(this[this.tableIncidentAttachment.ThumbnailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thumbnail\' in table \'IncidentAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncidentAttachment.ThumbnailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AttachedType {
                get {
                    try {
                        return ((string)(this[this.tableIncidentAttachment.AttachedTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AttachedType\' in table \'IncidentAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncidentAttachment.AttachedTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AttachmentSize {
                get {
                    try {
                        return ((long)(this[this.tableIncidentAttachment.AttachmentSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AttachmentSize\' in table \'IncidentAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncidentAttachment.AttachmentSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Linked {
                get {
                    return ((bool)(this[this.tableIncidentAttachment.LinkedColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.LinkedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] DigitalSignature {
                get {
                    try {
                        return ((byte[])(this[this.tableIncidentAttachment.DigitalSignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigitalSignature\' in table \'IncidentAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncidentAttachment.DigitalSignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataProviderType {
                get {
                    return ((int)(this[this.tableIncidentAttachment.DataProviderTypeColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.DataProviderTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableIncidentAttachment.DeletedColumn]));
                }
                set {
                    this[this.tableIncidentAttachment.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastModifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableIncidentAttachment.LastModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastModifiedDate\' in table \'IncidentAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncidentAttachment.LastModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ServerCreateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableIncidentAttachment.ServerCreateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServerCreateDate\' in table \'IncidentAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncidentAttachment.ServerCreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThumbnailNull() {
                return this.IsNull(this.tableIncidentAttachment.ThumbnailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThumbnailNull() {
                this[this.tableIncidentAttachment.ThumbnailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachedTypeNull() {
                return this.IsNull(this.tableIncidentAttachment.AttachedTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttachedTypeNull() {
                this[this.tableIncidentAttachment.AttachedTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachmentSizeNull() {
                return this.IsNull(this.tableIncidentAttachment.AttachmentSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttachmentSizeNull() {
                this[this.tableIncidentAttachment.AttachmentSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigitalSignatureNull() {
                return this.IsNull(this.tableIncidentAttachment.DigitalSignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigitalSignatureNull() {
                this[this.tableIncidentAttachment.DigitalSignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastModifiedDateNull() {
                return this.IsNull(this.tableIncidentAttachment.LastModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastModifiedDateNull() {
                this[this.tableIncidentAttachment.LastModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerCreateDateNull() {
                return this.IsNull(this.tableIncidentAttachment.ServerCreateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerCreateDateNull() {
                this[this.tableIncidentAttachment.ServerCreateDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubjectProfileRow : global::System.Data.DataRow {
            
            private SubjectProfileDataTable tableSubjectProfile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectProfileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubjectProfile = ((SubjectProfileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SubjectGUID {
                get {
                    return ((global::System.Guid)(this[this.tableSubjectProfile.SubjectGUIDColumn]));
                }
                set {
                    this[this.tableSubjectProfile.SubjectGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    return ((string)(this[this.tableSubjectProfile.FirstNameColumn]));
                }
                set {
                    this[this.tableSubjectProfile.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiddleName {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.MiddleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiddleName\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.MiddleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableSubjectProfile.LastNameColumn]));
                }
                set {
                    this[this.tableSubjectProfile.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    return ((string)(this[this.tableSubjectProfile.GenderColumn]));
                }
                set {
                    this[this.tableSubjectProfile.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfBirth {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubjectProfile.DateOfBirthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfBirth\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.DateOfBirthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgeRangeLower {
                get {
                    try {
                        return ((int)(this[this.tableSubjectProfile.AgeRangeLowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgeRangeLower\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.AgeRangeLowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgeRangeUpper {
                get {
                    try {
                        return ((int)(this[this.tableSubjectProfile.AgeRangeUpperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgeRangeUpper\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.AgeRangeUpperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tableSubjectProfile.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableSubjectProfile.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HairColour {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.HairColourColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HairColour\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.HairColourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EyeColour {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.EyeColourColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EyeColour\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.EyeColourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Race {
                get {
                    return ((string)(this[this.tableSubjectProfile.RaceColumn]));
                }
                set {
                    this[this.tableSubjectProfile.RaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreated {
                get {
                    return ((global::System.DateTime)(this[this.tableSubjectProfile.DateCreatedColumn]));
                }
                set {
                    this[this.tableSubjectProfile.DateCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateModified {
                get {
                    return ((global::System.DateTime)(this[this.tableSubjectProfile.DateModifiedColumn]));
                }
                set {
                    this[this.tableSubjectProfile.DateModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatoruserID {
                get {
                    return ((string)(this[this.tableSubjectProfile.CreatoruserIDColumn]));
                }
                set {
                    this[this.tableSubjectProfile.CreatoruserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid PropertyGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSubjectProfile.PropertyGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyGUID\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.PropertyGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastIncidentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubjectProfile.LastIncidentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastIncidentDate\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.LastIncidentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FRSAcSysUserID {
                get {
                    return ((int)(this[this.tableSubjectProfile.FRSAcSysUserIDColumn]));
                }
                set {
                    this[this.tableSubjectProfile.FRSAcSysUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exclusive {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.ExclusiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exclusive\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.ExclusiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid BestAssetGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSubjectProfile.BestAssetGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BestAssetGUID\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.BestAssetGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Activities {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.ActivitiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Activities\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.ActivitiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Specifics {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.SpecificsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Specifics\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.SpecificsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Groups {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.GroupsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Groups\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.GroupsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Aliases {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.AliasesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Aliases\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.AliasesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Traits {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.TraitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Traits\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.TraitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.PostalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCode\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.PostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HomePhone {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.HomePhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HomePhone\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.HomePhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkPhone {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.WorkPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkPhone\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.WorkPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientID {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SINNumber {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.SINNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SINNumber\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.SINNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Occupation {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.OccupationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Occupation\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.OccupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriversLicenseNum {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.DriversLicenseNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DriversLicenseNum\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.DriversLicenseNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] TimeStamp {
                get {
                    try {
                        return ((byte[])(this[this.tableSubjectProfile.TimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStamp\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.TimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] DigitalSignature {
                get {
                    try {
                        return ((byte[])(this[this.tableSubjectProfile.DigitalSignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigitalSignature\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.DigitalSignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataProviderType {
                get {
                    return ((int)(this[this.tableSubjectProfile.DataProviderTypeColumn]));
                }
                set {
                    this[this.tableSubjectProfile.DataProviderTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubjectId {
                get {
                    return ((int)(this[this.tableSubjectProfile.SubjectIdColumn]));
                }
                set {
                    this[this.tableSubjectProfile.SubjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Custom1 {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.Custom1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Custom1\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.Custom1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Custom2 {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.Custom2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Custom2\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.Custom2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PassportNumber {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.PassportNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassportNumber\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.PassportNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusinessFaxNumber {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.BusinessFaxNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessFaxNumber\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.BusinessFaxNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WebAddress {
                get {
                    try {
                        return ((string)(this[this.tableSubjectProfile.WebAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WebAddress\' in table \'SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectProfile.WebAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableSubjectProfile.MiddleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiddleNameNull() {
                this[this.tableSubjectProfile.MiddleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOfBirthNull() {
                return this.IsNull(this.tableSubjectProfile.DateOfBirthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOfBirthNull() {
                this[this.tableSubjectProfile.DateOfBirthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeRangeLowerNull() {
                return this.IsNull(this.tableSubjectProfile.AgeRangeLowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeRangeLowerNull() {
                this[this.tableSubjectProfile.AgeRangeLowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeRangeUpperNull() {
                return this.IsNull(this.tableSubjectProfile.AgeRangeUpperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeRangeUpperNull() {
                this[this.tableSubjectProfile.AgeRangeUpperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableSubjectProfile.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableSubjectProfile.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableSubjectProfile.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableSubjectProfile.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHairColourNull() {
                return this.IsNull(this.tableSubjectProfile.HairColourColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHairColourNull() {
                this[this.tableSubjectProfile.HairColourColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEyeColourNull() {
                return this.IsNull(this.tableSubjectProfile.EyeColourColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEyeColourNull() {
                this[this.tableSubjectProfile.EyeColourColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableSubjectProfile.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableSubjectProfile.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyGUIDNull() {
                return this.IsNull(this.tableSubjectProfile.PropertyGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyGUIDNull() {
                this[this.tableSubjectProfile.PropertyGUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableSubjectProfile.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableSubjectProfile.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastIncidentDateNull() {
                return this.IsNull(this.tableSubjectProfile.LastIncidentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastIncidentDateNull() {
                this[this.tableSubjectProfile.LastIncidentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExclusiveNull() {
                return this.IsNull(this.tableSubjectProfile.ExclusiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExclusiveNull() {
                this[this.tableSubjectProfile.ExclusiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestAssetGUIDNull() {
                return this.IsNull(this.tableSubjectProfile.BestAssetGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestAssetGUIDNull() {
                this[this.tableSubjectProfile.BestAssetGUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableSubjectProfile.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableSubjectProfile.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivitiesNull() {
                return this.IsNull(this.tableSubjectProfile.ActivitiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivitiesNull() {
                this[this.tableSubjectProfile.ActivitiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecificsNull() {
                return this.IsNull(this.tableSubjectProfile.SpecificsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecificsNull() {
                this[this.tableSubjectProfile.SpecificsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupsNull() {
                return this.IsNull(this.tableSubjectProfile.GroupsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupsNull() {
                this[this.tableSubjectProfile.GroupsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAliasesNull() {
                return this.IsNull(this.tableSubjectProfile.AliasesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAliasesNull() {
                this[this.tableSubjectProfile.AliasesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraitsNull() {
                return this.IsNull(this.tableSubjectProfile.TraitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraitsNull() {
                this[this.tableSubjectProfile.TraitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableSubjectProfile.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableSubjectProfile.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableSubjectProfile.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableSubjectProfile.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableSubjectProfile.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableSubjectProfile.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableSubjectProfile.PostalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull() {
                this[this.tableSubjectProfile.PostalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableSubjectProfile.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableSubjectProfile.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomePhoneNull() {
                return this.IsNull(this.tableSubjectProfile.HomePhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomePhoneNull() {
                this[this.tableSubjectProfile.HomePhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkPhoneNull() {
                return this.IsNull(this.tableSubjectProfile.WorkPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkPhoneNull() {
                this[this.tableSubjectProfile.WorkPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableSubjectProfile.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableSubjectProfile.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableSubjectProfile.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableSubjectProfile.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSINNumberNull() {
                return this.IsNull(this.tableSubjectProfile.SINNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSINNumberNull() {
                this[this.tableSubjectProfile.SINNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupationNull() {
                return this.IsNull(this.tableSubjectProfile.OccupationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupationNull() {
                this[this.tableSubjectProfile.OccupationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriversLicenseNumNull() {
                return this.IsNull(this.tableSubjectProfile.DriversLicenseNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriversLicenseNumNull() {
                this[this.tableSubjectProfile.DriversLicenseNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampNull() {
                return this.IsNull(this.tableSubjectProfile.TimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampNull() {
                this[this.tableSubjectProfile.TimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigitalSignatureNull() {
                return this.IsNull(this.tableSubjectProfile.DigitalSignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigitalSignatureNull() {
                this[this.tableSubjectProfile.DigitalSignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableSubjectProfile.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableSubjectProfile.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustom1Null() {
                return this.IsNull(this.tableSubjectProfile.Custom1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustom1Null() {
                this[this.tableSubjectProfile.Custom1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustom2Null() {
                return this.IsNull(this.tableSubjectProfile.Custom2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustom2Null() {
                this[this.tableSubjectProfile.Custom2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableSubjectProfile.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableSubjectProfile.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPassportNumberNull() {
                return this.IsNull(this.tableSubjectProfile.PassportNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPassportNumberNull() {
                this[this.tableSubjectProfile.PassportNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessFaxNumberNull() {
                return this.IsNull(this.tableSubjectProfile.BusinessFaxNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessFaxNumberNull() {
                this[this.tableSubjectProfile.BusinessFaxNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebAddressNull() {
                return this.IsNull(this.tableSubjectProfile.WebAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebAddressNull() {
                this[this.tableSubjectProfile.WebAddressColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _ConversionTmpRow : global::System.Data.DataRow {
            
            private _ConversionTmpDataTable table_ConversionTmp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _ConversionTmpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_ConversionTmp = ((_ConversionTmpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConvertGuid {
                get {
                    return ((global::System.Guid)(this[this.table_ConversionTmp.ConvertGuidColumn]));
                }
                set {
                    this[this.table_ConversionTmp.ConvertGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    try {
                        return ((string)(this[this.table_ConversionTmp.TableNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TableName\' in table \'_ConversionTmp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_ConversionTmp.TableNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConvertId1 {
                get {
                    try {
                        return ((string)(this[this.table_ConversionTmp.ConvertId1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConvertId1\' in table \'_ConversionTmp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_ConversionTmp.ConvertId1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConvertId2 {
                get {
                    try {
                        return ((string)(this[this.table_ConversionTmp.ConvertId2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConvertId2\' in table \'_ConversionTmp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_ConversionTmp.ConvertId2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table_ConversionTmp.CreateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreateDate\' in table \'_ConversionTmp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_ConversionTmp.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AUTOID {
                get {
                    return ((int)(this[this.table_ConversionTmp.AUTOIDColumn]));
                }
                set {
                    this[this.table_ConversionTmp.AUTOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTableNameNull() {
                return this.IsNull(this.table_ConversionTmp.TableNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTableNameNull() {
                this[this.table_ConversionTmp.TableNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConvertId1Null() {
                return this.IsNull(this.table_ConversionTmp.ConvertId1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConvertId1Null() {
                this[this.table_ConversionTmp.ConvertId1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConvertId2Null() {
                return this.IsNull(this.table_ConversionTmp.ConvertId2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConvertId2Null() {
                this[this.table_ConversionTmp.ConvertId2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateNull() {
                return this.IsNull(this.table_ConversionTmp.CreateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateNull() {
                this[this.table_ConversionTmp.CreateDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BanWatchStatusRow : global::System.Data.DataRow {
            
            private BanWatchStatusDataTable tableBanWatchStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BanWatchStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBanWatchStatus = ((BanWatchStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SubjectGUID {
                get {
                    return ((global::System.Guid)(this[this.tableBanWatchStatus.SubjectGUIDColumn]));
                }
                set {
                    this[this.tableBanWatchStatus.SubjectGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    return ((int)(this[this.tableBanWatchStatus.StatusColumn]));
                }
                set {
                    this[this.tableBanWatchStatus.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Commencement {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBanWatchStatus.CommencementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Commencement\' in table \'BanWatchStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanWatchStatus.CommencementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBanWatchStatus.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'BanWatchStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanWatchStatus.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanent {
                get {
                    return ((bool)(this[this.tableBanWatchStatus.IsPermanentColumn]));
                }
                set {
                    this[this.tableBanWatchStatus.IsPermanentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeOfBan {
                get {
                    try {
                        return ((string)(this[this.tableBanWatchStatus.TypeOfBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfBan\' in table \'BanWatchStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanWatchStatus.TypeOfBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonForBan {
                get {
                    try {
                        return ((string)(this[this.tableBanWatchStatus.ReasonForBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonForBan\' in table \'BanWatchStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanWatchStatus.ReasonForBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid DetailedReportGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableBanWatchStatus.DetailedReportGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DetailedReportGUID\' in table \'BanWatchStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanWatchStatus.DetailedReportGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommencementNull() {
                return this.IsNull(this.tableBanWatchStatus.CommencementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommencementNull() {
                this[this.tableBanWatchStatus.CommencementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableBanWatchStatus.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableBanWatchStatus.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfBanNull() {
                return this.IsNull(this.tableBanWatchStatus.TypeOfBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfBanNull() {
                this[this.tableBanWatchStatus.TypeOfBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonForBanNull() {
                return this.IsNull(this.tableBanWatchStatus.ReasonForBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonForBanNull() {
                this[this.tableBanWatchStatus.ReasonForBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailedReportGUIDNull() {
                return this.IsNull(this.tableBanWatchStatus.DetailedReportGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailedReportGUIDNull() {
                this[this.tableBanWatchStatus.DetailedReportGUIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubjectBanRow : global::System.Data.DataRow {
            
            private SubjectBanDataTable tableSubjectBan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectBanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubjectBan = ((SubjectBanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SubjectGUID {
                get {
                    return ((global::System.Guid)(this[this.tableSubjectBan.SubjectGUIDColumn]));
                }
                set {
                    this[this.tableSubjectBan.SubjectGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid DetailedReportGUID {
                get {
                    return ((global::System.Guid)(this[this.tableSubjectBan.DetailedReportGUIDColumn]));
                }
                set {
                    this[this.tableSubjectBan.DetailedReportGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SequenceNumber {
                get {
                    return ((int)(this[this.tableSubjectBan.SequenceNumberColumn]));
                }
                set {
                    this[this.tableSubjectBan.SequenceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Commencement {
                get {
                    return ((global::System.DateTime)(this[this.tableSubjectBan.CommencementColumn]));
                }
                set {
                    this[this.tableSubjectBan.CommencementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanent {
                get {
                    return ((bool)(this[this.tableSubjectBan.IsPermanentColumn]));
                }
                set {
                    this[this.tableSubjectBan.IsPermanentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubjectBan.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SubjectCharged {
                get {
                    return ((bool)(this[this.tableSubjectBan.SubjectChargedColumn]));
                }
                set {
                    this[this.tableSubjectBan.SubjectChargedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LetterSent {
                get {
                    return ((bool)(this[this.tableSubjectBan.LetterSentColumn]));
                }
                set {
                    this[this.tableSubjectBan.LetterSentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CompulsiveGambler {
                get {
                    return ((bool)(this[this.tableSubjectBan.CompulsiveGamblerColumn]));
                }
                set {
                    this[this.tableSubjectBan.CompulsiveGamblerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RecordType {
                get {
                    return ((int)(this[this.tableSubjectBan.RecordTypeColumn]));
                }
                set {
                    this[this.tableSubjectBan.RecordTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeOfBan {
                get {
                    try {
                        return ((string)(this[this.tableSubjectBan.TypeOfBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfBan\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.TypeOfBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IdentificationUsed {
                get {
                    try {
                        return ((string)(this[this.tableSubjectBan.IdentificationUsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IdentificationUsed\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.IdentificationUsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonForBan {
                get {
                    try {
                        return ((string)(this[this.tableSubjectBan.ReasonForBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonForBan\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.ReasonForBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] SelfExclusiveReport {
                get {
                    try {
                        return ((byte[])(this[this.tableSubjectBan.SelfExclusiveReportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelfExclusiveReport\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.SelfExclusiveReportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid RemovedBanIncidentGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSubjectBan.RemovedBanIncidentGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemovedBanIncidentGuid\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.RemovedBanIncidentGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid OriginalBanIncidentGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSubjectBan.OriginalBanIncidentGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalBanIncidentGuid\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.OriginalBanIncidentGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Removed {
                get {
                    try {
                        return ((bool)(this[this.tableSubjectBan.RemovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Removed\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.RemovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RemovalDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubjectBan.RemovalDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemovalDate\' in table \'SubjectBan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectBan.RemovalDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableSubjectBan.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableSubjectBan.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfBanNull() {
                return this.IsNull(this.tableSubjectBan.TypeOfBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfBanNull() {
                this[this.tableSubjectBan.TypeOfBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdentificationUsedNull() {
                return this.IsNull(this.tableSubjectBan.IdentificationUsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdentificationUsedNull() {
                this[this.tableSubjectBan.IdentificationUsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonForBanNull() {
                return this.IsNull(this.tableSubjectBan.ReasonForBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonForBanNull() {
                this[this.tableSubjectBan.ReasonForBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelfExclusiveReportNull() {
                return this.IsNull(this.tableSubjectBan.SelfExclusiveReportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelfExclusiveReportNull() {
                this[this.tableSubjectBan.SelfExclusiveReportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemovedBanIncidentGuidNull() {
                return this.IsNull(this.tableSubjectBan.RemovedBanIncidentGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemovedBanIncidentGuidNull() {
                this[this.tableSubjectBan.RemovedBanIncidentGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalBanIncidentGuidNull() {
                return this.IsNull(this.tableSubjectBan.OriginalBanIncidentGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalBanIncidentGuidNull() {
                this[this.tableSubjectBan.OriginalBanIncidentGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemovedNull() {
                return this.IsNull(this.tableSubjectBan.RemovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemovedNull() {
                this[this.tableSubjectBan.RemovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemovalDateNull() {
                return this.IsNull(this.tableSubjectBan.RemovalDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemovalDateNull() {
                this[this.tableSubjectBan.RemovalDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class iXData_SubjectProfileRow : global::System.Data.DataRow {
            
            private iXData_SubjectProfileDataTable tableiXData_SubjectProfile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal iXData_SubjectProfileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableiXData_SubjectProfile = ((iXData_SubjectProfileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SubjectGUID {
                get {
                    return ((global::System.Guid)(this[this.tableiXData_SubjectProfile.SubjectGUIDColumn]));
                }
                set {
                    this[this.tableiXData_SubjectProfile.SubjectGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiddleName {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.MiddleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiddleName\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.MiddleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfBirth {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableiXData_SubjectProfile.DateOfBirthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfBirth\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.DateOfBirthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgeRangeLower {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.AgeRangeLowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgeRangeLower\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.AgeRangeLowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgeRangeUpper {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.AgeRangeUpperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgeRangeUpper\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.AgeRangeUpperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HairColour {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.HairColourColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HairColour\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.HairColourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EyeColour {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.EyeColourColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EyeColour\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.EyeColourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Race {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.RaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Race\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.RaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableiXData_SubjectProfile.DateCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateCreated\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.DateCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateModified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableiXData_SubjectProfile.DateModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateModified\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.DateModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatoruserID {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.CreatoruserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatoruserID\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.CreatoruserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid PropertyGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableiXData_SubjectProfile.PropertyGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyGUID\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.PropertyGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastIncidentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableiXData_SubjectProfile.LastIncidentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastIncidentDate\' in table \'iXData_SubjectProfile\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.LastIncidentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FRSAcSysUserID {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.FRSAcSysUserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FRSAcSysUserID\' in table \'iXData_SubjectProfile\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.FRSAcSysUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exclusive {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.ExclusiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exclusive\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.ExclusiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid BestAssetGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableiXData_SubjectProfile.BestAssetGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BestAssetGUID\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.BestAssetGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Activities {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.ActivitiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Activities\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.ActivitiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Specifics {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.SpecificsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Specifics\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.SpecificsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Groups {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.GroupsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Groups\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.GroupsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Aliases {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.AliasesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Aliases\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.AliasesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Traits {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.TraitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Traits\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.TraitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.PostalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCode\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.PostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HomePhone {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.HomePhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HomePhone\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.HomePhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkPhone {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.WorkPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkPhone\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.WorkPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientID {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SINNumber {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.SINNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SINNumber\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.SINNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Occupation {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.OccupationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Occupation\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.OccupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriversLicenseNum {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.DriversLicenseNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DriversLicenseNum\' in table \'iXData_SubjectProfile\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.DriversLicenseNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] TimeStamp {
                get {
                    try {
                        return ((byte[])(this[this.tableiXData_SubjectProfile.TimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStamp\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.TimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] DigitalSignature {
                get {
                    try {
                        return ((byte[])(this[this.tableiXData_SubjectProfile.DigitalSignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigitalSignature\' in table \'iXData_SubjectProfile\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.DigitalSignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataProviderType {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.DataProviderTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataProviderType\' in table \'iXData_SubjectProfile\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.DataProviderTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubjectId {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.SubjectIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectId\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.SubjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Custom1 {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.Custom1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Custom1\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.Custom1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Custom2 {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.Custom2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Custom2\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.Custom2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PassportNumber {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.PassportNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassportNumber\' in table \'iXData_SubjectProfile\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.PassportNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusinessFaxNumber {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.BusinessFaxNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessFaxNumber\' in table \'iXData_SubjectProfile\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.BusinessFaxNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WebAddress {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.WebAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WebAddress\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.WebAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaFileName {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.MediaFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MediaFileName\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.MediaFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceID {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceID\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncidentNumber {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.IncidentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncidentNumber\' in table \'iXData_SubjectProfile\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.IncidentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBanned {
                get {
                    try {
                        return ((bool)(this[this.tableiXData_SubjectProfile.IsBannedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBanned\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.IsBannedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BanStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableiXData_SubjectProfile.BanStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BanStartDate\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.BanStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BanEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableiXData_SubjectProfile.BanEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BanEndDate\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.BanEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BanIdentificationUsed {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.BanIdentificationUsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BanIdentificationUsed\' in table \'iXData_SubjectProfile\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.BanIdentificationUsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeOfBan {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.TypeOfBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfBan\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.TypeOfBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonOfBan {
                get {
                    try {
                        return ((string)(this[this.tableiXData_SubjectProfile.ReasonOfBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonOfBan\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.ReasonOfBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanentBanned {
                get {
                    try {
                        return ((bool)(this[this.tableiXData_SubjectProfile.IsPermanentBannedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermanentBanned\' in table \'iXData_SubjectProfile\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.IsPermanentBannedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SubjectCharged {
                get {
                    try {
                        return ((bool)(this[this.tableiXData_SubjectProfile.SubjectChargedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectCharged\' in table \'iXData_SubjectProfile\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.SubjectChargedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LetterSent {
                get {
                    try {
                        return ((bool)(this[this.tableiXData_SubjectProfile.LetterSentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LetterSent\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.LetterSentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CompulsiveGambler {
                get {
                    try {
                        return ((bool)(this[this.tableiXData_SubjectProfile.CompulsiveGamblerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompulsiveGambler\' in table \'iXData_SubjectProfile\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.CompulsiveGamblerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RecordType {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.RecordTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordType\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.RecordTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableiXData_SubjectProfile.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'iXData_SubjectProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid DetailedReportGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableiXData_SubjectProfile.DetailedReportGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DetailedReportGUID\' in table \'iXData_SubjectProfile\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableiXData_SubjectProfile.DetailedReportGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableiXData_SubjectProfile.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.MiddleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiddleNameNull() {
                this[this.tableiXData_SubjectProfile.MiddleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableiXData_SubjectProfile.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tableiXData_SubjectProfile.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOfBirthNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.DateOfBirthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOfBirthNull() {
                this[this.tableiXData_SubjectProfile.DateOfBirthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeRangeLowerNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.AgeRangeLowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeRangeLowerNull() {
                this[this.tableiXData_SubjectProfile.AgeRangeLowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeRangeUpperNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.AgeRangeUpperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeRangeUpperNull() {
                this[this.tableiXData_SubjectProfile.AgeRangeUpperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableiXData_SubjectProfile.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableiXData_SubjectProfile.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHairColourNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.HairColourColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHairColourNull() {
                this[this.tableiXData_SubjectProfile.HairColourColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEyeColourNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.EyeColourColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEyeColourNull() {
                this[this.tableiXData_SubjectProfile.EyeColourColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRaceNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.RaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRaceNull() {
                this[this.tableiXData_SubjectProfile.RaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreatedNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.DateCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreatedNull() {
                this[this.tableiXData_SubjectProfile.DateCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateModifiedNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.DateModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateModifiedNull() {
                this[this.tableiXData_SubjectProfile.DateModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatoruserIDNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.CreatoruserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatoruserIDNull() {
                this[this.tableiXData_SubjectProfile.CreatoruserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableiXData_SubjectProfile.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyGUIDNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.PropertyGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyGUIDNull() {
                this[this.tableiXData_SubjectProfile.PropertyGUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableiXData_SubjectProfile.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastIncidentDateNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.LastIncidentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastIncidentDateNull() {
                this[this.tableiXData_SubjectProfile.LastIncidentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFRSAcSysUserIDNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.FRSAcSysUserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFRSAcSysUserIDNull() {
                this[this.tableiXData_SubjectProfile.FRSAcSysUserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExclusiveNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.ExclusiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExclusiveNull() {
                this[this.tableiXData_SubjectProfile.ExclusiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestAssetGUIDNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.BestAssetGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestAssetGUIDNull() {
                this[this.tableiXData_SubjectProfile.BestAssetGUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableiXData_SubjectProfile.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivitiesNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.ActivitiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivitiesNull() {
                this[this.tableiXData_SubjectProfile.ActivitiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecificsNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.SpecificsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecificsNull() {
                this[this.tableiXData_SubjectProfile.SpecificsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupsNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.GroupsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupsNull() {
                this[this.tableiXData_SubjectProfile.GroupsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAliasesNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.AliasesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAliasesNull() {
                this[this.tableiXData_SubjectProfile.AliasesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraitsNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.TraitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraitsNull() {
                this[this.tableiXData_SubjectProfile.TraitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableiXData_SubjectProfile.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableiXData_SubjectProfile.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableiXData_SubjectProfile.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.PostalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull() {
                this[this.tableiXData_SubjectProfile.PostalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableiXData_SubjectProfile.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomePhoneNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.HomePhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomePhoneNull() {
                this[this.tableiXData_SubjectProfile.HomePhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkPhoneNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.WorkPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkPhoneNull() {
                this[this.tableiXData_SubjectProfile.WorkPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableiXData_SubjectProfile.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableiXData_SubjectProfile.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSINNumberNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.SINNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSINNumberNull() {
                this[this.tableiXData_SubjectProfile.SINNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupationNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.OccupationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupationNull() {
                this[this.tableiXData_SubjectProfile.OccupationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriversLicenseNumNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.DriversLicenseNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriversLicenseNumNull() {
                this[this.tableiXData_SubjectProfile.DriversLicenseNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.TimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampNull() {
                this[this.tableiXData_SubjectProfile.TimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigitalSignatureNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.DigitalSignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigitalSignatureNull() {
                this[this.tableiXData_SubjectProfile.DigitalSignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataProviderTypeNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.DataProviderTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataProviderTypeNull() {
                this[this.tableiXData_SubjectProfile.DataProviderTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectIdNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.SubjectIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectIdNull() {
                this[this.tableiXData_SubjectProfile.SubjectIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableiXData_SubjectProfile.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustom1Null() {
                return this.IsNull(this.tableiXData_SubjectProfile.Custom1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustom1Null() {
                this[this.tableiXData_SubjectProfile.Custom1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustom2Null() {
                return this.IsNull(this.tableiXData_SubjectProfile.Custom2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustom2Null() {
                this[this.tableiXData_SubjectProfile.Custom2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableiXData_SubjectProfile.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPassportNumberNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.PassportNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPassportNumberNull() {
                this[this.tableiXData_SubjectProfile.PassportNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessFaxNumberNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.BusinessFaxNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessFaxNumberNull() {
                this[this.tableiXData_SubjectProfile.BusinessFaxNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebAddressNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.WebAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebAddressNull() {
                this[this.tableiXData_SubjectProfile.WebAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaFileNameNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.MediaFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaFileNameNull() {
                this[this.tableiXData_SubjectProfile.MediaFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceIDNull() {
                this[this.tableiXData_SubjectProfile.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncidentNumberNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.IncidentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncidentNumberNull() {
                this[this.tableiXData_SubjectProfile.IncidentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBannedNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.IsBannedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBannedNull() {
                this[this.tableiXData_SubjectProfile.IsBannedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBanStartDateNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.BanStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBanStartDateNull() {
                this[this.tableiXData_SubjectProfile.BanStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBanEndDateNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.BanEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBanEndDateNull() {
                this[this.tableiXData_SubjectProfile.BanEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBanIdentificationUsedNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.BanIdentificationUsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBanIdentificationUsedNull() {
                this[this.tableiXData_SubjectProfile.BanIdentificationUsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfBanNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.TypeOfBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfBanNull() {
                this[this.tableiXData_SubjectProfile.TypeOfBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonOfBanNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.ReasonOfBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonOfBanNull() {
                this[this.tableiXData_SubjectProfile.ReasonOfBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermanentBannedNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.IsPermanentBannedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermanentBannedNull() {
                this[this.tableiXData_SubjectProfile.IsPermanentBannedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectChargedNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.SubjectChargedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectChargedNull() {
                this[this.tableiXData_SubjectProfile.SubjectChargedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLetterSentNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.LetterSentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLetterSentNull() {
                this[this.tableiXData_SubjectProfile.LetterSentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompulsiveGamblerNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.CompulsiveGamblerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompulsiveGamblerNull() {
                this[this.tableiXData_SubjectProfile.CompulsiveGamblerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordTypeNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.RecordTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordTypeNull() {
                this[this.tableiXData_SubjectProfile.RecordTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableiXData_SubjectProfile.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailedReportGUIDNull() {
                return this.IsNull(this.tableiXData_SubjectProfile.DetailedReportGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailedReportGUIDNull() {
                this[this.tableiXData_SubjectProfile.DetailedReportGUIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParticipantAssignmentRow : global::System.Data.DataRow {
            
            private ParticipantAssignmentDataTable tableParticipantAssignment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParticipantAssignmentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParticipantAssignment = ((ParticipantAssignmentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid DetailedReportGUID {
                get {
                    return ((global::System.Guid)(this[this.tableParticipantAssignment.DetailedReportGUIDColumn]));
                }
                set {
                    this[this.tableParticipantAssignment.DetailedReportGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ParticipantGUID {
                get {
                    return ((global::System.Guid)(this[this.tableParticipantAssignment.ParticipantGUIDColumn]));
                }
                set {
                    this[this.tableParticipantAssignment.ParticipantGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Assigned {
                get {
                    return ((global::System.DateTime)(this[this.tableParticipantAssignment.AssignedColumn]));
                }
                set {
                    this[this.tableParticipantAssignment.AssignedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignedBy {
                get {
                    return ((string)(this[this.tableParticipantAssignment.AssignedByColumn]));
                }
                set {
                    this[this.tableParticipantAssignment.AssignedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParticipantType {
                get {
                    return ((string)(this[this.tableParticipantAssignment.ParticipantTypeColumn]));
                }
                set {
                    this[this.tableParticipantAssignment.ParticipantTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ParticipantRole {
                get {
                    return ((global::System.Guid)(this[this.tableParticipantAssignment.ParticipantRoleColumn]));
                }
                set {
                    this[this.tableParticipantAssignment.ParticipantRoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParticipantNotes {
                get {
                    try {
                        return ((string)(this[this.tableParticipantAssignment.ParticipantNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParticipantNotes\' in table \'ParticipantAssignment\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableParticipantAssignment.ParticipantNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecondaryRole {
                get {
                    try {
                        return ((string)(this[this.tableParticipantAssignment.SecondaryRoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SecondaryRole\' in table \'ParticipantAssignment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParticipantAssignment.SecondaryRoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PoliceContacted {
                get {
                    try {
                        return ((bool)(this[this.tableParticipantAssignment.PoliceContactedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoliceContacted\' in table \'ParticipantAssignment\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableParticipantAssignment.PoliceContactedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TakenFromScene {
                get {
                    try {
                        return ((bool)(this[this.tableParticipantAssignment.TakenFromSceneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TakenFromScene\' in table \'ParticipantAssignment\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableParticipantAssignment.TakenFromSceneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoliceContactedResult {
                get {
                    try {
                        return ((string)(this[this.tableParticipantAssignment.PoliceContactedResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoliceContactedResult\' in table \'ParticipantAssignment\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableParticipantAssignment.PoliceContactedResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParticipantNotesNull() {
                return this.IsNull(this.tableParticipantAssignment.ParticipantNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParticipantNotesNull() {
                this[this.tableParticipantAssignment.ParticipantNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecondaryRoleNull() {
                return this.IsNull(this.tableParticipantAssignment.SecondaryRoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecondaryRoleNull() {
                this[this.tableParticipantAssignment.SecondaryRoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoliceContactedNull() {
                return this.IsNull(this.tableParticipantAssignment.PoliceContactedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoliceContactedNull() {
                this[this.tableParticipantAssignment.PoliceContactedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTakenFromSceneNull() {
                return this.IsNull(this.tableParticipantAssignment.TakenFromSceneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTakenFromSceneNull() {
                this[this.tableParticipantAssignment.TakenFromSceneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoliceContactedResultNull() {
                return this.IsNull(this.tableParticipantAssignment.PoliceContactedResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoliceContactedResultNull() {
                this[this.tableParticipantAssignment.PoliceContactedResultColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DropdownSelectionRow : global::System.Data.DataRow {
            
            private DropdownSelectionDataTable tableDropdownSelection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DropdownSelectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDropdownSelection = ((DropdownSelectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SelectionGUID {
                get {
                    return ((global::System.Guid)(this[this.tableDropdownSelection.SelectionGUIDColumn]));
                }
                set {
                    this[this.tableDropdownSelection.SelectionGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SelectionType {
                get {
                    return ((string)(this[this.tableDropdownSelection.SelectionTypeColumn]));
                }
                set {
                    this[this.tableDropdownSelection.SelectionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SelectionText {
                get {
                    return ((string)(this[this.tableDropdownSelection.SelectionTextColumn]));
                }
                set {
                    this[this.tableDropdownSelection.SelectionTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateModified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDropdownSelection.DateModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateModified\' in table \'DropdownSelection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDropdownSelection.DateModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Hidden {
                get {
                    return ((bool)(this[this.tableDropdownSelection.HiddenColumn]));
                }
                set {
                    this[this.tableDropdownSelection.HiddenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ParentGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableDropdownSelection.ParentGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentGUID\' in table \'DropdownSelection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDropdownSelection.ParentGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid PropertyGUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableDropdownSelection.PropertyGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyGUID\' in table \'DropdownSelection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDropdownSelection.PropertyGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SelectionCode {
                get {
                    try {
                        return ((string)(this[this.tableDropdownSelection.SelectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelectionCode\' in table \'DropdownSelection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDropdownSelection.SelectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool _lock {
                get {
                    return ((bool)(this[this.tableDropdownSelection.lockColumn]));
                }
                set {
                    this[this.tableDropdownSelection.lockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SelectionDescription {
                get {
                    try {
                        return ((string)(this[this.tableDropdownSelection.SelectionDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelectionDescription\' in table \'DropdownSelection\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDropdownSelection.SelectionDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateModifiedNull() {
                return this.IsNull(this.tableDropdownSelection.DateModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateModifiedNull() {
                this[this.tableDropdownSelection.DateModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentGUIDNull() {
                return this.IsNull(this.tableDropdownSelection.ParentGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentGUIDNull() {
                this[this.tableDropdownSelection.ParentGUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyGUIDNull() {
                return this.IsNull(this.tableDropdownSelection.PropertyGUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyGUIDNull() {
                this[this.tableDropdownSelection.PropertyGUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionCodeNull() {
                return this.IsNull(this.tableDropdownSelection.SelectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionCodeNull() {
                this[this.tableDropdownSelection.SelectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionDescriptionNull() {
                return this.IsNull(this.tableDropdownSelection.SelectionDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionDescriptionNull() {
                this[this.tableDropdownSelection.SelectionDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BlotterRowChangeEvent : global::System.EventArgs {
            
            private BlotterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlotterRowChangeEvent(BlotterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlotterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetailedReportRowChangeEvent : global::System.EventArgs {
            
            private DetailedReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailedReportRowChangeEvent(DetailedReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailedReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IncidentAttachmentRowChangeEvent : global::System.EventArgs {
            
            private IncidentAttachmentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncidentAttachmentRowChangeEvent(IncidentAttachmentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncidentAttachmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubjectProfileRowChangeEvent : global::System.EventArgs {
            
            private SubjectProfileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectProfileRowChangeEvent(SubjectProfileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectProfileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _ConversionTmpRowChangeEvent : global::System.EventArgs {
            
            private _ConversionTmpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _ConversionTmpRowChangeEvent(_ConversionTmpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _ConversionTmpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BanWatchStatusRowChangeEvent : global::System.EventArgs {
            
            private BanWatchStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanWatchStatusRowChangeEvent(BanWatchStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanWatchStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubjectBanRowChangeEvent : global::System.EventArgs {
            
            private SubjectBanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectBanRowChangeEvent(SubjectBanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectBanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class iXData_SubjectProfileRowChangeEvent : global::System.EventArgs {
            
            private iXData_SubjectProfileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iXData_SubjectProfileRowChangeEvent(iXData_SubjectProfileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iXData_SubjectProfileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParticipantAssignmentRowChangeEvent : global::System.EventArgs {
            
            private ParticipantAssignmentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParticipantAssignmentRowChangeEvent(ParticipantAssignmentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParticipantAssignmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DropdownSelectionRowChangeEvent : global::System.EventArgs {
            
            private DropdownSelectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DropdownSelectionRowChangeEvent(DropdownSelectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DropdownSelectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace iTrak.Importer.Data.DataSetIXDataTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BlotterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BlotterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Blotter";
            tableMapping.ColumnMappings.Add("BlotterGUID", "BlotterGUID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Occured", "Occured");
            tableMapping.ColumnMappings.Add("BlotterAction", "BlotterAction");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Property", "Property");
            tableMapping.ColumnMappings.Add("Created", "Created");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("Archive", "Archive");
            tableMapping.ColumnMappings.Add("PrimaryOperator", "PrimaryOperator");
            tableMapping.ColumnMappings.Add("SecondaryOperator", "SecondaryOperator");
            tableMapping.ColumnMappings.Add("HighPriority", "HighPriority");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Sublocation", "Sublocation");
            tableMapping.ColumnMappings.Add("Location", "Location");
            tableMapping.ColumnMappings.Add("Exclusive", "Exclusive");
            tableMapping.ColumnMappings.Add("Synopsis", "Synopsis");
            tableMapping.ColumnMappings.Add("LastModifiedDate", "LastModifiedDate");
            tableMapping.ColumnMappings.Add("Reference", "Reference");
            tableMapping.ColumnMappings.Add("TimeStamp", "TimeStamp");
            tableMapping.ColumnMappings.Add("ModifiedBy", "ModifiedBy");
            tableMapping.ColumnMappings.Add("ArchiveDate", "ArchiveDate");
            tableMapping.ColumnMappings.Add("EndTime", "EndTime");
            tableMapping.ColumnMappings.Add("ClosedTime", "ClosedTime");
            tableMapping.ColumnMappings.Add("IsGlobal", "IsGlobal");
            tableMapping.ColumnMappings.Add("SourceModuleID", "SourceModuleID");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("SourceGUID", "SourceGUID");
            tableMapping.ColumnMappings.Add("LockedBySource", "LockedBySource");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Blotter] WHERE (([BlotterGUID] = @Original_BlotterGUID) AND ((" +
                "@IsNull_TimeStamp = 1 AND [TimeStamp] IS NULL) OR ([TimeStamp] = @Original_TimeS" +
                "tamp)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BlotterGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStamp", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Blotter] ([BlotterGUID], [Number], [Occured], [BlotterAction], [Subject], [Property], [Created], [Password], [Archive], [PrimaryOperator], [SecondaryOperator], [HighPriority], [Status], [Sublocation], [Location], [Exclusive], [Synopsis], [LastModifiedDate], [Reference], [ModifiedBy], [ArchiveDate], [EndTime], [ClosedTime], [IsGlobal], [SourceModuleID], [SourceID], [SourceGUID], [LockedBySource]) VALUES (@BlotterGUID, @Number, @Occured, @BlotterAction, @Subject, @Property, @Created, @Password, @Archive, @PrimaryOperator, @SecondaryOperator, @HighPriority, @Status, @Sublocation, @Location, @Exclusive, @Synopsis, @LastModifiedDate, @Reference, @ModifiedBy, @ArchiveDate, @EndTime, @ClosedTime, @IsGlobal, @SourceModuleID, @SourceID, @SourceGUID, @LockedBySource);
SELECT BlotterGUID, Number, Occured, BlotterAction, Subject, Property, Created, Password, Archive, PrimaryOperator, SecondaryOperator, HighPriority, Status, Sublocation, Location, Exclusive, Synopsis, LastModifiedDate, Reference, TimeStamp, ModifiedBy, ArchiveDate, EndTime, ClosedTime, IsGlobal, SourceModuleID, SourceID, SourceGUID, LockedBySource FROM Blotter WHERE (BlotterGUID = @BlotterGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BlotterGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occured", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occured", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BlotterAction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterAction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Subject", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subject", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Property", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Property", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Created", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Created", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Archive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Archive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrimaryOperator", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrimaryOperator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SecondaryOperator", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryOperator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HighPriority", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HighPriority", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sublocation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sublocation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Location", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Exclusive", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Exclusive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Synopsis", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Synopsis", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reference", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reference", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArchiveDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArchiveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClosedTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClosedTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGlobal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlobal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceModuleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SourceModuleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SourceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SourceGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LockedBySource", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LockedBySource", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Blotter] SET [BlotterGUID] = @BlotterGUID, [Number] = @Number, [Occured] = @Occured, [BlotterAction] = @BlotterAction, [Subject] = @Subject, [Property] = @Property, [Created] = @Created, [Password] = @Password, [Archive] = @Archive, [PrimaryOperator] = @PrimaryOperator, [SecondaryOperator] = @SecondaryOperator, [HighPriority] = @HighPriority, [Status] = @Status, [Sublocation] = @Sublocation, [Location] = @Location, [Exclusive] = @Exclusive, [Synopsis] = @Synopsis, [LastModifiedDate] = @LastModifiedDate, [Reference] = @Reference, [ModifiedBy] = @ModifiedBy, [ArchiveDate] = @ArchiveDate, [EndTime] = @EndTime, [ClosedTime] = @ClosedTime, [IsGlobal] = @IsGlobal, [SourceModuleID] = @SourceModuleID, [SourceID] = @SourceID, [SourceGUID] = @SourceGUID, [LockedBySource] = @LockedBySource WHERE (([BlotterGUID] = @Original_BlotterGUID) AND ((@IsNull_TimeStamp = 1 AND [TimeStamp] IS NULL) OR ([TimeStamp] = @Original_TimeStamp)));
SELECT BlotterGUID, Number, Occured, BlotterAction, Subject, Property, Created, Password, Archive, PrimaryOperator, SecondaryOperator, HighPriority, Status, Sublocation, Location, Exclusive, Synopsis, LastModifiedDate, Reference, TimeStamp, ModifiedBy, ArchiveDate, EndTime, ClosedTime, IsGlobal, SourceModuleID, SourceID, SourceGUID, LockedBySource FROM Blotter WHERE (BlotterGUID = @BlotterGUID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BlotterGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occured", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occured", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BlotterAction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterAction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Subject", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subject", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Property", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Property", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Created", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Created", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Archive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Archive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrimaryOperator", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrimaryOperator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SecondaryOperator", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryOperator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HighPriority", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HighPriority", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sublocation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sublocation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Location", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Exclusive", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Exclusive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Synopsis", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Synopsis", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reference", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reference", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArchiveDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArchiveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClosedTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClosedTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGlobal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlobal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceModuleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SourceModuleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SourceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SourceGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LockedBySource", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LockedBySource", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BlotterGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStamp", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT BlotterGUID, Number, Occured, BlotterAction, Subject, Property, Created, Password, Archive, PrimaryOperator, SecondaryOperator, HighPriority, Status, Sublocation, Location, Exclusive, Synopsis, LastModifiedDate, Reference, TimeStamp, ModifiedBy, ArchiveDate, EndTime, ClosedTime, IsGlobal, SourceModuleID, SourceID, SourceGUID, LockedBySource FROM dbo.Blotter";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.BlotterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.BlotterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.BlotterDataTable dataTable = new DataSetIXData.BlotterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.BlotterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "Blotter");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_BlotterGUID, byte[] Original_TimeStamp) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_BlotterGUID));
            if ((Original_TimeStamp == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_TimeStamp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid BlotterGUID, 
                    string Number, 
                    System.DateTime Occured, 
                    string BlotterAction, 
                    string Subject, 
                    global::System.Nullable<global::System.Guid> Property, 
                    System.DateTime Created, 
                    string Password, 
                    global::System.Nullable<bool> Archive, 
                    string PrimaryOperator, 
                    string SecondaryOperator, 
                    bool HighPriority, 
                    string Status, 
                    string Sublocation, 
                    string Location, 
                    string Exclusive, 
                    string Synopsis, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    string Reference, 
                    string ModifiedBy, 
                    global::System.Nullable<global::System.DateTime> ArchiveDate, 
                    global::System.Nullable<global::System.DateTime> EndTime, 
                    global::System.Nullable<global::System.DateTime> ClosedTime, 
                    bool IsGlobal, 
                    global::System.Nullable<int> SourceModuleID, 
                    string SourceID, 
                    global::System.Nullable<global::System.Guid> SourceGUID, 
                    global::System.Nullable<bool> LockedBySource) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(BlotterGUID));
            if ((Number == null)) {
                throw new global::System.ArgumentNullException("Number");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Number));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Occured));
            if ((BlotterAction == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BlotterAction));
            }
            if ((Subject == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((Property.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.Guid)(Property.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(Created));
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Password));
            }
            if ((Archive.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(Archive.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((PrimaryOperator == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PrimaryOperator));
            }
            if ((SecondaryOperator == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(SecondaryOperator));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(HighPriority));
            if ((Status == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Status));
            }
            if ((Sublocation == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Sublocation));
            }
            if ((Location == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Location));
            }
            if ((Exclusive == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Exclusive));
            }
            if ((Synopsis == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Synopsis));
            }
            if ((LastModifiedDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(LastModifiedDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Reference == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Reference));
            }
            if ((ModifiedBy == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(ModifiedBy));
            }
            if ((ArchiveDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((System.DateTime)(ArchiveDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((EndTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((System.DateTime)(EndTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((ClosedTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((System.DateTime)(ClosedTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[23].Value = ((bool)(IsGlobal));
            if ((SourceModuleID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(SourceModuleID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((SourceID == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(SourceID));
            }
            if ((SourceGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((System.Guid)(SourceGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((LockedBySource.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((bool)(LockedBySource.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid BlotterGUID, 
                    string Number, 
                    System.DateTime Occured, 
                    string BlotterAction, 
                    string Subject, 
                    global::System.Nullable<global::System.Guid> Property, 
                    System.DateTime Created, 
                    string Password, 
                    global::System.Nullable<bool> Archive, 
                    string PrimaryOperator, 
                    string SecondaryOperator, 
                    bool HighPriority, 
                    string Status, 
                    string Sublocation, 
                    string Location, 
                    string Exclusive, 
                    string Synopsis, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    string Reference, 
                    string ModifiedBy, 
                    global::System.Nullable<global::System.DateTime> ArchiveDate, 
                    global::System.Nullable<global::System.DateTime> EndTime, 
                    global::System.Nullable<global::System.DateTime> ClosedTime, 
                    bool IsGlobal, 
                    global::System.Nullable<int> SourceModuleID, 
                    string SourceID, 
                    global::System.Nullable<global::System.Guid> SourceGUID, 
                    global::System.Nullable<bool> LockedBySource, 
                    System.Guid Original_BlotterGUID, 
                    byte[] Original_TimeStamp) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(BlotterGUID));
            if ((Number == null)) {
                throw new global::System.ArgumentNullException("Number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Number));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Occured));
            if ((BlotterAction == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BlotterAction));
            }
            if ((Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((Property.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Property.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Created));
            if ((Password == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Password));
            }
            if ((Archive.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Archive.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((PrimaryOperator == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PrimaryOperator));
            }
            if ((SecondaryOperator == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(SecondaryOperator));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(HighPriority));
            if ((Status == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Status));
            }
            if ((Sublocation == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Sublocation));
            }
            if ((Location == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Location));
            }
            if ((Exclusive == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Exclusive));
            }
            if ((Synopsis == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Synopsis));
            }
            if ((LastModifiedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(LastModifiedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Reference == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Reference));
            }
            if ((ModifiedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(ModifiedBy));
            }
            if ((ArchiveDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(ArchiveDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((EndTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(EndTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((ClosedTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(ClosedTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(IsGlobal));
            if ((SourceModuleID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(SourceModuleID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((SourceID == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(SourceID));
            }
            if ((SourceGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.Guid)(SourceGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((LockedBySource.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(LockedBySource.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((System.Guid)(Original_BlotterGUID));
            if ((Original_TimeStamp == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((byte[])(Original_TimeStamp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Number, 
                    System.DateTime Occured, 
                    string BlotterAction, 
                    string Subject, 
                    global::System.Nullable<global::System.Guid> Property, 
                    System.DateTime Created, 
                    string Password, 
                    global::System.Nullable<bool> Archive, 
                    string PrimaryOperator, 
                    string SecondaryOperator, 
                    bool HighPriority, 
                    string Status, 
                    string Sublocation, 
                    string Location, 
                    string Exclusive, 
                    string Synopsis, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    string Reference, 
                    string ModifiedBy, 
                    global::System.Nullable<global::System.DateTime> ArchiveDate, 
                    global::System.Nullable<global::System.DateTime> EndTime, 
                    global::System.Nullable<global::System.DateTime> ClosedTime, 
                    bool IsGlobal, 
                    global::System.Nullable<int> SourceModuleID, 
                    string SourceID, 
                    global::System.Nullable<global::System.Guid> SourceGUID, 
                    global::System.Nullable<bool> LockedBySource, 
                    System.Guid Original_BlotterGUID, 
                    byte[] Original_TimeStamp) {
            return this.Update(Original_BlotterGUID, Number, Occured, BlotterAction, Subject, Property, Created, Password, Archive, PrimaryOperator, SecondaryOperator, HighPriority, Status, Sublocation, Location, Exclusive, Synopsis, LastModifiedDate, Reference, ModifiedBy, ArchiveDate, EndTime, ClosedTime, IsGlobal, SourceModuleID, SourceID, SourceGUID, LockedBySource, Original_BlotterGUID, Original_TimeStamp);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DetailedReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DetailedReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DetailedReport";
            tableMapping.ColumnMappings.Add("DetailedReportGUID", "DetailedReportGUID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("BlotterGUID", "BlotterGUID");
            tableMapping.ColumnMappings.Add("Occured", "Occured");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("AmbulanceOffered", "AmbulanceOffered");
            tableMapping.ColumnMappings.Add("AmbulanceDeclined", "AmbulanceDeclined");
            tableMapping.ColumnMappings.Add("FirstAidOffered", "FirstAidOffered");
            tableMapping.ColumnMappings.Add("FirstAidDeclined", "FirstAidDeclined");
            tableMapping.ColumnMappings.Add("TaxiFareOffered", "TaxiFareOffered");
            tableMapping.ColumnMappings.Add("TaxiFareDeclined", "TaxiFareDeclined");
            tableMapping.ColumnMappings.Add("ClosedBy", "ClosedBy");
            tableMapping.ColumnMappings.Add("Closed", "Closed");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("Archive", "Archive");
            tableMapping.ColumnMappings.Add("Created", "Created");
            tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Specific", "Specific");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("Exclusive", "Exclusive");
            tableMapping.ColumnMappings.Add("SecondaryOperator", "SecondaryOperator");
            tableMapping.ColumnMappings.Add("Details", "Details");
            tableMapping.ColumnMappings.Add("ClosingRemarks", "ClosingRemarks");
            tableMapping.ColumnMappings.Add("LastModifiedDate", "LastModifiedDate");
            tableMapping.ColumnMappings.Add("TimeStamp", "TimeStamp");
            tableMapping.ColumnMappings.Add("ExecutiveBrief", "ExecutiveBrief");
            tableMapping.ColumnMappings.Add("ModifiedBy", "ModifiedBy");
            tableMapping.ColumnMappings.Add("ArchiveDate", "ArchiveDate");
            tableMapping.ColumnMappings.Add("IsGlobal", "IsGlobal");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DetailedReport] WHERE (([DetailedReportGUID] = @Original_Detai" +
                "ledReportGUID) AND ((@IsNull_TimeStamp = 1 AND [TimeStamp] IS NULL) OR ([TimeSta" +
                "mp] = @Original_TimeStamp)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStamp", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DetailedReport] ([DetailedReportGUID], [Number], [BlotterGUID], [Occured], [Status], [AmbulanceOffered], [AmbulanceDeclined], [FirstAidOffered], [FirstAidDeclined], [TaxiFareOffered], [TaxiFareDeclined], [ClosedBy], [Closed], [Password], [Archive], [Created], [CreatedBy], [Type], [Specific], [Category], [Exclusive], [SecondaryOperator], [Details], [ClosingRemarks], [LastModifiedDate], [ExecutiveBrief], [ModifiedBy], [ArchiveDate], [IsGlobal]) VALUES (@DetailedReportGUID, @Number, @BlotterGUID, @Occured, @Status, @AmbulanceOffered, @AmbulanceDeclined, @FirstAidOffered, @FirstAidDeclined, @TaxiFareOffered, @TaxiFareDeclined, @ClosedBy, @Closed, @Password, @Archive, @Created, @CreatedBy, @Type, @Specific, @Category, @Exclusive, @SecondaryOperator, @Details, @ClosingRemarks, @LastModifiedDate, @ExecutiveBrief, @ModifiedBy, @ArchiveDate, @IsGlobal);
SELECT DetailedReportGUID, Number, BlotterGUID, Occured, Status, AmbulanceOffered, AmbulanceDeclined, FirstAidOffered, FirstAidDeclined, TaxiFareOffered, TaxiFareDeclined, ClosedBy, Closed, Password, Archive, Created, CreatedBy, Type, Specific, Category, Exclusive, SecondaryOperator, Details, ClosingRemarks, LastModifiedDate, TimeStamp, ExecutiveBrief, ModifiedBy, ArchiveDate, IsGlobal FROM DetailedReport WHERE (DetailedReportGUID = @DetailedReportGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BlotterGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occured", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occured", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AmbulanceOffered", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AmbulanceOffered", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AmbulanceDeclined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AmbulanceDeclined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstAidOffered", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstAidOffered", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstAidDeclined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstAidDeclined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TaxiFareOffered", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxiFareOffered", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TaxiFareDeclined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxiFareDeclined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClosedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClosedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Closed", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Closed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Archive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Archive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Created", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Created", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Specific", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Specific", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Exclusive", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Exclusive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SecondaryOperator", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryOperator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Details", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Details", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClosingRemarks", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClosingRemarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExecutiveBrief", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ExecutiveBrief", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArchiveDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArchiveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGlobal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlobal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DetailedReport] SET [DetailedReportGUID] = @DetailedReportGUID, [Nu" +
                "mber] = @Number, [BlotterGUID] = @BlotterGUID, [Occured] = @Occured, [Status] = " +
                "@Status, [AmbulanceOffered] = @AmbulanceOffered, [AmbulanceDeclined] = @Ambulanc" +
                "eDeclined, [FirstAidOffered] = @FirstAidOffered, [FirstAidDeclined] = @FirstAidD" +
                "eclined, [TaxiFareOffered] = @TaxiFareOffered, [TaxiFareDeclined] = @TaxiFareDec" +
                "lined, [ClosedBy] = @ClosedBy, [Closed] = @Closed, [Password] = @Password, [Arch" +
                "ive] = @Archive, [Created] = @Created, [CreatedBy] = @CreatedBy, [Type] = @Type," +
                " [Specific] = @Specific, [Category] = @Category, [Exclusive] = @Exclusive, [Seco" +
                "ndaryOperator] = @SecondaryOperator, [Details] = @Details, [ClosingRemarks] = @C" +
                "losingRemarks, [LastModifiedDate] = @LastModifiedDate, [ExecutiveBrief] = @Execu" +
                "tiveBrief, [ModifiedBy] = @ModifiedBy, [ArchiveDate] = @ArchiveDate, [IsGlobal] " +
                "= @IsGlobal WHERE (([DetailedReportGUID] = @Original_DetailedReportGUID) AND ((@" +
                "IsNull_TimeStamp = 1 AND [TimeStamp] IS NULL) OR ([TimeStamp] = @Original_TimeSt" +
                "amp)));\r\nSELECT DetailedReportGUID, Number, BlotterGUID, Occured, Status, Ambula" +
                "nceOffered, AmbulanceDeclined, FirstAidOffered, FirstAidDeclined, TaxiFareOffere" +
                "d, TaxiFareDeclined, ClosedBy, Closed, Password, Archive, Created, CreatedBy, Ty" +
                "pe, Specific, Category, Exclusive, SecondaryOperator, Details, ClosingRemarks, L" +
                "astModifiedDate, TimeStamp, ExecutiveBrief, ModifiedBy, ArchiveDate, IsGlobal FR" +
                "OM DetailedReport WHERE (DetailedReportGUID = @DetailedReportGUID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BlotterGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BlotterGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occured", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occured", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AmbulanceOffered", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AmbulanceOffered", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AmbulanceDeclined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AmbulanceDeclined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstAidOffered", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstAidOffered", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstAidDeclined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstAidDeclined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TaxiFareOffered", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxiFareOffered", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TaxiFareDeclined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxiFareDeclined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClosedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClosedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Closed", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Closed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Archive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Archive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Created", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Created", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Specific", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Specific", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Exclusive", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Exclusive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SecondaryOperator", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryOperator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Details", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Details", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClosingRemarks", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClosingRemarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExecutiveBrief", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ExecutiveBrief", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArchiveDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArchiveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGlobal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlobal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStamp", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT DetailedReportGUID, Number, BlotterGUID, Occured, Status, AmbulanceOffered, AmbulanceDeclined, FirstAidOffered, FirstAidDeclined, TaxiFareOffered, TaxiFareDeclined, ClosedBy, Closed, Password, Archive, Created, CreatedBy, Type, Specific, Category, Exclusive, SecondaryOperator, Details, ClosingRemarks, LastModifiedDate, TimeStamp, ExecutiveBrief, ModifiedBy, ArchiveDate, IsGlobal FROM dbo.DetailedReport";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.DetailedReportDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.DetailedReportDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.DetailedReportDataTable dataTable = new DataSetIXData.DetailedReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.DetailedReportDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "DetailedReport");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_DetailedReportGUID, byte[] Original_TimeStamp) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_DetailedReportGUID));
            if ((Original_TimeStamp == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_TimeStamp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid DetailedReportGUID, 
                    string Number, 
                    System.Guid BlotterGUID, 
                    System.DateTime Occured, 
                    string Status, 
                    bool AmbulanceOffered, 
                    bool AmbulanceDeclined, 
                    bool FirstAidOffered, 
                    bool FirstAidDeclined, 
                    bool TaxiFareOffered, 
                    bool TaxiFareDeclined, 
                    string ClosedBy, 
                    global::System.Nullable<global::System.DateTime> Closed, 
                    string Password, 
                    global::System.Nullable<bool> Archive, 
                    System.DateTime Created, 
                    string CreatedBy, 
                    string Type, 
                    string Specific, 
                    string Category, 
                    string Exclusive, 
                    string SecondaryOperator, 
                    string Details, 
                    string ClosingRemarks, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    string ExecutiveBrief, 
                    string ModifiedBy, 
                    global::System.Nullable<global::System.DateTime> ArchiveDate, 
                    bool IsGlobal) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(DetailedReportGUID));
            if ((Number == null)) {
                throw new global::System.ArgumentNullException("Number");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Number));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(BlotterGUID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Occured));
            if ((Status == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Status));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(AmbulanceOffered));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(AmbulanceDeclined));
            this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(FirstAidOffered));
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(FirstAidDeclined));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(TaxiFareOffered));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(TaxiFareDeclined));
            if ((ClosedBy == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ClosedBy));
            }
            if ((Closed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(Closed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Password));
            }
            if ((Archive.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(Archive.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(Created));
            if ((CreatedBy == null)) {
                throw new global::System.ArgumentNullException("CreatedBy");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(CreatedBy));
            }
            if ((Type == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Type));
            }
            if ((Specific == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Specific));
            }
            if ((Category == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Category));
            }
            if ((Exclusive == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Exclusive));
            }
            if ((SecondaryOperator == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(SecondaryOperator));
            }
            if ((Details == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Details));
            }
            if ((ClosingRemarks == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(ClosingRemarks));
            }
            if ((LastModifiedDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(LastModifiedDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((ExecutiveBrief == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(ExecutiveBrief));
            }
            if ((ModifiedBy == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(ModifiedBy));
            }
            if ((ArchiveDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((System.DateTime)(ArchiveDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[28].Value = ((bool)(IsGlobal));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid DetailedReportGUID, 
                    string Number, 
                    System.Guid BlotterGUID, 
                    System.DateTime Occured, 
                    string Status, 
                    bool AmbulanceOffered, 
                    bool AmbulanceDeclined, 
                    bool FirstAidOffered, 
                    bool FirstAidDeclined, 
                    bool TaxiFareOffered, 
                    bool TaxiFareDeclined, 
                    string ClosedBy, 
                    global::System.Nullable<global::System.DateTime> Closed, 
                    string Password, 
                    global::System.Nullable<bool> Archive, 
                    System.DateTime Created, 
                    string CreatedBy, 
                    string Type, 
                    string Specific, 
                    string Category, 
                    string Exclusive, 
                    string SecondaryOperator, 
                    string Details, 
                    string ClosingRemarks, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    string ExecutiveBrief, 
                    string ModifiedBy, 
                    global::System.Nullable<global::System.DateTime> ArchiveDate, 
                    bool IsGlobal, 
                    System.Guid Original_DetailedReportGUID, 
                    byte[] Original_TimeStamp) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(DetailedReportGUID));
            if ((Number == null)) {
                throw new global::System.ArgumentNullException("Number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Number));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(BlotterGUID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Occured));
            if ((Status == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Status));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(AmbulanceOffered));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(AmbulanceDeclined));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(FirstAidOffered));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(FirstAidDeclined));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(TaxiFareOffered));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(TaxiFareDeclined));
            if ((ClosedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ClosedBy));
            }
            if ((Closed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Closed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Password == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Password));
            }
            if ((Archive.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(Archive.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Created));
            if ((CreatedBy == null)) {
                throw new global::System.ArgumentNullException("CreatedBy");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(CreatedBy));
            }
            if ((Type == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Type));
            }
            if ((Specific == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Specific));
            }
            if ((Category == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Category));
            }
            if ((Exclusive == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Exclusive));
            }
            if ((SecondaryOperator == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(SecondaryOperator));
            }
            if ((Details == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Details));
            }
            if ((ClosingRemarks == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(ClosingRemarks));
            }
            if ((LastModifiedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(LastModifiedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((ExecutiveBrief == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(ExecutiveBrief));
            }
            if ((ModifiedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(ModifiedBy));
            }
            if ((ArchiveDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(ArchiveDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(IsGlobal));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((System.Guid)(Original_DetailedReportGUID));
            if ((Original_TimeStamp == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((byte[])(Original_TimeStamp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Number, 
                    System.Guid BlotterGUID, 
                    System.DateTime Occured, 
                    string Status, 
                    bool AmbulanceOffered, 
                    bool AmbulanceDeclined, 
                    bool FirstAidOffered, 
                    bool FirstAidDeclined, 
                    bool TaxiFareOffered, 
                    bool TaxiFareDeclined, 
                    string ClosedBy, 
                    global::System.Nullable<global::System.DateTime> Closed, 
                    string Password, 
                    global::System.Nullable<bool> Archive, 
                    System.DateTime Created, 
                    string CreatedBy, 
                    string Type, 
                    string Specific, 
                    string Category, 
                    string Exclusive, 
                    string SecondaryOperator, 
                    string Details, 
                    string ClosingRemarks, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    string ExecutiveBrief, 
                    string ModifiedBy, 
                    global::System.Nullable<global::System.DateTime> ArchiveDate, 
                    bool IsGlobal, 
                    System.Guid Original_DetailedReportGUID, 
                    byte[] Original_TimeStamp) {
            return this.Update(Original_DetailedReportGUID, Number, BlotterGUID, Occured, Status, AmbulanceOffered, AmbulanceDeclined, FirstAidOffered, FirstAidDeclined, TaxiFareOffered, TaxiFareDeclined, ClosedBy, Closed, Password, Archive, Created, CreatedBy, Type, Specific, Category, Exclusive, SecondaryOperator, Details, ClosingRemarks, LastModifiedDate, ExecutiveBrief, ModifiedBy, ArchiveDate, IsGlobal, Original_DetailedReportGUID, Original_TimeStamp);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IncidentAttachmentTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IncidentAttachmentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IncidentAttachment";
            tableMapping.ColumnMappings.Add("IncidentAttachment", "IncidentAttachment");
            tableMapping.ColumnMappings.Add("DetailedReportGUID", "DetailedReportGUID");
            tableMapping.ColumnMappings.Add("Attached", "Attached");
            tableMapping.ColumnMappings.Add("AttachedmentData", "AttachedmentData");
            tableMapping.ColumnMappings.Add("OriginalFilename", "OriginalFilename");
            tableMapping.ColumnMappings.Add("AttachedBy", "AttachedBy");
            tableMapping.ColumnMappings.Add("Thumbnail", "Thumbnail");
            tableMapping.ColumnMappings.Add("AttachedType", "AttachedType");
            tableMapping.ColumnMappings.Add("AttachmentSize", "AttachmentSize");
            tableMapping.ColumnMappings.Add("Linked", "Linked");
            tableMapping.ColumnMappings.Add("DigitalSignature", "DigitalSignature");
            tableMapping.ColumnMappings.Add("DataProviderType", "DataProviderType");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("LastModifiedDate", "LastModifiedDate");
            tableMapping.ColumnMappings.Add("ServerCreateDate", "ServerCreateDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IncidentAttachment] WHERE (([IncidentAttachment] = @Original_IncidentAttachment) AND ([DetailedReportGUID] = @Original_DetailedReportGUID) AND ([Attached] = @Original_Attached) AND ([OriginalFilename] = @Original_OriginalFilename) AND ([AttachedBy] = @Original_AttachedBy) AND ((@IsNull_AttachedType = 1 AND [AttachedType] IS NULL) OR ([AttachedType] = @Original_AttachedType)) AND ((@IsNull_AttachmentSize = 1 AND [AttachmentSize] IS NULL) OR ([AttachmentSize] = @Original_AttachmentSize)) AND ([Linked] = @Original_Linked) AND ([DataProviderType] = @Original_DataProviderType) AND ([Deleted] = @Original_Deleted) AND ((@IsNull_LastModifiedDate = 1 AND [LastModifiedDate] IS NULL) OR ([LastModifiedDate] = @Original_LastModifiedDate)) AND ((@IsNull_ServerCreateDate = 1 AND [ServerCreateDate] IS NULL) OR ([ServerCreateDate] = @Original_ServerCreateDate)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IncidentAttachment", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IncidentAttachment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Attached", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Attached", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalFilename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AttachedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AttachedType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AttachedType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AttachmentSize", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachmentSize", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AttachmentSize", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachmentSize", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Linked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linked", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DataProviderType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataProviderType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastModifiedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServerCreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerCreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServerCreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerCreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IncidentAttachment] ([IncidentAttachment], [DetailedReportGUID], [Attached], [AttachedmentData], [OriginalFilename], [AttachedBy], [Thumbnail], [AttachedType], [AttachmentSize], [Linked], [DigitalSignature], [DataProviderType], [Deleted], [LastModifiedDate], [ServerCreateDate]) VALUES (@IncidentAttachment, @DetailedReportGUID, @Attached, @AttachedmentData, @OriginalFilename, @AttachedBy, @Thumbnail, @AttachedType, @AttachmentSize, @Linked, @DigitalSignature, @DataProviderType, @Deleted, @LastModifiedDate, @ServerCreateDate);
SELECT IncidentAttachment, DetailedReportGUID, Attached, AttachedmentData, OriginalFilename, AttachedBy, Thumbnail, AttachedType, AttachmentSize, Linked, DigitalSignature, DataProviderType, Deleted, LastModifiedDate, ServerCreateDate FROM IncidentAttachment WHERE (IncidentAttachment = @IncidentAttachment)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IncidentAttachment", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IncidentAttachment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Attached", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Attached", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachedmentData", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedmentData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalFilename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Thumbnail", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Thumbnail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachedType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachmentSize", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachmentSize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Linked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DigitalSignature", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DigitalSignature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DataProviderType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataProviderType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServerCreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerCreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[IncidentAttachment] SET [IncidentAttachment] = @IncidentAttachment," +
                " [DetailedReportGUID] = @DetailedReportGUID, [Attached] = @Attached, [Attachedme" +
                "ntData] = @AttachedmentData, [OriginalFilename] = @OriginalFilename, [AttachedBy" +
                "] = @AttachedBy, [Thumbnail] = @Thumbnail, [AttachedType] = @AttachedType, [Atta" +
                "chmentSize] = @AttachmentSize, [Linked] = @Linked, [DigitalSignature] = @Digital" +
                "Signature, [DataProviderType] = @DataProviderType, [Deleted] = @Deleted, [LastMo" +
                "difiedDate] = @LastModifiedDate, [ServerCreateDate] = @ServerCreateDate WHERE ((" +
                "[IncidentAttachment] = @Original_IncidentAttachment) AND ([DetailedReportGUID] =" +
                " @Original_DetailedReportGUID) AND ([Attached] = @Original_Attached) AND ([Origi" +
                "nalFilename] = @Original_OriginalFilename) AND ([AttachedBy] = @Original_Attache" +
                "dBy) AND ((@IsNull_AttachedType = 1 AND [AttachedType] IS NULL) OR ([AttachedTyp" +
                "e] = @Original_AttachedType)) AND ((@IsNull_AttachmentSize = 1 AND [AttachmentSi" +
                "ze] IS NULL) OR ([AttachmentSize] = @Original_AttachmentSize)) AND ([Linked] = @" +
                "Original_Linked) AND ([DataProviderType] = @Original_DataProviderType) AND ([Del" +
                "eted] = @Original_Deleted) AND ((@IsNull_LastModifiedDate = 1 AND [LastModifiedD" +
                "ate] IS NULL) OR ([LastModifiedDate] = @Original_LastModifiedDate)) AND ((@IsNul" +
                "l_ServerCreateDate = 1 AND [ServerCreateDate] IS NULL) OR ([ServerCreateDate] = " +
                "@Original_ServerCreateDate)));\r\nSELECT IncidentAttachment, DetailedReportGUID, A" +
                "ttached, AttachedmentData, OriginalFilename, AttachedBy, Thumbnail, AttachedType" +
                ", AttachmentSize, Linked, DigitalSignature, DataProviderType, Deleted, LastModif" +
                "iedDate, ServerCreateDate FROM IncidentAttachment WHERE (IncidentAttachment = @I" +
                "ncidentAttachment)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IncidentAttachment", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IncidentAttachment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Attached", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Attached", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachedmentData", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedmentData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalFilename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Thumbnail", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Thumbnail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachedType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AttachmentSize", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachmentSize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Linked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DigitalSignature", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DigitalSignature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DataProviderType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataProviderType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServerCreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerCreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IncidentAttachment", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IncidentAttachment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Attached", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Attached", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalFilename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AttachedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AttachedType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AttachedType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachedType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AttachmentSize", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachmentSize", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AttachmentSize", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AttachmentSize", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Linked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linked", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DataProviderType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataProviderType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastModifiedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModifiedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServerCreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerCreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServerCreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerCreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT IncidentAttachment, DetailedReportGUID, Attached, AttachedmentData, OriginalFilename, AttachedBy, Thumbnail, AttachedType, AttachmentSize, Linked, DigitalSignature, DataProviderType, Deleted, LastModifiedDate, ServerCreateDate FROM dbo.IncidentAttachment";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.IncidentAttachmentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.IncidentAttachmentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.IncidentAttachmentDataTable dataTable = new DataSetIXData.IncidentAttachmentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.IncidentAttachmentDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "IncidentAttachment");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_IncidentAttachment, System.Guid Original_DetailedReportGUID, System.DateTime Original_Attached, string Original_OriginalFilename, string Original_AttachedBy, string Original_AttachedType, global::System.Nullable<long> Original_AttachmentSize, bool Original_Linked, int Original_DataProviderType, bool Original_Deleted, global::System.Nullable<global::System.DateTime> Original_LastModifiedDate, global::System.Nullable<global::System.DateTime> Original_ServerCreateDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_IncidentAttachment));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_DetailedReportGUID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_Attached));
            if ((Original_OriginalFilename == null)) {
                throw new global::System.ArgumentNullException("Original_OriginalFilename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_OriginalFilename));
            }
            if ((Original_AttachedBy == null)) {
                throw new global::System.ArgumentNullException("Original_AttachedBy");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_AttachedBy));
            }
            if ((Original_AttachedType == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_AttachedType));
            }
            if ((Original_AttachmentSize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_AttachmentSize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_Linked));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_DataProviderType));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_Deleted));
            if ((Original_LastModifiedDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((System.DateTime)(Original_LastModifiedDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_ServerCreateDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((System.DateTime)(Original_ServerCreateDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid IncidentAttachment, System.Guid DetailedReportGUID, System.DateTime Attached, byte[] AttachedmentData, string OriginalFilename, string AttachedBy, byte[] Thumbnail, string AttachedType, global::System.Nullable<long> AttachmentSize, bool Linked, byte[] DigitalSignature, int DataProviderType, bool Deleted, global::System.Nullable<global::System.DateTime> LastModifiedDate, global::System.Nullable<global::System.DateTime> ServerCreateDate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(IncidentAttachment));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(DetailedReportGUID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Attached));
            if ((AttachedmentData == null)) {
                throw new global::System.ArgumentNullException("AttachedmentData");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((byte[])(AttachedmentData));
            }
            if ((OriginalFilename == null)) {
                throw new global::System.ArgumentNullException("OriginalFilename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(OriginalFilename));
            }
            if ((AttachedBy == null)) {
                throw new global::System.ArgumentNullException("AttachedBy");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(AttachedBy));
            }
            if ((Thumbnail == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((byte[])(Thumbnail));
            }
            if ((AttachedType == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(AttachedType));
            }
            if ((AttachmentSize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((long)(AttachmentSize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(Linked));
            if ((DigitalSignature == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((byte[])(DigitalSignature));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(DataProviderType));
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(Deleted));
            if ((LastModifiedDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(LastModifiedDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ServerCreateDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(ServerCreateDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid IncidentAttachment, 
                    System.Guid DetailedReportGUID, 
                    System.DateTime Attached, 
                    byte[] AttachedmentData, 
                    string OriginalFilename, 
                    string AttachedBy, 
                    byte[] Thumbnail, 
                    string AttachedType, 
                    global::System.Nullable<long> AttachmentSize, 
                    bool Linked, 
                    byte[] DigitalSignature, 
                    int DataProviderType, 
                    bool Deleted, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    global::System.Nullable<global::System.DateTime> ServerCreateDate, 
                    System.Guid Original_IncidentAttachment, 
                    System.Guid Original_DetailedReportGUID, 
                    System.DateTime Original_Attached, 
                    string Original_OriginalFilename, 
                    string Original_AttachedBy, 
                    string Original_AttachedType, 
                    global::System.Nullable<long> Original_AttachmentSize, 
                    bool Original_Linked, 
                    int Original_DataProviderType, 
                    bool Original_Deleted, 
                    global::System.Nullable<global::System.DateTime> Original_LastModifiedDate, 
                    global::System.Nullable<global::System.DateTime> Original_ServerCreateDate) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(IncidentAttachment));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(DetailedReportGUID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Attached));
            if ((AttachedmentData == null)) {
                throw new global::System.ArgumentNullException("AttachedmentData");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(AttachedmentData));
            }
            if ((OriginalFilename == null)) {
                throw new global::System.ArgumentNullException("OriginalFilename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(OriginalFilename));
            }
            if ((AttachedBy == null)) {
                throw new global::System.ArgumentNullException("AttachedBy");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(AttachedBy));
            }
            if ((Thumbnail == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte[])(Thumbnail));
            }
            if ((AttachedType == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(AttachedType));
            }
            if ((AttachmentSize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(AttachmentSize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Linked));
            if ((DigitalSignature == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((byte[])(DigitalSignature));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(DataProviderType));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Deleted));
            if ((LastModifiedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(LastModifiedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ServerCreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(ServerCreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.Guid)(Original_IncidentAttachment));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.Guid)(Original_DetailedReportGUID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_Attached));
            if ((Original_OriginalFilename == null)) {
                throw new global::System.ArgumentNullException("Original_OriginalFilename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_OriginalFilename));
            }
            if ((Original_AttachedBy == null)) {
                throw new global::System.ArgumentNullException("Original_AttachedBy");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_AttachedBy));
            }
            if ((Original_AttachedType == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_AttachedType));
            }
            if ((Original_AttachmentSize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_AttachmentSize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_Linked));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_DataProviderType));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(Original_Deleted));
            if ((Original_LastModifiedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_LastModifiedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_ServerCreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((System.DateTime)(Original_ServerCreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid DetailedReportGUID, 
                    System.DateTime Attached, 
                    byte[] AttachedmentData, 
                    string OriginalFilename, 
                    string AttachedBy, 
                    byte[] Thumbnail, 
                    string AttachedType, 
                    global::System.Nullable<long> AttachmentSize, 
                    bool Linked, 
                    byte[] DigitalSignature, 
                    int DataProviderType, 
                    bool Deleted, 
                    global::System.Nullable<global::System.DateTime> LastModifiedDate, 
                    global::System.Nullable<global::System.DateTime> ServerCreateDate, 
                    System.Guid Original_IncidentAttachment, 
                    System.Guid Original_DetailedReportGUID, 
                    System.DateTime Original_Attached, 
                    string Original_OriginalFilename, 
                    string Original_AttachedBy, 
                    string Original_AttachedType, 
                    global::System.Nullable<long> Original_AttachmentSize, 
                    bool Original_Linked, 
                    int Original_DataProviderType, 
                    bool Original_Deleted, 
                    global::System.Nullable<global::System.DateTime> Original_LastModifiedDate, 
                    global::System.Nullable<global::System.DateTime> Original_ServerCreateDate) {
            return this.Update(Original_IncidentAttachment, DetailedReportGUID, Attached, AttachedmentData, OriginalFilename, AttachedBy, Thumbnail, AttachedType, AttachmentSize, Linked, DigitalSignature, DataProviderType, Deleted, LastModifiedDate, ServerCreateDate, Original_IncidentAttachment, Original_DetailedReportGUID, Original_Attached, Original_OriginalFilename, Original_AttachedBy, Original_AttachedType, Original_AttachmentSize, Original_Linked, Original_DataProviderType, Original_Deleted, Original_LastModifiedDate, Original_ServerCreateDate);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SubjectProfileTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SubjectProfileTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SubjectProfile";
            tableMapping.ColumnMappings.Add("SubjectGUID", "SubjectGUID");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("Gender", "Gender");
            tableMapping.ColumnMappings.Add("DateOfBirth", "DateOfBirth");
            tableMapping.ColumnMappings.Add("AgeRangeLower", "AgeRangeLower");
            tableMapping.ColumnMappings.Add("AgeRangeUpper", "AgeRangeUpper");
            tableMapping.ColumnMappings.Add("Height", "Height");
            tableMapping.ColumnMappings.Add("Weight", "Weight");
            tableMapping.ColumnMappings.Add("HairColour", "HairColour");
            tableMapping.ColumnMappings.Add("EyeColour", "EyeColour");
            tableMapping.ColumnMappings.Add("Race", "Race");
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated");
            tableMapping.ColumnMappings.Add("DateModified", "DateModified");
            tableMapping.ColumnMappings.Add("CreatoruserID", "CreatoruserID");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("PropertyGUID", "PropertyGUID");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("LastIncidentDate", "LastIncidentDate");
            tableMapping.ColumnMappings.Add("FRSAcSysUserID", "FRSAcSysUserID");
            tableMapping.ColumnMappings.Add("Exclusive", "Exclusive");
            tableMapping.ColumnMappings.Add("BestAssetGUID", "BestAssetGUID");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("Activities", "Activities");
            tableMapping.ColumnMappings.Add("Specifics", "Specifics");
            tableMapping.ColumnMappings.Add("Groups", "Groups");
            tableMapping.ColumnMappings.Add("Aliases", "Aliases");
            tableMapping.ColumnMappings.Add("Traits", "Traits");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone");
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("ClientID", "ClientID");
            tableMapping.ColumnMappings.Add("SINNumber", "SINNumber");
            tableMapping.ColumnMappings.Add("Occupation", "Occupation");
            tableMapping.ColumnMappings.Add("DriversLicenseNum", "DriversLicenseNum");
            tableMapping.ColumnMappings.Add("TimeStamp", "TimeStamp");
            tableMapping.ColumnMappings.Add("DigitalSignature", "DigitalSignature");
            tableMapping.ColumnMappings.Add("DataProviderType", "DataProviderType");
            tableMapping.ColumnMappings.Add("SubjectId", "SubjectId");
            tableMapping.ColumnMappings.Add("ModifiedBy", "ModifiedBy");
            tableMapping.ColumnMappings.Add("Custom1", "Custom1");
            tableMapping.ColumnMappings.Add("Custom2", "Custom2");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("PassportNumber", "PassportNumber");
            tableMapping.ColumnMappings.Add("BusinessFaxNumber", "BusinessFaxNumber");
            tableMapping.ColumnMappings.Add("WebAddress", "WebAddress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SubjectProfile] WHERE (([SubjectGUID] = @Original_SubjectGUID)" +
                " AND ((@IsNull_TimeStamp = 1 AND [TimeStamp] IS NULL) OR ([TimeStamp] = @Origina" +
                "l_TimeStamp)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStamp", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SubjectProfile] ([SubjectGUID], [FirstName], [MiddleName], [La" +
                "stName], [Gender], [DateOfBirth], [AgeRangeLower], [AgeRangeUpper], [Height], [W" +
                "eight], [HairColour], [EyeColour], [Race], [DateCreated], [DateModified], [Creat" +
                "oruserID], [Password], [PropertyGUID], [Comment], [LastIncidentDate], [FRSAcSysU" +
                "serID], [Exclusive], [BestAssetGUID], [Category], [Activities], [Specifics], [Gr" +
                "oups], [Aliases], [Traits], [Address], [City], [State], [PostalCode], [Country]," +
                " [HomePhone], [WorkPhone], [Email], [ClientID], [SINNumber], [Occupation], [Driv" +
                "ersLicenseNum], [DigitalSignature], [DataProviderType], [ModifiedBy], [Custom1]," +
                " [Custom2], [CompanyName], [PassportNumber], [BusinessFaxNumber], [WebAddress]) " +
                "VALUES (@SubjectGUID, @FirstName, @MiddleName, @LastName, @Gender, @DateOfBirth," +
                " @AgeRangeLower, @AgeRangeUpper, @Height, @Weight, @HairColour, @EyeColour, @Rac" +
                "e, @DateCreated, @DateModified, @CreatoruserID, @Password, @PropertyGUID, @Comme" +
                "nt, @LastIncidentDate, @FRSAcSysUserID, @Exclusive, @BestAssetGUID, @Category, @" +
                "Activities, @Specifics, @Groups, @Aliases, @Traits, @Address, @City, @State, @Po" +
                "stalCode, @Country, @HomePhone, @WorkPhone, @Email, @ClientID, @SINNumber, @Occu" +
                "pation, @DriversLicenseNum, @DigitalSignature, @DataProviderType, @ModifiedBy, @" +
                "Custom1, @Custom2, @CompanyName, @PassportNumber, @BusinessFaxNumber, @WebAddres" +
                "s);\r\nSELECT SubjectGUID, FirstName, MiddleName, LastName, Gender, DateOfBirth, A" +
                "geRangeLower, AgeRangeUpper, Height, Weight, HairColour, EyeColour, Race, DateCr" +
                "eated, DateModified, CreatoruserID, Password, PropertyGUID, Comment, LastInciden" +
                "tDate, FRSAcSysUserID, Exclusive, BestAssetGUID, Category, Activities, Specifics" +
                ", Groups, Aliases, Traits, Address, City, State, PostalCode, Country, HomePhone," +
                " WorkPhone, Email, ClientID, SINNumber, Occupation, DriversLicenseNum, TimeStamp" +
                ", DigitalSignature, DataProviderType, SubjectId, ModifiedBy, Custom1, Custom2, C" +
                "ompanyName, PassportNumber, BusinessFaxNumber, WebAddress FROM SubjectProfile WH" +
                "ERE (SubjectGUID = @SubjectGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MiddleName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MiddleName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gender", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gender", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfBirth", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfBirth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgeRangeLower", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgeRangeLower", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgeRangeUpper", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgeRangeUpper", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Height", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Weight", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Weight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HairColour", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HairColour", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EyeColour", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EyeColour", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Race", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Race", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatoruserID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatoruserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastIncidentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastIncidentDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FRSAcSysUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FRSAcSysUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Exclusive", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Exclusive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BestAssetGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestAssetGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Activities", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Activities", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Specifics", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Specifics", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Groups", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Groups", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Aliases", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Aliases", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Traits", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Traits", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PostalCode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PostalCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HomePhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HomePhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WorkPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SINNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SINNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occupation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DriversLicenseNum", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DriversLicenseNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DigitalSignature", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DigitalSignature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DataProviderType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataProviderType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Custom1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Custom1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Custom2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Custom2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassportNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassportNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessFaxNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessFaxNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SubjectProfile] SET [SubjectGUID] = @SubjectGUID, [FirstName] = @Fi" +
                "rstName, [MiddleName] = @MiddleName, [LastName] = @LastName, [Gender] = @Gender," +
                " [DateOfBirth] = @DateOfBirth, [AgeRangeLower] = @AgeRangeLower, [AgeRangeUpper]" +
                " = @AgeRangeUpper, [Height] = @Height, [Weight] = @Weight, [HairColour] = @HairC" +
                "olour, [EyeColour] = @EyeColour, [Race] = @Race, [DateCreated] = @DateCreated, [" +
                "DateModified] = @DateModified, [CreatoruserID] = @CreatoruserID, [Password] = @P" +
                "assword, [PropertyGUID] = @PropertyGUID, [Comment] = @Comment, [LastIncidentDate" +
                "] = @LastIncidentDate, [FRSAcSysUserID] = @FRSAcSysUserID, [Exclusive] = @Exclus" +
                "ive, [BestAssetGUID] = @BestAssetGUID, [Category] = @Category, [Activities] = @A" +
                "ctivities, [Specifics] = @Specifics, [Groups] = @Groups, [Aliases] = @Aliases, [" +
                "Traits] = @Traits, [Address] = @Address, [City] = @City, [State] = @State, [Post" +
                "alCode] = @PostalCode, [Country] = @Country, [HomePhone] = @HomePhone, [WorkPhon" +
                "e] = @WorkPhone, [Email] = @Email, [ClientID] = @ClientID, [SINNumber] = @SINNum" +
                "ber, [Occupation] = @Occupation, [DriversLicenseNum] = @DriversLicenseNum, [Digi" +
                "talSignature] = @DigitalSignature, [DataProviderType] = @DataProviderType, [Modi" +
                "fiedBy] = @ModifiedBy, [Custom1] = @Custom1, [Custom2] = @Custom2, [CompanyName]" +
                " = @CompanyName, [PassportNumber] = @PassportNumber, [BusinessFaxNumber] = @Busi" +
                "nessFaxNumber, [WebAddress] = @WebAddress WHERE (([SubjectGUID] = @Original_Subj" +
                "ectGUID) AND ((@IsNull_TimeStamp = 1 AND [TimeStamp] IS NULL) OR ([TimeStamp] = " +
                "@Original_TimeStamp)));\r\nSELECT SubjectGUID, FirstName, MiddleName, LastName, Ge" +
                "nder, DateOfBirth, AgeRangeLower, AgeRangeUpper, Height, Weight, HairColour, Eye" +
                "Colour, Race, DateCreated, DateModified, CreatoruserID, Password, PropertyGUID, " +
                "Comment, LastIncidentDate, FRSAcSysUserID, Exclusive, BestAssetGUID, Category, A" +
                "ctivities, Specifics, Groups, Aliases, Traits, Address, City, State, PostalCode," +
                " Country, HomePhone, WorkPhone, Email, ClientID, SINNumber, Occupation, DriversL" +
                "icenseNum, TimeStamp, DigitalSignature, DataProviderType, SubjectId, ModifiedBy," +
                " Custom1, Custom2, CompanyName, PassportNumber, BusinessFaxNumber, WebAddress FR" +
                "OM SubjectProfile WHERE (SubjectGUID = @SubjectGUID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MiddleName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MiddleName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gender", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gender", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfBirth", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfBirth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgeRangeLower", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgeRangeLower", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgeRangeUpper", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgeRangeUpper", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Height", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Weight", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Weight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HairColour", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HairColour", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EyeColour", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EyeColour", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Race", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Race", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatoruserID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatoruserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastIncidentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastIncidentDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FRSAcSysUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FRSAcSysUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Exclusive", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Exclusive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BestAssetGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestAssetGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Activities", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Activities", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Specifics", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Specifics", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Groups", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Groups", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Aliases", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Aliases", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Traits", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Traits", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PostalCode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PostalCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HomePhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HomePhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WorkPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SINNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SINNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occupation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DriversLicenseNum", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DriversLicenseNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DigitalSignature", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DigitalSignature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DataProviderType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataProviderType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Custom1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Custom1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Custom2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Custom2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassportNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassportNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessFaxNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessFaxNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStamp", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT SubjectGUID, FirstName, MiddleName, LastName, Gender, DateOfBirth, AgeRangeLower, AgeRangeUpper, Height, Weight, HairColour, EyeColour, Race, DateCreated, DateModified, CreatoruserID, Password, PropertyGUID, Comment, LastIncidentDate, FRSAcSysUserID, Exclusive, BestAssetGUID, Category, Activities, Specifics, Groups, Aliases, Traits, Address, City, State, PostalCode, Country, HomePhone, WorkPhone, Email, ClientID, SINNumber, Occupation, DriversLicenseNum, TimeStamp, DigitalSignature, DataProviderType, SubjectId, ModifiedBy, Custom1, Custom2, CompanyName, PassportNumber, BusinessFaxNumber, WebAddress FROM dbo.SubjectProfile";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.SubjectProfileDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.SubjectProfileDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.SubjectProfileDataTable dataTable = new DataSetIXData.SubjectProfileDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.SubjectProfileDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "SubjectProfile");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_SubjectGUID, byte[] Original_TimeStamp) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_SubjectGUID));
            if ((Original_TimeStamp == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_TimeStamp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid SubjectGUID, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string Gender, 
                    global::System.Nullable<global::System.DateTime> DateOfBirth, 
                    global::System.Nullable<int> AgeRangeLower, 
                    global::System.Nullable<int> AgeRangeUpper, 
                    global::System.Nullable<int> Height, 
                    global::System.Nullable<int> Weight, 
                    string HairColour, 
                    string EyeColour, 
                    string Race, 
                    System.DateTime DateCreated, 
                    System.DateTime DateModified, 
                    string CreatoruserID, 
                    string Password, 
                    global::System.Nullable<global::System.Guid> PropertyGUID, 
                    string Comment, 
                    global::System.Nullable<global::System.DateTime> LastIncidentDate, 
                    int FRSAcSysUserID, 
                    string Exclusive, 
                    global::System.Nullable<global::System.Guid> BestAssetGUID, 
                    string Category, 
                    string Activities, 
                    string Specifics, 
                    string Groups, 
                    string Aliases, 
                    string Traits, 
                    string Address, 
                    string City, 
                    string State, 
                    string PostalCode, 
                    string Country, 
                    string HomePhone, 
                    string WorkPhone, 
                    string Email, 
                    string ClientID, 
                    string SINNumber, 
                    string Occupation, 
                    string DriversLicenseNum, 
                    byte[] DigitalSignature, 
                    int DataProviderType, 
                    string ModifiedBy, 
                    string Custom1, 
                    string Custom2, 
                    string CompanyName, 
                    string PassportNumber, 
                    string BusinessFaxNumber, 
                    string WebAddress) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(SubjectGUID));
            if ((FirstName == null)) {
                throw new global::System.ArgumentNullException("FirstName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FirstName));
            }
            if ((MiddleName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MiddleName));
            }
            if ((LastName == null)) {
                throw new global::System.ArgumentNullException("LastName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((Gender == null)) {
                throw new global::System.ArgumentNullException("Gender");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Gender));
            }
            if ((DateOfBirth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateOfBirth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((AgeRangeLower.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(AgeRangeLower.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((AgeRangeUpper.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(AgeRangeUpper.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Weight.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Weight.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((HairColour == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(HairColour));
            }
            if ((EyeColour == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(EyeColour));
            }
            if ((Race == null)) {
                throw new global::System.ArgumentNullException("Race");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Race));
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(DateCreated));
            this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(DateModified));
            if ((CreatoruserID == null)) {
                throw new global::System.ArgumentNullException("CreatoruserID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(CreatoruserID));
            }
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Password));
            }
            if ((PropertyGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.Guid)(PropertyGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Comment));
            }
            if ((LastIncidentDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((System.DateTime)(LastIncidentDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[20].Value = ((int)(FRSAcSysUserID));
            if ((Exclusive == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Exclusive));
            }
            if ((BestAssetGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((System.Guid)(BestAssetGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Category == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Category));
            }
            if ((Activities == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(Activities));
            }
            if ((Specifics == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(Specifics));
            }
            if ((Groups == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(Groups));
            }
            if ((Aliases == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(Aliases));
            }
            if ((Traits == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(Traits));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(State));
            }
            if ((PostalCode == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(PostalCode));
            }
            if ((Country == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(Country));
            }
            if ((HomePhone == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(HomePhone));
            }
            if ((WorkPhone == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(WorkPhone));
            }
            if ((Email == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(Email));
            }
            if ((ClientID == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(ClientID));
            }
            if ((SINNumber == null)) {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(SINNumber));
            }
            if ((Occupation == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(Occupation));
            }
            if ((DriversLicenseNum == null)) {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = ((string)(DriversLicenseNum));
            }
            if ((DigitalSignature == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((byte[])(DigitalSignature));
            }
            this.Adapter.InsertCommand.Parameters[42].Value = ((int)(DataProviderType));
            if ((ModifiedBy == null)) {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(ModifiedBy));
            }
            if ((Custom1 == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(Custom1));
            }
            if ((Custom2 == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(Custom2));
            }
            if ((CompanyName == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(CompanyName));
            }
            if ((PassportNumber == null)) {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(PassportNumber));
            }
            if ((BusinessFaxNumber == null)) {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = ((string)(BusinessFaxNumber));
            }
            if ((WebAddress == null)) {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = ((string)(WebAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid SubjectGUID, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string Gender, 
                    global::System.Nullable<global::System.DateTime> DateOfBirth, 
                    global::System.Nullable<int> AgeRangeLower, 
                    global::System.Nullable<int> AgeRangeUpper, 
                    global::System.Nullable<int> Height, 
                    global::System.Nullable<int> Weight, 
                    string HairColour, 
                    string EyeColour, 
                    string Race, 
                    System.DateTime DateCreated, 
                    System.DateTime DateModified, 
                    string CreatoruserID, 
                    string Password, 
                    global::System.Nullable<global::System.Guid> PropertyGUID, 
                    string Comment, 
                    global::System.Nullable<global::System.DateTime> LastIncidentDate, 
                    int FRSAcSysUserID, 
                    string Exclusive, 
                    global::System.Nullable<global::System.Guid> BestAssetGUID, 
                    string Category, 
                    string Activities, 
                    string Specifics, 
                    string Groups, 
                    string Aliases, 
                    string Traits, 
                    string Address, 
                    string City, 
                    string State, 
                    string PostalCode, 
                    string Country, 
                    string HomePhone, 
                    string WorkPhone, 
                    string Email, 
                    string ClientID, 
                    string SINNumber, 
                    string Occupation, 
                    string DriversLicenseNum, 
                    byte[] DigitalSignature, 
                    int DataProviderType, 
                    string ModifiedBy, 
                    string Custom1, 
                    string Custom2, 
                    string CompanyName, 
                    string PassportNumber, 
                    string BusinessFaxNumber, 
                    string WebAddress, 
                    System.Guid Original_SubjectGUID, 
                    byte[] Original_TimeStamp) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(SubjectGUID));
            if ((FirstName == null)) {
                throw new global::System.ArgumentNullException("FirstName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FirstName));
            }
            if ((MiddleName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(MiddleName));
            }
            if ((LastName == null)) {
                throw new global::System.ArgumentNullException("LastName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((Gender == null)) {
                throw new global::System.ArgumentNullException("Gender");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Gender));
            }
            if ((DateOfBirth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(DateOfBirth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((AgeRangeLower.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(AgeRangeLower.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((AgeRangeUpper.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(AgeRangeUpper.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Height.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Weight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Weight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((HairColour == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(HairColour));
            }
            if ((EyeColour == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(EyeColour));
            }
            if ((Race == null)) {
                throw new global::System.ArgumentNullException("Race");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Race));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(DateCreated));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(DateModified));
            if ((CreatoruserID == null)) {
                throw new global::System.ArgumentNullException("CreatoruserID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(CreatoruserID));
            }
            if ((Password == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Password));
            }
            if ((PropertyGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.Guid)(PropertyGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Comment));
            }
            if ((LastIncidentDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(LastIncidentDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(FRSAcSysUserID));
            if ((Exclusive == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Exclusive));
            }
            if ((BestAssetGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.Guid)(BestAssetGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Category == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Category));
            }
            if ((Activities == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Activities));
            }
            if ((Specifics == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Specifics));
            }
            if ((Groups == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Groups));
            }
            if ((Aliases == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Aliases));
            }
            if ((Traits == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Traits));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(State));
            }
            if ((PostalCode == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(PostalCode));
            }
            if ((Country == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Country));
            }
            if ((HomePhone == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(HomePhone));
            }
            if ((WorkPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(WorkPhone));
            }
            if ((Email == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Email));
            }
            if ((ClientID == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(ClientID));
            }
            if ((SINNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(SINNumber));
            }
            if ((Occupation == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Occupation));
            }
            if ((DriversLicenseNum == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(DriversLicenseNum));
            }
            if ((DigitalSignature == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((byte[])(DigitalSignature));
            }
            this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(DataProviderType));
            if ((ModifiedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(ModifiedBy));
            }
            if ((Custom1 == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Custom1));
            }
            if ((Custom2 == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Custom2));
            }
            if ((CompanyName == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(CompanyName));
            }
            if ((PassportNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(PassportNumber));
            }
            if ((BusinessFaxNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(BusinessFaxNumber));
            }
            if ((WebAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(WebAddress));
            }
            this.Adapter.UpdateCommand.Parameters[50].Value = ((System.Guid)(Original_SubjectGUID));
            if ((Original_TimeStamp == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((byte[])(Original_TimeStamp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string Gender, 
                    global::System.Nullable<global::System.DateTime> DateOfBirth, 
                    global::System.Nullable<int> AgeRangeLower, 
                    global::System.Nullable<int> AgeRangeUpper, 
                    global::System.Nullable<int> Height, 
                    global::System.Nullable<int> Weight, 
                    string HairColour, 
                    string EyeColour, 
                    string Race, 
                    System.DateTime DateCreated, 
                    System.DateTime DateModified, 
                    string CreatoruserID, 
                    string Password, 
                    global::System.Nullable<global::System.Guid> PropertyGUID, 
                    string Comment, 
                    global::System.Nullable<global::System.DateTime> LastIncidentDate, 
                    int FRSAcSysUserID, 
                    string Exclusive, 
                    global::System.Nullable<global::System.Guid> BestAssetGUID, 
                    string Category, 
                    string Activities, 
                    string Specifics, 
                    string Groups, 
                    string Aliases, 
                    string Traits, 
                    string Address, 
                    string City, 
                    string State, 
                    string PostalCode, 
                    string Country, 
                    string HomePhone, 
                    string WorkPhone, 
                    string Email, 
                    string ClientID, 
                    string SINNumber, 
                    string Occupation, 
                    string DriversLicenseNum, 
                    byte[] DigitalSignature, 
                    int DataProviderType, 
                    string ModifiedBy, 
                    string Custom1, 
                    string Custom2, 
                    string CompanyName, 
                    string PassportNumber, 
                    string BusinessFaxNumber, 
                    string WebAddress, 
                    System.Guid Original_SubjectGUID, 
                    byte[] Original_TimeStamp) {
            return this.Update(Original_SubjectGUID, FirstName, MiddleName, LastName, Gender, DateOfBirth, AgeRangeLower, AgeRangeUpper, Height, Weight, HairColour, EyeColour, Race, DateCreated, DateModified, CreatoruserID, Password, PropertyGUID, Comment, LastIncidentDate, FRSAcSysUserID, Exclusive, BestAssetGUID, Category, Activities, Specifics, Groups, Aliases, Traits, Address, City, State, PostalCode, Country, HomePhone, WorkPhone, Email, ClientID, SINNumber, Occupation, DriversLicenseNum, DigitalSignature, DataProviderType, ModifiedBy, Custom1, Custom2, CompanyName, PassportNumber, BusinessFaxNumber, WebAddress, Original_SubjectGUID, Original_TimeStamp);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class _ConversionTmpTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _ConversionTmpTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "_ConversionTmp";
            tableMapping.ColumnMappings.Add("ConvertGuid", "ConvertGuid");
            tableMapping.ColumnMappings.Add("TableName", "TableName");
            tableMapping.ColumnMappings.Add("ConvertId1", "ConvertId1");
            tableMapping.ColumnMappings.Add("ConvertId2", "ConvertId2");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("AUTOID", "AUTOID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[_ConversionTmp] WHERE (([ConvertGuid] = @Original_ConvertGuid) AND ((@IsNull_TableName = 1 AND [TableName] IS NULL) OR ([TableName] = @Original_TableName)) AND ((@IsNull_ConvertId1 = 1 AND [ConvertId1] IS NULL) OR ([ConvertId1] = @Original_ConvertId1)) AND ((@IsNull_ConvertId2 = 1 AND [ConvertId2] IS NULL) OR ([ConvertId2] = @Original_ConvertId2)) AND ((@IsNull_CreateDate = 1 AND [CreateDate] IS NULL) OR ([CreateDate] = @Original_CreateDate)) AND ([AUTOID] = @Original_AUTOID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertGuid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TableName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TableName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TableName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TableName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ConvertId1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertId1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ConvertId2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertId2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AUTOID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUTOID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[_ConversionTmp] ([ConvertGuid], [TableName], [ConvertId1], [ConvertId2], [CreateDate]) VALUES (@ConvertGuid, @TableName, @ConvertId1, @ConvertId2, @CreateDate);
SELECT ConvertGuid, TableName, ConvertId1, ConvertId2, CreateDate, AUTOID FROM _ConversionTmp WHERE (AUTOID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertGuid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TableName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TableName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertId1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertId2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[_ConversionTmp] SET [ConvertGuid] = @ConvertGuid, [TableName] = @TableName, [ConvertId1] = @ConvertId1, [ConvertId2] = @ConvertId2, [CreateDate] = @CreateDate WHERE (([ConvertGuid] = @Original_ConvertGuid) AND ((@IsNull_TableName = 1 AND [TableName] IS NULL) OR ([TableName] = @Original_TableName)) AND ((@IsNull_ConvertId1 = 1 AND [ConvertId1] IS NULL) OR ([ConvertId1] = @Original_ConvertId1)) AND ((@IsNull_ConvertId2 = 1 AND [ConvertId2] IS NULL) OR ([ConvertId2] = @Original_ConvertId2)) AND ((@IsNull_CreateDate = 1 AND [CreateDate] IS NULL) OR ([CreateDate] = @Original_CreateDate)) AND ([AUTOID] = @Original_AUTOID));
SELECT ConvertGuid, TableName, ConvertId1, ConvertId2, CreateDate, AUTOID FROM _ConversionTmp WHERE (AUTOID = @AUTOID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertGuid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TableName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TableName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertId1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertId2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertGuid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TableName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TableName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TableName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TableName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ConvertId1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertId1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ConvertId2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertId2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertId2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AUTOID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUTOID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUTOID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "AUTOID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ConvertGuid, TableName, ConvertId1, ConvertId2, CreateDate, AUTOID FROM db" +
                "o.[_ConversionTmp]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData._ConversionTmpDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData._ConversionTmpDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData._ConversionTmpDataTable dataTable = new DataSetIXData._ConversionTmpDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData._ConversionTmpDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "_ConversionTmp");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_ConvertGuid, string Original_TableName, string Original_ConvertId1, string Original_ConvertId2, global::System.Nullable<global::System.DateTime> Original_CreateDate, int Original_AUTOID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_ConvertGuid));
            if ((Original_TableName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TableName));
            }
            if ((Original_ConvertId1 == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ConvertId1));
            }
            if ((Original_ConvertId2 == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ConvertId2));
            }
            if ((Original_CreateDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_CreateDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_AUTOID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid ConvertGuid, string TableName, string ConvertId1, string ConvertId2, global::System.Nullable<global::System.DateTime> CreateDate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(ConvertGuid));
            if ((TableName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TableName));
            }
            if ((ConvertId1 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ConvertId1));
            }
            if ((ConvertId2 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ConvertId2));
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid ConvertGuid, string TableName, string ConvertId1, string ConvertId2, global::System.Nullable<global::System.DateTime> CreateDate, System.Guid Original_ConvertGuid, string Original_TableName, string Original_ConvertId1, string Original_ConvertId2, global::System.Nullable<global::System.DateTime> Original_CreateDate, int Original_AUTOID, int AUTOID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(ConvertGuid));
            if ((TableName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TableName));
            }
            if ((ConvertId1 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ConvertId1));
            }
            if ((ConvertId2 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ConvertId2));
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_ConvertGuid));
            if ((Original_TableName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_TableName));
            }
            if ((Original_ConvertId1 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_ConvertId1));
            }
            if ((Original_ConvertId2 == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_ConvertId2));
            }
            if ((Original_CreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_CreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_AUTOID));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(AUTOID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid ConvertGuid, string TableName, string ConvertId1, string ConvertId2, global::System.Nullable<global::System.DateTime> CreateDate, System.Guid Original_ConvertGuid, string Original_TableName, string Original_ConvertId1, string Original_ConvertId2, global::System.Nullable<global::System.DateTime> Original_CreateDate, int Original_AUTOID) {
            return this.Update(ConvertGuid, TableName, ConvertId1, ConvertId2, CreateDate, Original_ConvertGuid, Original_TableName, Original_ConvertId1, Original_ConvertId2, Original_CreateDate, Original_AUTOID, Original_AUTOID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BanWatchStatusTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BanWatchStatusTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BanWatchStatus";
            tableMapping.ColumnMappings.Add("SubjectGUID", "SubjectGUID");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Commencement", "Commencement");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("IsPermanent", "IsPermanent");
            tableMapping.ColumnMappings.Add("TypeOfBan", "TypeOfBan");
            tableMapping.ColumnMappings.Add("ReasonForBan", "ReasonForBan");
            tableMapping.ColumnMappings.Add("DetailedReportGUID", "DetailedReportGUID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[BanWatchStatus] WHERE (([SubjectGUID] = @Original_SubjectGUID) AND ([Status] = @Original_Status) AND ((@IsNull_Commencement = 1 AND [Commencement] IS NULL) OR ([Commencement] = @Original_Commencement)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ([IsPermanent] = @Original_IsPermanent) AND ((@IsNull_TypeOfBan = 1 AND [TypeOfBan] IS NULL) OR ([TypeOfBan] = @Original_TypeOfBan)) AND ((@IsNull_ReasonForBan = 1 AND [ReasonForBan] IS NULL) OR ([ReasonForBan] = @Original_ReasonForBan)) AND ((@IsNull_DetailedReportGUID = 1 AND [DetailedReportGUID] IS NULL) OR ([DetailedReportGUID] = @Original_DetailedReportGUID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Commencement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TypeOfBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReasonForBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DetailedReportGUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[BanWatchStatus] ([SubjectGUID], [Status], [Commencement], [EndDate], [IsPermanent], [TypeOfBan], [ReasonForBan], [DetailedReportGUID]) VALUES (@SubjectGUID, @Status, @Commencement, @EndDate, @IsPermanent, @TypeOfBan, @ReasonForBan, @DetailedReportGUID);
SELECT SubjectGUID, Status, Commencement, EndDate, IsPermanent, TypeOfBan, ReasonForBan, DetailedReportGUID FROM BanWatchStatus WHERE (SubjectGUID = @SubjectGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[BanWatchStatus] SET [SubjectGUID] = @SubjectGUID, [Status] = @Status, [Commencement] = @Commencement, [EndDate] = @EndDate, [IsPermanent] = @IsPermanent, [TypeOfBan] = @TypeOfBan, [ReasonForBan] = @ReasonForBan, [DetailedReportGUID] = @DetailedReportGUID WHERE (([SubjectGUID] = @Original_SubjectGUID) AND ([Status] = @Original_Status) AND ((@IsNull_Commencement = 1 AND [Commencement] IS NULL) OR ([Commencement] = @Original_Commencement)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ([IsPermanent] = @Original_IsPermanent) AND ((@IsNull_TypeOfBan = 1 AND [TypeOfBan] IS NULL) OR ([TypeOfBan] = @Original_TypeOfBan)) AND ((@IsNull_ReasonForBan = 1 AND [ReasonForBan] IS NULL) OR ([ReasonForBan] = @Original_ReasonForBan)) AND ((@IsNull_DetailedReportGUID = 1 AND [DetailedReportGUID] IS NULL) OR ([DetailedReportGUID] = @Original_DetailedReportGUID)));
SELECT SubjectGUID, Status, Commencement, EndDate, IsPermanent, TypeOfBan, ReasonForBan, DetailedReportGUID FROM BanWatchStatus WHERE (SubjectGUID = @SubjectGUID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Commencement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TypeOfBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReasonForBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DetailedReportGUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString3;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SubjectGUID, Status, Commencement, EndDate, IsPermanent, TypeOfBan, Reason" +
                "ForBan, DetailedReportGUID FROM dbo.BanWatchStatus";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.BanWatchStatusDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.BanWatchStatusDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.BanWatchStatusDataTable dataTable = new DataSetIXData.BanWatchStatusDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.BanWatchStatusDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "BanWatchStatus");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_SubjectGUID, int Original_Status, global::System.Nullable<global::System.DateTime> Original_Commencement, global::System.Nullable<global::System.DateTime> Original_EndDate, bool Original_IsPermanent, string Original_TypeOfBan, string Original_ReasonForBan, global::System.Nullable<global::System.Guid> Original_DetailedReportGUID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_SubjectGUID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Status));
            if ((Original_Commencement.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_Commencement.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_IsPermanent));
            if ((Original_TypeOfBan == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_TypeOfBan));
            }
            if ((Original_ReasonForBan == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ReasonForBan));
            }
            if ((Original_DetailedReportGUID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.Guid)(Original_DetailedReportGUID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid SubjectGUID, int Status, global::System.Nullable<global::System.DateTime> Commencement, global::System.Nullable<global::System.DateTime> EndDate, bool IsPermanent, string TypeOfBan, string ReasonForBan, global::System.Nullable<global::System.Guid> DetailedReportGUID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(SubjectGUID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Status));
            if ((Commencement.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Commencement.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(IsPermanent));
            if ((TypeOfBan == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TypeOfBan));
            }
            if ((ReasonForBan == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ReasonForBan));
            }
            if ((DetailedReportGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.Guid)(DetailedReportGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid SubjectGUID, 
                    int Status, 
                    global::System.Nullable<global::System.DateTime> Commencement, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    bool IsPermanent, 
                    string TypeOfBan, 
                    string ReasonForBan, 
                    global::System.Nullable<global::System.Guid> DetailedReportGUID, 
                    System.Guid Original_SubjectGUID, 
                    int Original_Status, 
                    global::System.Nullable<global::System.DateTime> Original_Commencement, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    bool Original_IsPermanent, 
                    string Original_TypeOfBan, 
                    string Original_ReasonForBan, 
                    global::System.Nullable<global::System.Guid> Original_DetailedReportGUID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(SubjectGUID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Status));
            if ((Commencement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Commencement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(IsPermanent));
            if ((TypeOfBan == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TypeOfBan));
            }
            if ((ReasonForBan == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ReasonForBan));
            }
            if ((DetailedReportGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(DetailedReportGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(Original_SubjectGUID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_Status));
            if ((Original_Commencement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_Commencement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(Original_IsPermanent));
            if ((Original_TypeOfBan == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_TypeOfBan));
            }
            if ((Original_ReasonForBan == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_ReasonForBan));
            }
            if ((Original_DetailedReportGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((System.Guid)(Original_DetailedReportGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Status, global::System.Nullable<global::System.DateTime> Commencement, global::System.Nullable<global::System.DateTime> EndDate, bool IsPermanent, string TypeOfBan, string ReasonForBan, global::System.Nullable<global::System.Guid> DetailedReportGUID, System.Guid Original_SubjectGUID, int Original_Status, global::System.Nullable<global::System.DateTime> Original_Commencement, global::System.Nullable<global::System.DateTime> Original_EndDate, bool Original_IsPermanent, string Original_TypeOfBan, string Original_ReasonForBan, global::System.Nullable<global::System.Guid> Original_DetailedReportGUID) {
            return this.Update(Original_SubjectGUID, Status, Commencement, EndDate, IsPermanent, TypeOfBan, ReasonForBan, DetailedReportGUID, Original_SubjectGUID, Original_Status, Original_Commencement, Original_EndDate, Original_IsPermanent, Original_TypeOfBan, Original_ReasonForBan, Original_DetailedReportGUID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SubjectBanTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SubjectBanTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SubjectBan";
            tableMapping.ColumnMappings.Add("SubjectGUID", "SubjectGUID");
            tableMapping.ColumnMappings.Add("DetailedReportGUID", "DetailedReportGUID");
            tableMapping.ColumnMappings.Add("SequenceNumber", "SequenceNumber");
            tableMapping.ColumnMappings.Add("Commencement", "Commencement");
            tableMapping.ColumnMappings.Add("IsPermanent", "IsPermanent");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("SubjectCharged", "SubjectCharged");
            tableMapping.ColumnMappings.Add("LetterSent", "LetterSent");
            tableMapping.ColumnMappings.Add("CompulsiveGambler", "CompulsiveGambler");
            tableMapping.ColumnMappings.Add("RecordType", "RecordType");
            tableMapping.ColumnMappings.Add("TypeOfBan", "TypeOfBan");
            tableMapping.ColumnMappings.Add("IdentificationUsed", "IdentificationUsed");
            tableMapping.ColumnMappings.Add("ReasonForBan", "ReasonForBan");
            tableMapping.ColumnMappings.Add("SelfExclusiveReport", "SelfExclusiveReport");
            tableMapping.ColumnMappings.Add("RemovedBanIncidentGuid", "RemovedBanIncidentGuid");
            tableMapping.ColumnMappings.Add("OriginalBanIncidentGuid", "OriginalBanIncidentGuid");
            tableMapping.ColumnMappings.Add("Removed", "Removed");
            tableMapping.ColumnMappings.Add("RemovalDate", "RemovalDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[SubjectBan] WHERE (([SubjectGUID] = @Original_SubjectGUID) AND ([DetailedReportGUID] = @Original_DetailedReportGUID) AND ([SequenceNumber] = @Original_SequenceNumber) AND ([Commencement] = @Original_Commencement) AND ([IsPermanent] = @Original_IsPermanent) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ([SubjectCharged] = @Original_SubjectCharged) AND ([LetterSent] = @Original_LetterSent) AND ([CompulsiveGambler] = @Original_CompulsiveGambler) AND ([RecordType] = @Original_RecordType) AND ((@IsNull_TypeOfBan = 1 AND [TypeOfBan] IS NULL) OR ([TypeOfBan] = @Original_TypeOfBan)) AND ((@IsNull_IdentificationUsed = 1 AND [IdentificationUsed] IS NULL) OR ([IdentificationUsed] = @Original_IdentificationUsed)) AND ((@IsNull_ReasonForBan = 1 AND [ReasonForBan] IS NULL) OR ([ReasonForBan] = @Original_ReasonForBan)) AND ((@IsNull_RemovedBanIncidentGuid = 1 AND [RemovedBanIncidentGuid] IS NULL) OR ([RemovedBanIncidentGuid] = @Original_RemovedBanIncidentGuid)) AND ((@IsNull_OriginalBanIncidentGuid = 1 AND [OriginalBanIncidentGuid] IS NULL) OR ([OriginalBanIncidentGuid] = @Original_OriginalBanIncidentGuid)) AND ((@IsNull_Removed = 1 AND [Removed] IS NULL) OR ([Removed] = @Original_Removed)) AND ((@IsNull_RemovalDate = 1 AND [RemovalDate] IS NULL) OR ([RemovalDate] = @Original_RemovalDate)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SequenceNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SequenceNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectCharged", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectCharged", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LetterSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LetterSent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompulsiveGambler", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompulsiveGambler", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecordType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecordType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TypeOfBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IdentificationUsed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IdentificationUsed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IdentificationUsed", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IdentificationUsed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReasonForBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RemovedBanIncidentGuid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovedBanIncidentGuid", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RemovedBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovedBanIncidentGuid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalBanIncidentGuid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalBanIncidentGuid", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalBanIncidentGuid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Removed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Removed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Removed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Removed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RemovalDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovalDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RemovalDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovalDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SubjectBan] ([SubjectGUID], [DetailedReportGUID], [Commencement], [IsPermanent], [EndDate], [SubjectCharged], [LetterSent], [CompulsiveGambler], [RecordType], [TypeOfBan], [IdentificationUsed], [ReasonForBan], [SelfExclusiveReport], [RemovedBanIncidentGuid], [OriginalBanIncidentGuid], [Removed], [RemovalDate]) VALUES (@SubjectGUID, @DetailedReportGUID, @Commencement, @IsPermanent, @EndDate, @SubjectCharged, @LetterSent, @CompulsiveGambler, @RecordType, @TypeOfBan, @IdentificationUsed, @ReasonForBan, @SelfExclusiveReport, @RemovedBanIncidentGuid, @OriginalBanIncidentGuid, @Removed, @RemovalDate);
SELECT SubjectGUID, DetailedReportGUID, SequenceNumber, Commencement, IsPermanent, EndDate, SubjectCharged, LetterSent, CompulsiveGambler, RecordType, TypeOfBan, IdentificationUsed, ReasonForBan, SelfExclusiveReport, RemovedBanIncidentGuid, OriginalBanIncidentGuid, Removed, RemovalDate FROM SubjectBan WHERE (DetailedReportGUID = @DetailedReportGUID) AND (SubjectGUID = @SubjectGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectCharged", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectCharged", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LetterSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LetterSent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompulsiveGambler", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompulsiveGambler", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecordType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecordType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IdentificationUsed", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IdentificationUsed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelfExclusiveReport", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfExclusiveReport", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RemovedBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovedBanIncidentGuid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalBanIncidentGuid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Removed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Removed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RemovalDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovalDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SubjectBan] SET [SubjectGUID] = @SubjectGUID, [DetailedReportGUID] " +
                "= @DetailedReportGUID, [Commencement] = @Commencement, [IsPermanent] = @IsPerman" +
                "ent, [EndDate] = @EndDate, [SubjectCharged] = @SubjectCharged, [LetterSent] = @L" +
                "etterSent, [CompulsiveGambler] = @CompulsiveGambler, [RecordType] = @RecordType," +
                " [TypeOfBan] = @TypeOfBan, [IdentificationUsed] = @IdentificationUsed, [ReasonFo" +
                "rBan] = @ReasonForBan, [SelfExclusiveReport] = @SelfExclusiveReport, [RemovedBan" +
                "IncidentGuid] = @RemovedBanIncidentGuid, [OriginalBanIncidentGuid] = @OriginalBa" +
                "nIncidentGuid, [Removed] = @Removed, [RemovalDate] = @RemovalDate WHERE (([Subje" +
                "ctGUID] = @Original_SubjectGUID) AND ([DetailedReportGUID] = @Original_DetailedR" +
                "eportGUID) AND ([SequenceNumber] = @Original_SequenceNumber) AND ([Commencement]" +
                " = @Original_Commencement) AND ([IsPermanent] = @Original_IsPermanent) AND ((@Is" +
                "Null_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND " +
                "([SubjectCharged] = @Original_SubjectCharged) AND ([LetterSent] = @Original_Lett" +
                "erSent) AND ([CompulsiveGambler] = @Original_CompulsiveGambler) AND ([RecordType" +
                "] = @Original_RecordType) AND ((@IsNull_TypeOfBan = 1 AND [TypeOfBan] IS NULL) O" +
                "R ([TypeOfBan] = @Original_TypeOfBan)) AND ((@IsNull_IdentificationUsed = 1 AND " +
                "[IdentificationUsed] IS NULL) OR ([IdentificationUsed] = @Original_Identificatio" +
                "nUsed)) AND ((@IsNull_ReasonForBan = 1 AND [ReasonForBan] IS NULL) OR ([ReasonFo" +
                "rBan] = @Original_ReasonForBan)) AND ((@IsNull_RemovedBanIncidentGuid = 1 AND [R" +
                "emovedBanIncidentGuid] IS NULL) OR ([RemovedBanIncidentGuid] = @Original_Removed" +
                "BanIncidentGuid)) AND ((@IsNull_OriginalBanIncidentGuid = 1 AND [OriginalBanInci" +
                "dentGuid] IS NULL) OR ([OriginalBanIncidentGuid] = @Original_OriginalBanIncident" +
                "Guid)) AND ((@IsNull_Removed = 1 AND [Removed] IS NULL) OR ([Removed] = @Origina" +
                "l_Removed)) AND ((@IsNull_RemovalDate = 1 AND [RemovalDate] IS NULL) OR ([Remova" +
                "lDate] = @Original_RemovalDate)));\r\nSELECT SubjectGUID, DetailedReportGUID, Sequ" +
                "enceNumber, Commencement, IsPermanent, EndDate, SubjectCharged, LetterSent, Comp" +
                "ulsiveGambler, RecordType, TypeOfBan, IdentificationUsed, ReasonForBan, SelfExcl" +
                "usiveReport, RemovedBanIncidentGuid, OriginalBanIncidentGuid, Removed, RemovalDa" +
                "te FROM SubjectBan WHERE (DetailedReportGUID = @DetailedReportGUID) AND (Subject" +
                "GUID = @SubjectGUID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectCharged", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectCharged", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LetterSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LetterSent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompulsiveGambler", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompulsiveGambler", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecordType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecordType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IdentificationUsed", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IdentificationUsed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelfExclusiveReport", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfExclusiveReport", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RemovedBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovedBanIncidentGuid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalBanIncidentGuid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Removed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Removed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RemovalDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovalDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SequenceNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SequenceNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Commencement", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commencement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPermanent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubjectCharged", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectCharged", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LetterSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LetterSent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompulsiveGambler", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompulsiveGambler", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecordType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecordType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TypeOfBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IdentificationUsed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IdentificationUsed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IdentificationUsed", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IdentificationUsed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReasonForBan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReasonForBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonForBan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RemovedBanIncidentGuid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovedBanIncidentGuid", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RemovedBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovedBanIncidentGuid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalBanIncidentGuid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalBanIncidentGuid", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalBanIncidentGuid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalBanIncidentGuid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Removed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Removed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Removed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Removed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RemovalDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovalDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RemovalDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemovalDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString3;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT SubjectGUID, DetailedReportGUID, SequenceNumber, Commencement, IsPermanent, EndDate, SubjectCharged, LetterSent, CompulsiveGambler, RecordType, TypeOfBan, IdentificationUsed, ReasonForBan, SelfExclusiveReport, RemovedBanIncidentGuid, OriginalBanIncidentGuid, Removed, RemovalDate FROM dbo.SubjectBan";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.SubjectBanDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.SubjectBanDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.SubjectBanDataTable dataTable = new DataSetIXData.SubjectBanDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.SubjectBanDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "SubjectBan");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    System.Guid Original_SubjectGUID, 
                    System.Guid Original_DetailedReportGUID, 
                    int Original_SequenceNumber, 
                    System.DateTime Original_Commencement, 
                    bool Original_IsPermanent, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    bool Original_SubjectCharged, 
                    bool Original_LetterSent, 
                    bool Original_CompulsiveGambler, 
                    int Original_RecordType, 
                    string Original_TypeOfBan, 
                    string Original_IdentificationUsed, 
                    string Original_ReasonForBan, 
                    global::System.Nullable<global::System.Guid> Original_RemovedBanIncidentGuid, 
                    global::System.Nullable<global::System.Guid> Original_OriginalBanIncidentGuid, 
                    global::System.Nullable<bool> Original_Removed, 
                    global::System.Nullable<global::System.DateTime> Original_RemovalDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_SubjectGUID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_DetailedReportGUID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_SequenceNumber));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_Commencement));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_IsPermanent));
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_SubjectCharged));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_LetterSent));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_CompulsiveGambler));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_RecordType));
            if ((Original_TypeOfBan == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_TypeOfBan));
            }
            if ((Original_IdentificationUsed == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_IdentificationUsed));
            }
            if ((Original_ReasonForBan == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_ReasonForBan));
            }
            if ((Original_RemovedBanIncidentGuid.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((System.Guid)(Original_RemovedBanIncidentGuid.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_OriginalBanIncidentGuid.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((System.Guid)(Original_OriginalBanIncidentGuid.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Removed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((bool)(Original_Removed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_RemovalDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((System.DateTime)(Original_RemovalDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid SubjectGUID, 
                    System.Guid DetailedReportGUID, 
                    System.DateTime Commencement, 
                    bool IsPermanent, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    bool SubjectCharged, 
                    bool LetterSent, 
                    bool CompulsiveGambler, 
                    int RecordType, 
                    string TypeOfBan, 
                    string IdentificationUsed, 
                    string ReasonForBan, 
                    byte[] SelfExclusiveReport, 
                    global::System.Nullable<global::System.Guid> RemovedBanIncidentGuid, 
                    global::System.Nullable<global::System.Guid> OriginalBanIncidentGuid, 
                    global::System.Nullable<bool> Removed, 
                    global::System.Nullable<global::System.DateTime> RemovalDate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(SubjectGUID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(DetailedReportGUID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Commencement));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(IsPermanent));
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(SubjectCharged));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(LetterSent));
            this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(CompulsiveGambler));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(RecordType));
            if ((TypeOfBan == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TypeOfBan));
            }
            if ((IdentificationUsed == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(IdentificationUsed));
            }
            if ((ReasonForBan == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ReasonForBan));
            }
            if ((SelfExclusiveReport == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((byte[])(SelfExclusiveReport));
            }
            if ((RemovedBanIncidentGuid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.Guid)(RemovedBanIncidentGuid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((OriginalBanIncidentGuid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.Guid)(OriginalBanIncidentGuid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Removed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((bool)(Removed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((RemovalDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(RemovalDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid SubjectGUID, 
                    System.Guid DetailedReportGUID, 
                    System.DateTime Commencement, 
                    bool IsPermanent, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    bool SubjectCharged, 
                    bool LetterSent, 
                    bool CompulsiveGambler, 
                    int RecordType, 
                    string TypeOfBan, 
                    string IdentificationUsed, 
                    string ReasonForBan, 
                    byte[] SelfExclusiveReport, 
                    global::System.Nullable<global::System.Guid> RemovedBanIncidentGuid, 
                    global::System.Nullable<global::System.Guid> OriginalBanIncidentGuid, 
                    global::System.Nullable<bool> Removed, 
                    global::System.Nullable<global::System.DateTime> RemovalDate, 
                    System.Guid Original_SubjectGUID, 
                    System.Guid Original_DetailedReportGUID, 
                    int Original_SequenceNumber, 
                    System.DateTime Original_Commencement, 
                    bool Original_IsPermanent, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    bool Original_SubjectCharged, 
                    bool Original_LetterSent, 
                    bool Original_CompulsiveGambler, 
                    int Original_RecordType, 
                    string Original_TypeOfBan, 
                    string Original_IdentificationUsed, 
                    string Original_ReasonForBan, 
                    global::System.Nullable<global::System.Guid> Original_RemovedBanIncidentGuid, 
                    global::System.Nullable<global::System.Guid> Original_OriginalBanIncidentGuid, 
                    global::System.Nullable<bool> Original_Removed, 
                    global::System.Nullable<global::System.DateTime> Original_RemovalDate) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(SubjectGUID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(DetailedReportGUID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Commencement));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(IsPermanent));
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(SubjectCharged));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(LetterSent));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(CompulsiveGambler));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(RecordType));
            if ((TypeOfBan == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(TypeOfBan));
            }
            if ((IdentificationUsed == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(IdentificationUsed));
            }
            if ((ReasonForBan == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ReasonForBan));
            }
            if ((SelfExclusiveReport == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((byte[])(SelfExclusiveReport));
            }
            if ((RemovedBanIncidentGuid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.Guid)(RemovedBanIncidentGuid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((OriginalBanIncidentGuid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.Guid)(OriginalBanIncidentGuid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Removed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Removed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((RemovalDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(RemovalDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.Guid)(Original_SubjectGUID));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.Guid)(Original_DetailedReportGUID));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_SequenceNumber));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_Commencement));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_IsPermanent));
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_SubjectCharged));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(Original_LetterSent));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(Original_CompulsiveGambler));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_RecordType));
            if ((Original_TypeOfBan == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_TypeOfBan));
            }
            if ((Original_IdentificationUsed == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_IdentificationUsed));
            }
            if ((Original_ReasonForBan == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_ReasonForBan));
            }
            if ((Original_RemovedBanIncidentGuid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((System.Guid)(Original_RemovedBanIncidentGuid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_OriginalBanIncidentGuid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((System.Guid)(Original_OriginalBanIncidentGuid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_Removed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((bool)(Original_Removed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_RemovalDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((System.DateTime)(Original_RemovalDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime Commencement, 
                    bool IsPermanent, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    bool SubjectCharged, 
                    bool LetterSent, 
                    bool CompulsiveGambler, 
                    int RecordType, 
                    string TypeOfBan, 
                    string IdentificationUsed, 
                    string ReasonForBan, 
                    byte[] SelfExclusiveReport, 
                    global::System.Nullable<global::System.Guid> RemovedBanIncidentGuid, 
                    global::System.Nullable<global::System.Guid> OriginalBanIncidentGuid, 
                    global::System.Nullable<bool> Removed, 
                    global::System.Nullable<global::System.DateTime> RemovalDate, 
                    System.Guid Original_SubjectGUID, 
                    System.Guid Original_DetailedReportGUID, 
                    int Original_SequenceNumber, 
                    System.DateTime Original_Commencement, 
                    bool Original_IsPermanent, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    bool Original_SubjectCharged, 
                    bool Original_LetterSent, 
                    bool Original_CompulsiveGambler, 
                    int Original_RecordType, 
                    string Original_TypeOfBan, 
                    string Original_IdentificationUsed, 
                    string Original_ReasonForBan, 
                    global::System.Nullable<global::System.Guid> Original_RemovedBanIncidentGuid, 
                    global::System.Nullable<global::System.Guid> Original_OriginalBanIncidentGuid, 
                    global::System.Nullable<bool> Original_Removed, 
                    global::System.Nullable<global::System.DateTime> Original_RemovalDate) {
            return this.Update(Original_SubjectGUID, Original_DetailedReportGUID, Commencement, IsPermanent, EndDate, SubjectCharged, LetterSent, CompulsiveGambler, RecordType, TypeOfBan, IdentificationUsed, ReasonForBan, SelfExclusiveReport, RemovedBanIncidentGuid, OriginalBanIncidentGuid, Removed, RemovalDate, Original_SubjectGUID, Original_DetailedReportGUID, Original_SequenceNumber, Original_Commencement, Original_IsPermanent, Original_EndDate, Original_SubjectCharged, Original_LetterSent, Original_CompulsiveGambler, Original_RecordType, Original_TypeOfBan, Original_IdentificationUsed, Original_ReasonForBan, Original_RemovedBanIncidentGuid, Original_OriginalBanIncidentGuid, Original_Removed, Original_RemovalDate);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class iXData_SubjectProfileTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public iXData_SubjectProfileTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "iXData_SubjectProfile";
            tableMapping.ColumnMappings.Add("SubjectGUID", "SubjectGUID");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("Gender", "Gender");
            tableMapping.ColumnMappings.Add("DateOfBirth", "DateOfBirth");
            tableMapping.ColumnMappings.Add("AgeRangeLower", "AgeRangeLower");
            tableMapping.ColumnMappings.Add("AgeRangeUpper", "AgeRangeUpper");
            tableMapping.ColumnMappings.Add("Height", "Height");
            tableMapping.ColumnMappings.Add("Weight", "Weight");
            tableMapping.ColumnMappings.Add("HairColour", "HairColour");
            tableMapping.ColumnMappings.Add("EyeColour", "EyeColour");
            tableMapping.ColumnMappings.Add("Race", "Race");
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated");
            tableMapping.ColumnMappings.Add("DateModified", "DateModified");
            tableMapping.ColumnMappings.Add("CreatoruserID", "CreatoruserID");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("PropertyGUID", "PropertyGUID");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("LastIncidentDate", "LastIncidentDate");
            tableMapping.ColumnMappings.Add("FRSAcSysUserID", "FRSAcSysUserID");
            tableMapping.ColumnMappings.Add("Exclusive", "Exclusive");
            tableMapping.ColumnMappings.Add("BestAssetGUID", "BestAssetGUID");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("Activities", "Activities");
            tableMapping.ColumnMappings.Add("Specifics", "Specifics");
            tableMapping.ColumnMappings.Add("Groups", "Groups");
            tableMapping.ColumnMappings.Add("Aliases", "Aliases");
            tableMapping.ColumnMappings.Add("Traits", "Traits");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone");
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("ClientID", "ClientID");
            tableMapping.ColumnMappings.Add("SINNumber", "SINNumber");
            tableMapping.ColumnMappings.Add("Occupation", "Occupation");
            tableMapping.ColumnMappings.Add("DriversLicenseNum", "DriversLicenseNum");
            tableMapping.ColumnMappings.Add("TimeStamp", "TimeStamp");
            tableMapping.ColumnMappings.Add("DigitalSignature", "DigitalSignature");
            tableMapping.ColumnMappings.Add("DataProviderType", "DataProviderType");
            tableMapping.ColumnMappings.Add("SubjectId", "SubjectId");
            tableMapping.ColumnMappings.Add("ModifiedBy", "ModifiedBy");
            tableMapping.ColumnMappings.Add("Custom1", "Custom1");
            tableMapping.ColumnMappings.Add("Custom2", "Custom2");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("PassportNumber", "PassportNumber");
            tableMapping.ColumnMappings.Add("BusinessFaxNumber", "BusinessFaxNumber");
            tableMapping.ColumnMappings.Add("WebAddress", "WebAddress");
            tableMapping.ColumnMappings.Add("MediaFileName", "MediaFileName");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("IncidentNumber", "IncidentNumber");
            tableMapping.ColumnMappings.Add("IsBanned", "IsBanned");
            tableMapping.ColumnMappings.Add("BanStartDate", "BanStartDate");
            tableMapping.ColumnMappings.Add("BanEndDate", "BanEndDate");
            tableMapping.ColumnMappings.Add("BanIdentificationUsed", "BanIdentificationUsed");
            tableMapping.ColumnMappings.Add("TypeOfBan", "TypeOfBan");
            tableMapping.ColumnMappings.Add("ReasonOfBan", "ReasonOfBan");
            tableMapping.ColumnMappings.Add("IsPermanentBanned", "IsPermanentBanned");
            tableMapping.ColumnMappings.Add("SubjectCharged", "SubjectCharged");
            tableMapping.ColumnMappings.Add("LetterSent", "LetterSent");
            tableMapping.ColumnMappings.Add("CompulsiveGambler", "CompulsiveGambler");
            tableMapping.ColumnMappings.Add("RecordType", "RecordType");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("DetailedReportGUID", "DetailedReportGUID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[iXData_SubjectProfile] ([SubjectGUID], [FirstName], [MiddleNam" +
                "e], [LastName], [Gender], [DateOfBirth], [AgeRangeLower], [AgeRangeUpper], [Heig" +
                "ht], [Weight], [HairColour], [EyeColour], [Race], [DateCreated], [DateModified]," +
                " [CreatoruserID], [Password], [PropertyGUID], [Comment], [LastIncidentDate], [FR" +
                "SAcSysUserID], [Exclusive], [BestAssetGUID], [Category], [Activities], [Specific" +
                "s], [Groups], [Aliases], [Traits], [Address], [City], [State], [PostalCode], [Co" +
                "untry], [HomePhone], [WorkPhone], [Email], [ClientID], [SINNumber], [Occupation]" +
                ", [DriversLicenseNum], [DigitalSignature], [DataProviderType], [SubjectId], [Mod" +
                "ifiedBy], [Custom1], [Custom2], [CompanyName], [PassportNumber], [BusinessFaxNum" +
                "ber], [WebAddress], [MediaFileName], [SourceID], [IncidentNumber], [IsBanned], [" +
                "BanStartDate], [BanEndDate], [BanIdentificationUsed], [TypeOfBan], [ReasonOfBan]" +
                ", [IsPermanentBanned], [SubjectCharged], [LetterSent], [CompulsiveGambler], [Rec" +
                "ordType], [Status], [DetailedReportGUID]) VALUES (@SubjectGUID, @FirstName, @Mid" +
                "dleName, @LastName, @Gender, @DateOfBirth, @AgeRangeLower, @AgeRangeUpper, @Heig" +
                "ht, @Weight, @HairColour, @EyeColour, @Race, @DateCreated, @DateModified, @Creat" +
                "oruserID, @Password, @PropertyGUID, @Comment, @LastIncidentDate, @FRSAcSysUserID" +
                ", @Exclusive, @BestAssetGUID, @Category, @Activities, @Specifics, @Groups, @Alia" +
                "ses, @Traits, @Address, @City, @State, @PostalCode, @Country, @HomePhone, @WorkP" +
                "hone, @Email, @ClientID, @SINNumber, @Occupation, @DriversLicenseNum, @DigitalSi" +
                "gnature, @DataProviderType, @SubjectId, @ModifiedBy, @Custom1, @Custom2, @Compan" +
                "yName, @PassportNumber, @BusinessFaxNumber, @WebAddress, @MediaFileName, @Source" +
                "ID, @IncidentNumber, @IsBanned, @BanStartDate, @BanEndDate, @BanIdentificationUs" +
                "ed, @TypeOfBan, @ReasonOfBan, @IsPermanentBanned, @SubjectCharged, @LetterSent, " +
                "@CompulsiveGambler, @RecordType, @Status, @DetailedReportGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MiddleName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MiddleName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gender", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gender", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfBirth", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfBirth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgeRangeLower", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgeRangeLower", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgeRangeUpper", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgeRangeUpper", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Height", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Weight", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Weight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HairColour", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HairColour", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EyeColour", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EyeColour", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Race", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Race", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatoruserID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatoruserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastIncidentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastIncidentDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FRSAcSysUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FRSAcSysUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Exclusive", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Exclusive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BestAssetGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestAssetGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Activities", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Activities", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Specifics", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Specifics", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Groups", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Groups", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Aliases", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Aliases", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Traits", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Traits", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PostalCode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PostalCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HomePhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HomePhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WorkPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SINNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SINNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occupation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DriversLicenseNum", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DriversLicenseNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DigitalSignature", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DigitalSignature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DataProviderType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataProviderType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Custom1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Custom1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Custom2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Custom2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassportNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassportNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessFaxNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessFaxNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MediaFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MediaFileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SourceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IncidentNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IncidentNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsBanned", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsBanned", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BanStartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BanStartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BanEndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BanEndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BanIdentificationUsed", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BanIdentificationUsed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReasonOfBan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReasonOfBan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPermanentBanned", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPermanentBanned", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubjectCharged", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectCharged", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LetterSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LetterSent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompulsiveGambler", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompulsiveGambler", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecordType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecordType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString3;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT SubjectGUID, FirstName, MiddleName, LastName, Gender, DateOfBirth, AgeRangeLower, AgeRangeUpper, Height, Weight, HairColour, EyeColour, Race, DateCreated, DateModified, CreatoruserID, Password, PropertyGUID, Comment, LastIncidentDate, FRSAcSysUserID, Exclusive, BestAssetGUID, Category, Activities, Specifics, Groups, Aliases, Traits, Address, City, State, PostalCode, Country, HomePhone, WorkPhone, Email, ClientID, SINNumber, Occupation, DriversLicenseNum, TimeStamp, DigitalSignature, DataProviderType, SubjectId, ModifiedBy, Custom1, Custom2, CompanyName, PassportNumber, BusinessFaxNumber, WebAddress, MediaFileName, SourceID, IncidentNumber, IsBanned, BanStartDate, BanEndDate, BanIdentificationUsed, TypeOfBan, ReasonOfBan, IsPermanentBanned, SubjectCharged, LetterSent, CompulsiveGambler, RecordType, Status, DetailedReportGUID FROM dbo.iXData_SubjectProfile";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.iXData_SubjectProfileDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.iXData_SubjectProfileDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.iXData_SubjectProfileDataTable dataTable = new DataSetIXData.iXData_SubjectProfileDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.iXData_SubjectProfileDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "iXData_SubjectProfile");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid SubjectGUID, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string Gender, 
                    global::System.Nullable<global::System.DateTime> DateOfBirth, 
                    global::System.Nullable<int> AgeRangeLower, 
                    global::System.Nullable<int> AgeRangeUpper, 
                    global::System.Nullable<int> Height, 
                    global::System.Nullable<int> Weight, 
                    string HairColour, 
                    string EyeColour, 
                    string Race, 
                    global::System.Nullable<global::System.DateTime> DateCreated, 
                    global::System.Nullable<global::System.DateTime> DateModified, 
                    string CreatoruserID, 
                    string Password, 
                    global::System.Nullable<global::System.Guid> PropertyGUID, 
                    string Comment, 
                    global::System.Nullable<global::System.DateTime> LastIncidentDate, 
                    global::System.Nullable<int> FRSAcSysUserID, 
                    string Exclusive, 
                    global::System.Nullable<global::System.Guid> BestAssetGUID, 
                    string Category, 
                    string Activities, 
                    string Specifics, 
                    string Groups, 
                    string Aliases, 
                    string Traits, 
                    string Address, 
                    string City, 
                    string State, 
                    string PostalCode, 
                    string Country, 
                    string HomePhone, 
                    string WorkPhone, 
                    string Email, 
                    string ClientID, 
                    string SINNumber, 
                    string Occupation, 
                    string DriversLicenseNum, 
                    byte[] DigitalSignature, 
                    global::System.Nullable<int> DataProviderType, 
                    global::System.Nullable<int> SubjectId, 
                    string ModifiedBy, 
                    string Custom1, 
                    string Custom2, 
                    string CompanyName, 
                    string PassportNumber, 
                    string BusinessFaxNumber, 
                    string WebAddress, 
                    string MediaFileName, 
                    string SourceID, 
                    string IncidentNumber, 
                    global::System.Nullable<bool> IsBanned, 
                    global::System.Nullable<global::System.DateTime> BanStartDate, 
                    global::System.Nullable<global::System.DateTime> BanEndDate, 
                    string BanIdentificationUsed, 
                    string TypeOfBan, 
                    string ReasonOfBan, 
                    global::System.Nullable<bool> IsPermanentBanned, 
                    global::System.Nullable<bool> SubjectCharged, 
                    global::System.Nullable<bool> LetterSent, 
                    global::System.Nullable<bool> CompulsiveGambler, 
                    global::System.Nullable<int> RecordType, 
                    global::System.Nullable<int> Status, 
                    global::System.Nullable<global::System.Guid> DetailedReportGUID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(SubjectGUID));
            if ((FirstName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FirstName));
            }
            if ((MiddleName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MiddleName));
            }
            if ((LastName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((Gender == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Gender));
            }
            if ((DateOfBirth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateOfBirth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((AgeRangeLower.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(AgeRangeLower.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((AgeRangeUpper.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(AgeRangeUpper.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Weight.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Weight.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((HairColour == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(HairColour));
            }
            if ((EyeColour == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(EyeColour));
            }
            if ((Race == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Race));
            }
            if ((DateCreated.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(DateCreated.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((DateModified.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(DateModified.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CreatoruserID == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(CreatoruserID));
            }
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Password));
            }
            if ((PropertyGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.Guid)(PropertyGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Comment));
            }
            if ((LastIncidentDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((System.DateTime)(LastIncidentDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((FRSAcSysUserID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(FRSAcSysUserID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Exclusive == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Exclusive));
            }
            if ((BestAssetGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((System.Guid)(BestAssetGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Category == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Category));
            }
            if ((Activities == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(Activities));
            }
            if ((Specifics == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(Specifics));
            }
            if ((Groups == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(Groups));
            }
            if ((Aliases == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(Aliases));
            }
            if ((Traits == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(Traits));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(State));
            }
            if ((PostalCode == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(PostalCode));
            }
            if ((Country == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(Country));
            }
            if ((HomePhone == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(HomePhone));
            }
            if ((WorkPhone == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(WorkPhone));
            }
            if ((Email == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(Email));
            }
            if ((ClientID == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(ClientID));
            }
            if ((SINNumber == null)) {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(SINNumber));
            }
            if ((Occupation == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(Occupation));
            }
            if ((DriversLicenseNum == null)) {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = ((string)(DriversLicenseNum));
            }
            if ((DigitalSignature == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((byte[])(DigitalSignature));
            }
            if ((DataProviderType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((int)(DataProviderType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((SubjectId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((int)(SubjectId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((ModifiedBy == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(ModifiedBy));
            }
            if ((Custom1 == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(Custom1));
            }
            if ((Custom2 == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(Custom2));
            }
            if ((CompanyName == null)) {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(CompanyName));
            }
            if ((PassportNumber == null)) {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = ((string)(PassportNumber));
            }
            if ((BusinessFaxNumber == null)) {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = ((string)(BusinessFaxNumber));
            }
            if ((WebAddress == null)) {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = ((string)(WebAddress));
            }
            if ((MediaFileName == null)) {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = ((string)(MediaFileName));
            }
            if ((SourceID == null)) {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = ((string)(SourceID));
            }
            if ((IncidentNumber == null)) {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = ((string)(IncidentNumber));
            }
            if ((IsBanned.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[54].Value = ((bool)(IsBanned.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((BanStartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((System.DateTime)(BanStartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((BanEndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((System.DateTime)(BanEndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((BanIdentificationUsed == null)) {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[57].Value = ((string)(BanIdentificationUsed));
            }
            if ((TypeOfBan == null)) {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[58].Value = ((string)(TypeOfBan));
            }
            if ((ReasonOfBan == null)) {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[59].Value = ((string)(ReasonOfBan));
            }
            if ((IsPermanentBanned.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[60].Value = ((bool)(IsPermanentBanned.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((SubjectCharged.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[61].Value = ((bool)(SubjectCharged.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((LetterSent.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[62].Value = ((bool)(LetterSent.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((CompulsiveGambler.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[63].Value = ((bool)(CompulsiveGambler.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((RecordType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[64].Value = ((int)(RecordType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Status.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[65].Value = ((int)(Status.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((DetailedReportGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[66].Value = ((System.Guid)(DetailedReportGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ParticipantAssignmentTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantAssignmentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ParticipantAssignment";
            tableMapping.ColumnMappings.Add("DetailedReportGUID", "DetailedReportGUID");
            tableMapping.ColumnMappings.Add("ParticipantGUID", "ParticipantGUID");
            tableMapping.ColumnMappings.Add("Assigned", "Assigned");
            tableMapping.ColumnMappings.Add("AssignedBy", "AssignedBy");
            tableMapping.ColumnMappings.Add("ParticipantType", "ParticipantType");
            tableMapping.ColumnMappings.Add("ParticipantRole", "ParticipantRole");
            tableMapping.ColumnMappings.Add("ParticipantNotes", "ParticipantNotes");
            tableMapping.ColumnMappings.Add("SecondaryRole", "SecondaryRole");
            tableMapping.ColumnMappings.Add("PoliceContacted", "PoliceContacted");
            tableMapping.ColumnMappings.Add("TakenFromScene", "TakenFromScene");
            tableMapping.ColumnMappings.Add("PoliceContactedResult", "PoliceContactedResult");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ParticipantAssignment] WHERE (([DetailedReportGUID] = @Original_DetailedReportGUID) AND ([ParticipantGUID] = @Original_ParticipantGUID) AND ([Assigned] = @Original_Assigned) AND ([AssignedBy] = @Original_AssignedBy) AND ([ParticipantType] = @Original_ParticipantType) AND ([ParticipantRole] = @Original_ParticipantRole) AND ((@IsNull_SecondaryRole = 1 AND [SecondaryRole] IS NULL) OR ([SecondaryRole] = @Original_SecondaryRole)) AND ((@IsNull_PoliceContacted = 1 AND [PoliceContacted] IS NULL) OR ([PoliceContacted] = @Original_PoliceContacted)) AND ((@IsNull_TakenFromScene = 1 AND [TakenFromScene] IS NULL) OR ([TakenFromScene] = @Original_TakenFromScene)) AND ((@IsNull_PoliceContactedResult = 1 AND [PoliceContactedResult] IS NULL) OR ([PoliceContactedResult] = @Original_PoliceContactedResult)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParticipantGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Assigned", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Assigned", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AssignedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AssignedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParticipantType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParticipantRole", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantRole", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SecondaryRole", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryRole", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SecondaryRole", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryRole", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PoliceContacted", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContacted", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PoliceContacted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContacted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TakenFromScene", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakenFromScene", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TakenFromScene", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakenFromScene", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PoliceContactedResult", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContactedResult", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PoliceContactedResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContactedResult", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ParticipantAssignment] ([DetailedReportGUID], [ParticipantGUID], [Assigned], [AssignedBy], [ParticipantType], [ParticipantRole], [ParticipantNotes], [SecondaryRole], [PoliceContacted], [TakenFromScene], [PoliceContactedResult]) VALUES (@DetailedReportGUID, @ParticipantGUID, @Assigned, @AssignedBy, @ParticipantType, @ParticipantRole, @ParticipantNotes, @SecondaryRole, @PoliceContacted, @TakenFromScene, @PoliceContactedResult);
SELECT DetailedReportGUID, ParticipantGUID, Assigned, AssignedBy, ParticipantType, ParticipantRole, ParticipantNotes, SecondaryRole, PoliceContacted, TakenFromScene, PoliceContactedResult FROM ParticipantAssignment WHERE (DetailedReportGUID = @DetailedReportGUID) AND (ParticipantGUID = @ParticipantGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Assigned", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Assigned", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AssignedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AssignedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantRole", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantRole", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantNotes", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantNotes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SecondaryRole", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryRole", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PoliceContacted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContacted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakenFromScene", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakenFromScene", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PoliceContactedResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContactedResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ParticipantAssignment] SET [DetailedReportGUID] = @DetailedReportGU" +
                "ID, [ParticipantGUID] = @ParticipantGUID, [Assigned] = @Assigned, [AssignedBy] =" +
                " @AssignedBy, [ParticipantType] = @ParticipantType, [ParticipantRole] = @Partici" +
                "pantRole, [ParticipantNotes] = @ParticipantNotes, [SecondaryRole] = @SecondaryRo" +
                "le, [PoliceContacted] = @PoliceContacted, [TakenFromScene] = @TakenFromScene, [P" +
                "oliceContactedResult] = @PoliceContactedResult WHERE (([DetailedReportGUID] = @O" +
                "riginal_DetailedReportGUID) AND ([ParticipantGUID] = @Original_ParticipantGUID) " +
                "AND ([Assigned] = @Original_Assigned) AND ([AssignedBy] = @Original_AssignedBy) " +
                "AND ([ParticipantType] = @Original_ParticipantType) AND ([ParticipantRole] = @Or" +
                "iginal_ParticipantRole) AND ((@IsNull_SecondaryRole = 1 AND [SecondaryRole] IS N" +
                "ULL) OR ([SecondaryRole] = @Original_SecondaryRole)) AND ((@IsNull_PoliceContact" +
                "ed = 1 AND [PoliceContacted] IS NULL) OR ([PoliceContacted] = @Original_PoliceCo" +
                "ntacted)) AND ((@IsNull_TakenFromScene = 1 AND [TakenFromScene] IS NULL) OR ([Ta" +
                "kenFromScene] = @Original_TakenFromScene)) AND ((@IsNull_PoliceContactedResult =" +
                " 1 AND [PoliceContactedResult] IS NULL) OR ([PoliceContactedResult] = @Original_" +
                "PoliceContactedResult)));\r\nSELECT DetailedReportGUID, ParticipantGUID, Assigned," +
                " AssignedBy, ParticipantType, ParticipantRole, ParticipantNotes, SecondaryRole, " +
                "PoliceContacted, TakenFromScene, PoliceContactedResult FROM ParticipantAssignmen" +
                "t WHERE (DetailedReportGUID = @DetailedReportGUID) AND (ParticipantGUID = @Parti" +
                "cipantGUID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Assigned", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Assigned", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AssignedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AssignedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantRole", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantRole", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParticipantNotes", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantNotes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SecondaryRole", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryRole", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PoliceContacted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContacted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakenFromScene", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakenFromScene", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PoliceContactedResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContactedResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DetailedReportGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DetailedReportGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParticipantGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Assigned", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Assigned", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AssignedBy", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AssignedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParticipantType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParticipantRole", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParticipantRole", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SecondaryRole", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryRole", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SecondaryRole", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SecondaryRole", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PoliceContacted", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContacted", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PoliceContacted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContacted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TakenFromScene", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakenFromScene", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TakenFromScene", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakenFromScene", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PoliceContactedResult", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContactedResult", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PoliceContactedResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PoliceContactedResult", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString3;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DetailedReportGUID, ParticipantGUID, Assigned, AssignedBy, ParticipantType" +
                ", ParticipantRole, ParticipantNotes, SecondaryRole, PoliceContacted, TakenFromSc" +
                "ene, PoliceContactedResult FROM dbo.ParticipantAssignment";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.ParticipantAssignmentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.ParticipantAssignmentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.ParticipantAssignmentDataTable dataTable = new DataSetIXData.ParticipantAssignmentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.ParticipantAssignmentDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "ParticipantAssignment");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_DetailedReportGUID, System.Guid Original_ParticipantGUID, System.DateTime Original_Assigned, string Original_AssignedBy, string Original_ParticipantType, System.Guid Original_ParticipantRole, string Original_SecondaryRole, global::System.Nullable<bool> Original_PoliceContacted, global::System.Nullable<bool> Original_TakenFromScene, string Original_PoliceContactedResult) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_DetailedReportGUID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_ParticipantGUID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_Assigned));
            if ((Original_AssignedBy == null)) {
                throw new global::System.ArgumentNullException("Original_AssignedBy");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_AssignedBy));
            }
            if ((Original_ParticipantType == null)) {
                throw new global::System.ArgumentNullException("Original_ParticipantType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ParticipantType));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.Guid)(Original_ParticipantRole));
            if ((Original_SecondaryRole == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_SecondaryRole));
            }
            if ((Original_PoliceContacted.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_PoliceContacted.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_TakenFromScene.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_TakenFromScene.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_PoliceContactedResult == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_PoliceContactedResult));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid DetailedReportGUID, System.Guid ParticipantGUID, System.DateTime Assigned, string AssignedBy, string ParticipantType, System.Guid ParticipantRole, string ParticipantNotes, string SecondaryRole, global::System.Nullable<bool> PoliceContacted, global::System.Nullable<bool> TakenFromScene, string PoliceContactedResult) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(DetailedReportGUID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(ParticipantGUID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Assigned));
            if ((AssignedBy == null)) {
                throw new global::System.ArgumentNullException("AssignedBy");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AssignedBy));
            }
            if ((ParticipantType == null)) {
                throw new global::System.ArgumentNullException("ParticipantType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ParticipantType));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.Guid)(ParticipantRole));
            if ((ParticipantNotes == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ParticipantNotes));
            }
            if ((SecondaryRole == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(SecondaryRole));
            }
            if ((PoliceContacted.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(PoliceContacted.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((TakenFromScene.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(TakenFromScene.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((PoliceContactedResult == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PoliceContactedResult));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid DetailedReportGUID, 
                    System.Guid ParticipantGUID, 
                    System.DateTime Assigned, 
                    string AssignedBy, 
                    string ParticipantType, 
                    System.Guid ParticipantRole, 
                    string ParticipantNotes, 
                    string SecondaryRole, 
                    global::System.Nullable<bool> PoliceContacted, 
                    global::System.Nullable<bool> TakenFromScene, 
                    string PoliceContactedResult, 
                    System.Guid Original_DetailedReportGUID, 
                    System.Guid Original_ParticipantGUID, 
                    System.DateTime Original_Assigned, 
                    string Original_AssignedBy, 
                    string Original_ParticipantType, 
                    System.Guid Original_ParticipantRole, 
                    string Original_SecondaryRole, 
                    global::System.Nullable<bool> Original_PoliceContacted, 
                    global::System.Nullable<bool> Original_TakenFromScene, 
                    string Original_PoliceContactedResult) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(DetailedReportGUID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(ParticipantGUID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Assigned));
            if ((AssignedBy == null)) {
                throw new global::System.ArgumentNullException("AssignedBy");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AssignedBy));
            }
            if ((ParticipantType == null)) {
                throw new global::System.ArgumentNullException("ParticipantType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ParticipantType));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(ParticipantRole));
            if ((ParticipantNotes == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ParticipantNotes));
            }
            if ((SecondaryRole == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(SecondaryRole));
            }
            if ((PoliceContacted.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(PoliceContacted.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((TakenFromScene.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(TakenFromScene.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((PoliceContactedResult == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(PoliceContactedResult));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.Guid)(Original_DetailedReportGUID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.Guid)(Original_ParticipantGUID));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_Assigned));
            if ((Original_AssignedBy == null)) {
                throw new global::System.ArgumentNullException("Original_AssignedBy");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_AssignedBy));
            }
            if ((Original_ParticipantType == null)) {
                throw new global::System.ArgumentNullException("Original_ParticipantType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ParticipantType));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.Guid)(Original_ParticipantRole));
            if ((Original_SecondaryRole == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_SecondaryRole));
            }
            if ((Original_PoliceContacted.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(Original_PoliceContacted.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_TakenFromScene.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((bool)(Original_TakenFromScene.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_PoliceContactedResult == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_PoliceContactedResult));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime Assigned, 
                    string AssignedBy, 
                    string ParticipantType, 
                    System.Guid ParticipantRole, 
                    string ParticipantNotes, 
                    string SecondaryRole, 
                    global::System.Nullable<bool> PoliceContacted, 
                    global::System.Nullable<bool> TakenFromScene, 
                    string PoliceContactedResult, 
                    System.Guid Original_DetailedReportGUID, 
                    System.Guid Original_ParticipantGUID, 
                    System.DateTime Original_Assigned, 
                    string Original_AssignedBy, 
                    string Original_ParticipantType, 
                    System.Guid Original_ParticipantRole, 
                    string Original_SecondaryRole, 
                    global::System.Nullable<bool> Original_PoliceContacted, 
                    global::System.Nullable<bool> Original_TakenFromScene, 
                    string Original_PoliceContactedResult) {
            return this.Update(Original_DetailedReportGUID, Original_ParticipantGUID, Assigned, AssignedBy, ParticipantType, ParticipantRole, ParticipantNotes, SecondaryRole, PoliceContacted, TakenFromScene, PoliceContactedResult, Original_DetailedReportGUID, Original_ParticipantGUID, Original_Assigned, Original_AssignedBy, Original_ParticipantType, Original_ParticipantRole, Original_SecondaryRole, Original_PoliceContacted, Original_TakenFromScene, Original_PoliceContactedResult);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DropdownSelectionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DropdownSelectionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DropdownSelection";
            tableMapping.ColumnMappings.Add("SelectionGUID", "SelectionGUID");
            tableMapping.ColumnMappings.Add("SelectionType", "SelectionType");
            tableMapping.ColumnMappings.Add("SelectionText", "SelectionText");
            tableMapping.ColumnMappings.Add("DateModified", "DateModified");
            tableMapping.ColumnMappings.Add("Hidden", "Hidden");
            tableMapping.ColumnMappings.Add("ParentGUID", "ParentGUID");
            tableMapping.ColumnMappings.Add("PropertyGUID", "PropertyGUID");
            tableMapping.ColumnMappings.Add("SelectionCode", "SelectionCode");
            tableMapping.ColumnMappings.Add("lock", "lock");
            tableMapping.ColumnMappings.Add("SelectionDescription", "SelectionDescription");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DropdownSelection] WHERE (([SelectionGUID] = @Original_SelectionGUID) AND ([SelectionType] = @Original_SelectionType) AND ([SelectionText] = @Original_SelectionText) AND ((@IsNull_DateModified = 1 AND [DateModified] IS NULL) OR ([DateModified] = @Original_DateModified)) AND ([Hidden] = @Original_Hidden) AND ((@IsNull_ParentGUID = 1 AND [ParentGUID] IS NULL) OR ([ParentGUID] = @Original_ParentGUID)) AND ((@IsNull_PropertyGUID = 1 AND [PropertyGUID] IS NULL) OR ([PropertyGUID] = @Original_PropertyGUID)) AND ((@IsNull_SelectionCode = 1 AND [SelectionCode] IS NULL) OR ([SelectionCode] = @Original_SelectionCode)) AND ([lock] = @Original_lock))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionText", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateModified", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Hidden", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Hidden", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ParentGUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParentGUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParentGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParentGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PropertyGUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelectionCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionCode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lock", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lock", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DropdownSelection] ([SelectionGUID], [SelectionType], [SelectionText], [DateModified], [Hidden], [ParentGUID], [PropertyGUID], [SelectionCode], [lock], [SelectionDescription]) VALUES (@SelectionGUID, @SelectionType, @SelectionText, @DateModified, @Hidden, @ParentGUID, @PropertyGUID, @SelectionCode, @lock, @SelectionDescription);
SELECT SelectionGUID, SelectionType, SelectionText, DateModified, Hidden, ParentGUID, PropertyGUID, SelectionCode, lock, SelectionDescription FROM DropdownSelection WHERE (SelectionGUID = @SelectionGUID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Hidden", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Hidden", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParentGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParentGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionCode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lock", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lock", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DropdownSelection] SET [SelectionGUID] = @SelectionGUID, [SelectionType] = @SelectionType, [SelectionText] = @SelectionText, [DateModified] = @DateModified, [Hidden] = @Hidden, [ParentGUID] = @ParentGUID, [PropertyGUID] = @PropertyGUID, [SelectionCode] = @SelectionCode, [lock] = @lock, [SelectionDescription] = @SelectionDescription WHERE (([SelectionGUID] = @Original_SelectionGUID) AND ([SelectionType] = @Original_SelectionType) AND ([SelectionText] = @Original_SelectionText) AND ((@IsNull_DateModified = 1 AND [DateModified] IS NULL) OR ([DateModified] = @Original_DateModified)) AND ([Hidden] = @Original_Hidden) AND ((@IsNull_ParentGUID = 1 AND [ParentGUID] IS NULL) OR ([ParentGUID] = @Original_ParentGUID)) AND ((@IsNull_PropertyGUID = 1 AND [PropertyGUID] IS NULL) OR ([PropertyGUID] = @Original_PropertyGUID)) AND ((@IsNull_SelectionCode = 1 AND [SelectionCode] IS NULL) OR ([SelectionCode] = @Original_SelectionCode)) AND ([lock] = @Original_lock));
SELECT SelectionGUID, SelectionType, SelectionText, DateModified, Hidden, ParentGUID, PropertyGUID, SelectionCode, lock, SelectionDescription FROM DropdownSelection WHERE (SelectionGUID = @SelectionGUID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Hidden", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Hidden", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParentGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParentGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionCode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lock", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lock", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionText", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateModified", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateModified", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Hidden", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Hidden", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ParentGUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParentGUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParentGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParentGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PropertyGUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyGUID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyGUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelectionCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectionCode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lock", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lock", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::iTrak.Importer.Data.Properties.Settings.Default.iXDataConnectionString3;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SelectionGUID, SelectionType, SelectionText, DateModified, Hidden, ParentG" +
                "UID, PropertyGUID, SelectionCode, lock, SelectionDescription FROM dbo.DropdownSe" +
                "lection";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetIXData.DropdownSelectionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetIXData.DropdownSelectionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetIXData.DropdownSelectionDataTable dataTable = new DataSetIXData.DropdownSelectionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData.DropdownSelectionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetIXData dataSet) {
            return this.Adapter.Update(dataSet, "DropdownSelection");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_SelectionGUID, string Original_SelectionType, string Original_SelectionText, global::System.Nullable<global::System.DateTime> Original_DateModified, bool Original_Hidden, global::System.Nullable<global::System.Guid> Original_ParentGUID, global::System.Nullable<global::System.Guid> Original_PropertyGUID, string Original_SelectionCode, bool Original_lock) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_SelectionGUID));
            if ((Original_SelectionType == null)) {
                throw new global::System.ArgumentNullException("Original_SelectionType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SelectionType));
            }
            if ((Original_SelectionText == null)) {
                throw new global::System.ArgumentNullException("Original_SelectionText");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_SelectionText));
            }
            if ((Original_DateModified.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_DateModified.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_Hidden));
            if ((Original_ParentGUID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((System.Guid)(Original_ParentGUID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_PropertyGUID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((System.Guid)(Original_PropertyGUID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_SelectionCode == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_SelectionCode));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_lock));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid SelectionGUID, string SelectionType, string SelectionText, global::System.Nullable<global::System.DateTime> DateModified, bool Hidden, global::System.Nullable<global::System.Guid> ParentGUID, global::System.Nullable<global::System.Guid> PropertyGUID, string SelectionCode, bool _lock, string SelectionDescription) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(SelectionGUID));
            if ((SelectionType == null)) {
                throw new global::System.ArgumentNullException("SelectionType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SelectionType));
            }
            if ((SelectionText == null)) {
                throw new global::System.ArgumentNullException("SelectionText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SelectionText));
            }
            if ((DateModified.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateModified.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(Hidden));
            if ((ParentGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.Guid)(ParentGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PropertyGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.Guid)(PropertyGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SelectionCode == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(SelectionCode));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(_lock));
            if ((SelectionDescription == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(SelectionDescription));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid SelectionGUID, 
                    string SelectionType, 
                    string SelectionText, 
                    global::System.Nullable<global::System.DateTime> DateModified, 
                    bool Hidden, 
                    global::System.Nullable<global::System.Guid> ParentGUID, 
                    global::System.Nullable<global::System.Guid> PropertyGUID, 
                    string SelectionCode, 
                    bool _lock, 
                    string SelectionDescription, 
                    System.Guid Original_SelectionGUID, 
                    string Original_SelectionType, 
                    string Original_SelectionText, 
                    global::System.Nullable<global::System.DateTime> Original_DateModified, 
                    bool Original_Hidden, 
                    global::System.Nullable<global::System.Guid> Original_ParentGUID, 
                    global::System.Nullable<global::System.Guid> Original_PropertyGUID, 
                    string Original_SelectionCode, 
                    bool Original_lock) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(SelectionGUID));
            if ((SelectionType == null)) {
                throw new global::System.ArgumentNullException("SelectionType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SelectionType));
            }
            if ((SelectionText == null)) {
                throw new global::System.ArgumentNullException("SelectionText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SelectionText));
            }
            if ((DateModified.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateModified.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Hidden));
            if ((ParentGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(ParentGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PropertyGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.Guid)(PropertyGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SelectionCode == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(SelectionCode));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(_lock));
            if ((SelectionDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(SelectionDescription));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.Guid)(Original_SelectionGUID));
            if ((Original_SelectionType == null)) {
                throw new global::System.ArgumentNullException("Original_SelectionType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_SelectionType));
            }
            if ((Original_SelectionText == null)) {
                throw new global::System.ArgumentNullException("Original_SelectionText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_SelectionText));
            }
            if ((Original_DateModified.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_DateModified.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_Hidden));
            if ((Original_ParentGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.Guid)(Original_ParentGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_PropertyGUID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((System.Guid)(Original_PropertyGUID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_SelectionCode == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_SelectionCode));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((bool)(Original_lock));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string SelectionType, 
                    string SelectionText, 
                    global::System.Nullable<global::System.DateTime> DateModified, 
                    bool Hidden, 
                    global::System.Nullable<global::System.Guid> ParentGUID, 
                    global::System.Nullable<global::System.Guid> PropertyGUID, 
                    string SelectionCode, 
                    bool _lock, 
                    string SelectionDescription, 
                    System.Guid Original_SelectionGUID, 
                    string Original_SelectionType, 
                    string Original_SelectionText, 
                    global::System.Nullable<global::System.DateTime> Original_DateModified, 
                    bool Original_Hidden, 
                    global::System.Nullable<global::System.Guid> Original_ParentGUID, 
                    global::System.Nullable<global::System.Guid> Original_PropertyGUID, 
                    string Original_SelectionCode, 
                    bool Original_lock) {
            return this.Update(Original_SelectionGUID, SelectionType, SelectionText, DateModified, Hidden, ParentGUID, PropertyGUID, SelectionCode, _lock, SelectionDescription, Original_SelectionGUID, Original_SelectionType, Original_SelectionText, Original_DateModified, Original_Hidden, Original_ParentGUID, Original_PropertyGUID, Original_SelectionCode, Original_lock);
        }
    }
}

#pragma warning restore 1591